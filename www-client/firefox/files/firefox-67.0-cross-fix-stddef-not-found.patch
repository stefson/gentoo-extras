diff --git a/build/moz.configure/bindgen.configure b/build/moz.configure/bindgen.configure
index 1658c8f..24b39d8 100644
--- a/build/moz.configure/bindgen.configure
+++ b/build/moz.configure/bindgen.configure
@@ -258,40 +262,97 @@ def basic_bindgen_cflags(target, is_unix, compiler_info, android_cflags, clang_p
     if target.os == 'Android':
         args += android_cflags
 
-    args += {
-        'Android': ['-DOS_ANDROID=1'],
-        'DragonFly': ['-DOS_BSD=1', '-DOS_DRAGONFLY=1'],
-        'FreeBSD': ['-DOS_BSD=1', '-DOS_FREEBSD=1'],
-        'GNU': ['-DOS_LINUX=1'],
-        'NetBSD': ['-DOS_BSD=1', '-DOS_NETBSD=1'],
-        'OpenBSD': ['-DOS_BSD=1', '-DOS_OPENBSD=1'],
-        'OSX': ['-DOS_MACOSX=1', '-stdlib=libc++'],
-        'SunOS': ['-DOS_SOLARIS=1'],
-        'WINNT': [
-            '-DOS_WIN=1',
-            '-DWIN32=1',
-        ],
-    }.get(target.os, [])
-
-    if compiler_info.type == 'clang-cl':
-        args += [
-            # To enable the builtin __builtin_offsetof so that CRT wouldn't
-            # use reinterpret_cast in offsetof() which is not allowed inside
-            # static_assert().
-            '-D_CRT_USE_BUILTIN_OFFSETOF',
-            # Enable hidden attribute (which is not supported by MSVC and
-            # thus not enabled by default with a MSVC-compatibile build)
-            # to exclude hidden symbols from the generated file.
-            '-DHAVE_VISIBILITY_HIDDEN_ATTRIBUTE=1',
-        ]
-
-    # We want to pass the same base flags as we'd pass clang.
-    # check_compiler from toolchain.configure gives us that.
-    # XXX: We should actually use the compiler from toolchain.configure.
-    # See bug 1526857.
-    info = check_compiler([clang_path], 'C++', target)
-
-    args += info.flags
+    def handle_cpu(obj):
+        if 'cpu' in obj and target.cpu in obj['cpu']:
+            return obj['cpu'][target.cpu]
+        return []
+
+    if target.os == 'WINNT' and host.raw_os.startswith('gnu'):
+        args += handle_cpu({
+            'cpu': {
+                'x86': ['--target=i686-pc-mingw32'],
+                'x86_64': ['--target=x86_64-w64-mingw32'],
+            },
+        })
+
+    os_dict = {
+        'Android': {
+            'default': ['-DOS_ANDROID=1'],
+            'cpu': {
+                'aarch64': ['--target=aarch64-linux-android'],
+                'arm': ['--target=armv7-linux-androideabi'],
+                'x86': ['--target=i686-linux-android'],
+                'x86_64': ['--target=x86_64-linux-android'],
+            },
+        },
+        'DragonFly': {
+            'default': ['-DOS_BSD=1', '-DOS_DRAGONFLY=1'],
+        },
+        'FreeBSD': {
+            'default': ['-DOS_BSD=1', '-DOS_FREEBSD=1'],
+        },
+        'GNU': {
+            'default': ['-DOS_LINUX=1'],
+            'cpu': {
+                'x86': ['-m32'],
+                'x86_64': ['-m64'],
+            },
+        },
+        'NetBSD': {
+            'default': ['-DOS_BSD=1', '-DOS_NETBSD=1'],
+        },
+        'OpenBSD': {
+            'default': ['-DOS_BSD=1', '-DOS_OPENBSD=1'],
+        },
+        'OSX': {
+            'default': [
+                '-DOS_MACOSX=1',
+                '-stdlib=libc++',
+                # To disable the fixup bindgen applies which adds search
+                # paths from clang command line in order to avoid potential
+                # conflict with -stdlib=libc++.
+                '--target=x86_64-apple-darwin',
+            ],
+        },
+        'SunOS': {
+            'default': ['-DOS_SOLARIS=1'],
+        },
+        'WINNT': {
+            'default': [
+                '-DOS_WIN=1',
+                '-DWIN32=1',
+            ],
+            'compiler': {
+                'msvc': {
+                    'default': [
+                        # To enable the builtin __builtin_offsetof so that CRT wouldn't
+                        # use reinterpret_cast in offsetof() which is not allowed inside
+                        # static_assert().
+                        '-D_CRT_USE_BUILTIN_OFFSETOF',
+                        # Enable hidden attribute (which is not supported by MSVC and
+                        # thus not enabled by default with a MSVC-compatibile build)
+                        # to exclude hidden symbols from the generated file.
+                        '-DHAVE_VISIBILITY_HIDDEN_ATTRIBUTE=1',
+                    ],
+                    'cpu': {
+                        'x86': ['--target=i686-pc-win32'],
+                        'x86_64': ['--target=x86_64-pc-win32'],
+                        'aarch64': ['--target=aarch64-pc-windows-msvc'],
+                    },
+                },
+            },
+        },
+    }.get(target.os, {})
+
+    if 'default' in os_dict:
+        args += os_dict['default']
+
+    args += handle_cpu(os_dict)
+    if 'compiler' in os_dict and compiler_info and compiler_info in os_dict['compiler']:
+        compiler_dict = os_dict['compiler'].get(compiler_info)
+        if 'default' in compiler_dict:
+            args += compiler_dict['default']
+        args += handle_cpu(compiler_dict)
 
     return args
 
