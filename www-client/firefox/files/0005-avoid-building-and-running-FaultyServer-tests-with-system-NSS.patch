diff --git a/netwerk/test/unit/test_retry_0rtt.js b/netwerk/test/unit/test_retry_0rtt.js
--- a/netwerk/test/unit/test_retry_0rtt.js
+++ b/netwerk/test/unit/test_retry_0rtt.js
@@ -16,31 +16,40 @@
 
 function handlerCount(path) {
   return handlerCallbacks[path] || 0;
 }
 
-add_setup(async () => {
-  httpServer = new HttpServer();
-  httpServer.registerPrefixHandler("/callback/", listenHandler);
-  httpServer.start(-1);
+ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
 
-  registerCleanupFunction(async () => {
-    await httpServer.stop();
-  });
+// Bug 1805371: Tests that require FaultyServer can't currently be built
+// with system NSS.
+add_setup(
+  {
+    skip_if: () => AppConstants.MOZ_SYSTEM_NSS,
+  },
+  async () => {
+    httpServer = new HttpServer();
+    httpServer.registerPrefixHandler("/callback/", listenHandler);
+    httpServer.start(-1);
 
-  Services.env.set(
-    "FAULTY_SERVER_CALLBACK_PORT",
-    httpServer.identity.primaryPort
-  );
-  Services.env.set("MOZ_TLS_SERVER_0RTT", "1");
-  await asyncStartTLSTestServer(
-    "FaultyServer",
-    "../../../security/manager/ssl/tests/unit/test_faulty_server"
-  );
-  let nssComponent = Cc["@mozilla.org/psm;1"].getService(Ci.nsINSSComponent);
-  await nssComponent.asyncClearSSLExternalAndInternalSessionCache();
-});
+    registerCleanupFunction(async () => {
+      await httpServer.stop();
+    });
+
+    Services.env.set(
+      "FAULTY_SERVER_CALLBACK_PORT",
+      httpServer.identity.primaryPort
+    );
+    Services.env.set("MOZ_TLS_SERVER_0RTT", "1");
+    await asyncStartTLSTestServer(
+      "FaultyServer",
+      "../../../security/manager/ssl/tests/unit/test_faulty_server"
+    );
+    let nssComponent = Cc["@mozilla.org/psm;1"].getService(Ci.nsINSSComponent);
+    await nssComponent.asyncClearSSLExternalAndInternalSessionCache();
+  }
+);
 
 async function sleep(time) {
   return new Promise(resolve => {
     do_timeout(time * 1000, resolve);
   });
@@ -62,46 +71,51 @@
       new ChannelListener((req, buffer) => resolve([req, buffer]), null, flags)
     );
   });
 }
 
-add_task(async function testRetry0Rtt() {
-  var retryDomains = [
-    "0rtt-alert-bad-mac.example.com",
-    "0rtt-alert-protocol-version.example.com",
-    //"0rtt-alert-unexpected.example.com", // TODO(bug 1753204): uncomment this
-  ];
+add_task(
+  {
+    skip_if: () => AppConstants.MOZ_SYSTEM_NSS,
+  },
+  async function testRetry0Rtt() {
+    var retryDomains = [
+      "0rtt-alert-bad-mac.example.com",
+      "0rtt-alert-protocol-version.example.com",
+      //"0rtt-alert-unexpected.example.com", // TODO(bug 1753204): uncomment this
+    ];
 
-  Services.prefs.setCharPref("network.dns.localDomains", retryDomains);
+    Services.prefs.setCharPref("network.dns.localDomains", retryDomains);
 
-  Services.prefs.setBoolPref("network.ssl_tokens_cache_enabled", true);
+    Services.prefs.setBoolPref("network.ssl_tokens_cache_enabled", true);
 
-  for (var i = 0; i < retryDomains.length; i++) {
-    {
-      let countOfEarlyData = handlerCount("/callback/1");
-      let chan = makeChan(`https://${retryDomains[i]}:8443`);
-      let [, buf] = await channelOpenPromise(chan, CL_ALLOW_UNKNOWN_CL);
-      ok(buf);
-      equal(
-        handlerCount("/callback/1"),
-        countOfEarlyData,
-        "no early data sent"
-      );
-    }
+    for (var i = 0; i < retryDomains.length; i++) {
+      {
+        let countOfEarlyData = handlerCount("/callback/1");
+        let chan = makeChan(`https://${retryDomains[i]}:8443`);
+        let [, buf] = await channelOpenPromise(chan, CL_ALLOW_UNKNOWN_CL);
+        ok(buf);
+        equal(
+          handlerCount("/callback/1"),
+          countOfEarlyData,
+          "no early data sent"
+        );
+      }
 
-    // The server has an anti-replay mechanism that prohibits it from
-    // accepting 0-RTT connections immediately at startup.
-    await sleep(1);
+      // The server has an anti-replay mechanism that prohibits it from
+      // accepting 0-RTT connections immediately at startup.
+      await sleep(1);
 
-    {
-      let countOfEarlyData = handlerCount("/callback/1");
-      let chan = makeChan(`https://${retryDomains[i]}:8443`);
-      let [, buf] = await channelOpenPromise(chan, CL_ALLOW_UNKNOWN_CL);
-      ok(buf);
-      equal(
-        handlerCount("/callback/1"),
-        countOfEarlyData + 1,
-        "got early data"
-      );
+      {
+        let countOfEarlyData = handlerCount("/callback/1");
+        let chan = makeChan(`https://${retryDomains[i]}:8443`);
+        let [, buf] = await channelOpenPromise(chan, CL_ALLOW_UNKNOWN_CL);
+        ok(buf);
+        equal(
+          handlerCount("/callback/1"),
+          countOfEarlyData + 1,
+          "got early data"
+        );
+      }
     }
   }
-});
+);
diff --git a/security/manager/ssl/tests/unit/tlsserver/cmd/moz.build b/security/manager/ssl/tests/unit/tlsserver/cmd/moz.build
--- a/security/manager/ssl/tests/unit/tlsserver/cmd/moz.build
+++ b/security/manager/ssl/tests/unit/tlsserver/cmd/moz.build
@@ -7,26 +7,39 @@
 GeckoSimplePrograms(
     [
         "BadCertAndPinningServer",
         "DelegatedCredentialsServer",
         "EncryptedClientHelloServer",
-        "FaultyServer",
         "GenerateOCSPResponse",
         "OCSPStaplingServer",
         "SanctionsTestServer",
     ],
     linkage=None,
 )
 
-DEFINES["NSS_USE_STATIC_LIBS"] = True
+if not CONFIG["MOZ_SYSTEM_NSS"]:
+    # Bug 1805371. See comment in ../lib/moz.build
+    GeckoSimplePrograms(
+        [
+            "FaultyServer",
+        ],
+        linkage=None,
+    )
+
+    DEFINES["NSS_USE_STATIC_LIBS"] = True
 
-LOCAL_INCLUDES += [
-    "../../../../../../nss/lib/ssl",
-    "../lib",
-]
+    LOCAL_INCLUDES += [
+        "../../../../../../nss/lib/ssl",
+        "../lib",
+    ]
+    USE_LIBS += [
+        "tlsserver",
+    ]
+else:
+    LOCAL_INCLUDES += [
+        "../lib",
+    ]
+    USE_LIBS += ["mozpkix", "nspr", "nss", "tlsserver"]
 
-USE_LIBS += [
-    "tlsserver",
-]
 
 if CONFIG["MOZ_WIDGET_TOOLKIT"] == "gtk":
     CXXFLAGS += CONFIG["MOZ_GTK3_CFLAGS"]
diff --git a/security/manager/ssl/tests/unit/tlsserver/lib/moz.build b/security/manager/ssl/tests/unit/tlsserver/lib/moz.build
--- a/security/manager/ssl/tests/unit/tlsserver/lib/moz.build
+++ b/security/manager/ssl/tests/unit/tlsserver/lib/moz.build
@@ -7,34 +7,44 @@
 UNIFIED_SOURCES += [
     "OCSPCommon.cpp",
     "TLSServer.cpp",
 ]
 
-DEFINES["NSS_USE_STATIC_LIBS"] = True
-
 USE_LIBS += [
-    "certdb",
-    "certhi",
-    "cryptohi",
-    "freebl",
-    "mozpkix",
     "mozpkix-testlib",
-    "nspr",
-    "nss_static",
-    "nssb",
-    "nssdev",
-    "nsspki",
-    "pk11wrap",
-    "smime",
-    "softokn3",
-    "sqlite",
-    "ssl",
 ]
 
-if CONFIG["MOZ_FOLD_LIBS"]:
-    USE_LIBS += ["nssutil"]
-else:
-    USE_LIBS += ["nssutil3"]
+if not CONFIG["MOZ_SYSTEM_NSS"]:
+    # Bug 1805371: The FaultyServer binary added in Bug 1754746 needs to
+    # be statically linked against NSS, but the configuration here breaks
+    # builds with system NSS. A complete solution involves some changes
+    # to the NSS build system. For now we're disabling FaultyServer when
+    # using system NSS and linking the rest of the tests dynamically.
+    DEFINES["NSS_USE_STATIC_LIBS"] = True
+
+    USE_LIBS += [
+        "certdb",
+        "certhi",
+        "cryptohi",
+        "freebl",
+        "mozpkix",
+        "mozpkix-testlib",
+        "nspr",
+        "nss_static",
+        "nssb",
+        "nssdev",
+        "nsspki",
+        "pk11wrap",
+        "smime",
+        "softokn3",
+        "sqlite",
+        "ssl",
+    ]
+
+    if CONFIG["MOZ_FOLD_LIBS"]:
+        USE_LIBS += ["nssutil"]
+    else:
+        USE_LIBS += ["nssutil3"]
 
 Library("tlsserver")
 
 REQUIRES_UNIFIED_BUILD = True
diff --git a/security/moz.build b/security/moz.build
--- a/security/moz.build
+++ b/security/moz.build
@@ -58,14 +58,16 @@
         "ssl3",
     ]
     gyp_vars["nspr_libs"] = "nspr"
 else:
     gyp_vars["nspr_libs"] = "nspr"
-    if not CONFIG["ENABLE_TESTS"]:
-        # If we're not building tests, then we don't need a static copy
-        # of NSS. Build mozpkix only.
-        gyp_vars["mozpkix_only"] = 1
+    # Bug 1805371: We need a static copy of NSS for the tlsserver test
+    # binaries even when building with system NSS. But there's no good
+    # way to build NSS that does not pollute dist/bin with shared
+    # object files. For now, we have to build mozpkix only and disable
+    # the affected tests.
+    gyp_vars["mozpkix_only"] = 1
 
 # This disables building some NSS tools.
 gyp_vars["mozilla_client"] = 1
 
 # This builds NSS tools in COMM applications that Firefox doesn't build.


