diff --git a/widget/gtk/WakeLockListener.cpp b/widget/gtk/WakeLockListener.cpp
index 9a2376d..d7f59cf 100644
--- a/widget/gtk/WakeLockListener.cpp
+++ b/widget/gtk/WakeLockListener.cpp
@@ -122,8 +122,6 @@ class WakeLockTopic {
   bool SendInhibit();
   bool SendUninhibit();
 
-  nsresult ProcessNextRequest();
-
 #if defined(MOZ_X11)
   bool CheckXScreenSaverSupport();
   bool InhibitXScreenSaver(bool inhibit);
@@ -176,8 +174,8 @@ class WakeLockTopic {
   } mState = Uninhibited;
 
 #if MOZ_LOGGING
-  const char* GetInhibitStateName(WakeLockState aState) {
-    switch (aState) {
+  const char* GetInhibitStateName() {
+    switch (mState) {
       case Inhibited:
         return "inhibited";
       case WaitingToInhibit:
@@ -192,19 +190,20 @@ class WakeLockTopic {
 #endif
 
 #ifdef MOZ_ENABLE_DBUS
+  // We're waiting for DBus reply (inhibit/uninhibit calls).
+  bool mWaitingForDBusInhibit = false;
+  bool mWaitingForDBusUninhibit = false;
+
   // mInhibitRequestID is received from success screen saver inhibit call
   // and it's needed for screen saver enablement.
   Maybe<uint32_t> mInhibitRequestID;
+
+  RefPtr<GCancellable> mInhibitCancellable;
+  RefPtr<GCancellable> mUnInhibitCancellable;
   // Used to uninhibit org.freedesktop.portal.Inhibit request
   nsCString mRequestObjectPath;
-  // It's used to quit DBus operation on shutdown.
-  RefPtr<GCancellable> mCancellable;
-  // If we fail to uninhibit DBus screensaver just disable
-  // it completelly.
-  int mUninhibitAttempts = 5;
 #endif
 
-  std::queue<WakeLockState> mStateQueue;
   static int sWakeLockType;
 };
 
@@ -212,51 +211,55 @@ int WakeLockTopic::sWakeLockType = Initial;
 
 #ifdef MOZ_ENABLE_DBUS
 void WakeLockTopic::DBusInhibitSucceeded(uint32_t aInhibitRequestID) {
-  mState = Inhibited;
-  mCancellable = nullptr;
+  mWaitingForDBusInhibit = false;
   mInhibitRequestID = Some(aInhibitRequestID);
 
-  WAKE_LOCK_LOG("WakeLockTopic::DBusInhibitSucceeded(), mInhibitRequestID %u",
-                *mInhibitRequestID);
+  WAKE_LOCK_LOG(
+      "WakeLockTopic::DBusInhibitSucceeded(), mInhibitRequestID %u "
+      "state %s",
+      *mInhibitRequestID, GetInhibitStateName());
 
-  ProcessNextRequest();
+  // Uninhibit was requested before inhibit request was finished.
+  // So ask for it now.
+  if (mState == WaitingToUninhibit) {
+    UninhibitScreensaver();
+  } else {
+    mState = Inhibited;
+  }
 }
 
 void WakeLockTopic::DBusInhibitFailed(bool aFatal) {
   WAKE_LOCK_LOG("WakeLockTopic::DBusInhibitFailed(%d)", aFatal);
 
-  mCancellable = nullptr;
+  mWaitingForDBusInhibit = false;
   ClearDBusInhibitToken();
 
   // Non-recoverable DBus error. Switch to another wake lock type.
   if (aFatal && SwitchToNextWakeLockType()) {
-    mState = WaitingToInhibit;
     SendInhibit();
-    return;
   }
-
-  // Flip back to uninhibited state as we failed.
-  mState = Uninhibited;
 }
 
 void WakeLockTopic::DBusUninhibitSucceeded() {
-  WAKE_LOCK_LOG("WakeLockTopic::DBusUninhibitSucceeded()");
-  mState = Uninhibited;
-  mCancellable = nullptr;
+  WAKE_LOCK_LOG("WakeLockTopic::DBusUninhibitSucceeded() state %s",
+                GetInhibitStateName());
+
+  mWaitingForDBusUninhibit = false;
   ClearDBusInhibitToken();
-  ProcessNextRequest();
+
+  // Inhibit was requested before uninhibit request was finished.
+  // So ask for it now.
+  if (mState == WaitingToInhibit) {
+    InhibitScreensaver();
+  } else {
+    mState = Uninhibited;
+  }
 }
 
 void WakeLockTopic::DBusUninhibitFailed() {
   WAKE_LOCK_LOG("WakeLockTopic::DBusUninhibitFailed()");
-  mState = Inhibited;
-  mCancellable = nullptr;
-
-  // We're in inhibited state and we can't switch back.
-  // Let's try again but there isn't much to do.
-  if (--mUninhibitAttempts == 0) {
-    sWakeLockType = Unsupported;
-  }
+  mWaitingForDBusUninhibit = false;
+  mInhibitRequestID = Nothing();
 }
 
 void WakeLockTopic::ClearDBusInhibitToken() {
@@ -268,18 +271,31 @@ void WakeLockTopic::DBusInhibitScreensaver(const char* aName, const char* aPath,
                                            const char* aCall,
                                            const char* aMethod,
                                            RefPtr<GVariant> aArgs) {
-  WAKE_LOCK_LOG("WakeLockTopic::DBusInhibitScreensaver()");
-
-  MOZ_DIAGNOSTIC_ASSERT(!mCancellable);
-  MOZ_DIAGNOSTIC_ASSERT(mState == WaitingToInhibit);
+  WAKE_LOCK_LOG(
+      "WakeLockTopic::DBusInhibitScreensaver() mWaitingForDBusInhibit %d "
+      "mWaitingForDBusUninhibit %d",
+      mWaitingForDBusInhibit, mWaitingForDBusUninhibit);
+  if (mWaitingForDBusInhibit) {
+    WAKE_LOCK_LOG("  already waiting to inihibit, return");
+    return;
+  }
+  if (mWaitingForDBusUninhibit) {
+    WAKE_LOCK_LOG("  cancel un-inihibit request");
+    g_cancellable_cancel(mUnInhibitCancellable);
+    mUnInhibitCancellable = nullptr;
+    mWaitingForDBusUninhibit = false;
+  }
+  mWaitingForDBusInhibit = true;
 
-  mCancellable = dont_AddRef(g_cancellable_new());
+  if (!mInhibitCancellable) {
+    mInhibitCancellable = dont_AddRef(g_cancellable_new());
+  }
 
   widget::CreateDBusProxyForBus(
       G_BUS_TYPE_SESSION,
       GDBusProxyFlags(G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS |
                       G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES),
-      /* aInterfaceInfo = */ nullptr, aName, aPath, aCall, mCancellable)
+      /* aInterfaceInfo = */ nullptr, aName, aPath, aCall, mInhibitCancellable)
       ->Then(
           GetCurrentSerialEventTarget(), __func__,
           [self = RefPtr{this}, this, args = RefPtr{aArgs},
@@ -287,7 +303,8 @@ void WakeLockTopic::DBusInhibitScreensaver(const char* aName, const char* aPath,
             WAKE_LOCK_LOG(
                 "WakeLockTopic::DBusInhibitScreensaver() proxy created");
             DBusProxyCall(aProxy.get(), aMethod, args.get(),
-                          G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT, mCancellable)
+                          G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT,
+                          mInhibitCancellable)
                 ->Then(
                     GetCurrentSerialEventTarget(), __func__,
                     [s = RefPtr{this}, this](RefPtr<GVariant>&& aResult) {
@@ -341,19 +358,34 @@ void WakeLockTopic::DBusUninhibitScreensaver(const char* aName,
                                              const char* aPath,
                                              const char* aCall,
                                              const char* aMethod) {
-  WAKE_LOCK_LOG("WakeLockTopic::DBusUninhibitScreensaver() request id %d",
-                mInhibitRequestID ? *mInhibitRequestID : -1);
+  WAKE_LOCK_LOG(
+      "WakeLockTopic::DBusUninhibitScreensaver() mWaitingForDBusInhibit %d "
+      "mWaitingForDBusUninhibit %d request id %d",
+      mWaitingForDBusInhibit, mWaitingForDBusUninhibit,
+      mInhibitRequestID ? *mInhibitRequestID : -1);
+
+  if (mWaitingForDBusUninhibit) {
+    WAKE_LOCK_LOG("  already waiting to uninihibit, return");
+    return;
+  }
+
+  if (mWaitingForDBusInhibit) {
+    WAKE_LOCK_LOG("  cancel inihibit request");
+    g_cancellable_cancel(mInhibitCancellable);
+    mInhibitCancellable = nullptr;
+    mWaitingForDBusInhibit = false;
+  }
 
   if (!mInhibitRequestID.isSome()) {
     WAKE_LOCK_LOG("  missing inihibit token, quit.");
-    DBusUninhibitFailed();
+    // missing uninhibit token, just quit.
     return;
   }
+  mWaitingForDBusUninhibit = true;
 
-  MOZ_DIAGNOSTIC_ASSERT(!mCancellable);
-  MOZ_DIAGNOSTIC_ASSERT(mState == WaitingToUninhibit);
-
-  mCancellable = dont_AddRef(g_cancellable_new());
+  if (!mUnInhibitCancellable) {
+    mUnInhibitCancellable = dont_AddRef(g_cancellable_new());
+  }
 
   RefPtr<GVariant> variant =
       dont_AddRef(g_variant_ref_sink(g_variant_new("(u)", *mInhibitRequestID)));
@@ -362,7 +394,8 @@ void WakeLockTopic::DBusUninhibitScreensaver(const char* aName,
       G_BUS_TYPE_SESSION,
       GDBusProxyFlags(G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS |
                       G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES),
-      /* aInterfaceInfo = */ nullptr, aName, aPath, aCall, mCancellable)
+      /* aInterfaceInfo = */ nullptr, aName, aPath, aCall,
+      mUnInhibitCancellable)
       ->Then(
           target, __func__,
           [self = RefPtr{this}, this, args = std::move(variant), target,
@@ -370,7 +403,8 @@ void WakeLockTopic::DBusUninhibitScreensaver(const char* aName,
             WAKE_LOCK_LOG(
                 "WakeLockTopic::DBusUninhibitScreensaver() proxy created");
             DBusProxyCall(aProxy.get(), aMethod, args.get(),
-                          G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT, mCancellable)
+                          G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT,
+                          mUnInhibitCancellable)
                 ->Then(
                     target, __func__,
                     [s = RefPtr{this}, this](RefPtr<GVariant>&& aResult) {
@@ -395,12 +429,25 @@ void WakeLockTopic::DBusUninhibitScreensaver(const char* aName,
 }
 
 void WakeLockTopic::InhibitFreeDesktopPortal() {
-  WAKE_LOCK_LOG("WakeLockTopic::InhibitFreeDesktopPortal()");
-
-  MOZ_DIAGNOSTIC_ASSERT(!mCancellable);
-  MOZ_DIAGNOSTIC_ASSERT(mState == WaitingToInhibit);
+  WAKE_LOCK_LOG(
+      "WakeLockTopic::InhibitFreeDesktopPortal() mWaitingForDBusInhibit %d "
+      "mWaitingForDBusUninhibit %d",
+      mWaitingForDBusInhibit, mWaitingForDBusUninhibit);
+  if (mWaitingForDBusInhibit) {
+    WAKE_LOCK_LOG("  already waiting to inihibit, return");
+    return;
+  }
+  if (mWaitingForDBusUninhibit) {
+    WAKE_LOCK_LOG("  cancel un-inihibit request");
+    g_cancellable_cancel(mUnInhibitCancellable);
+    mUnInhibitCancellable = nullptr;
+    mWaitingForDBusUninhibit = false;
+  }
+  mWaitingForDBusInhibit = true;
 
-  mCancellable = dont_AddRef(g_cancellable_new());
+  if (!mInhibitCancellable) {
+    mInhibitCancellable = dont_AddRef(g_cancellable_new());
+  }
 
   CreateDBusProxyForBus(
       G_BUS_TYPE_SESSION,
@@ -408,7 +455,7 @@ void WakeLockTopic::InhibitFreeDesktopPortal() {
                       G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES),
       nullptr, FREEDESKTOP_PORTAL_DESKTOP_TARGET,
       FREEDESKTOP_PORTAL_DESKTOP_OBJECT, FREEDESKTOP_PORTAL_DESKTOP_INTERFACE,
-      mCancellable)
+      mInhibitCancellable)
       ->Then(
           GetCurrentSerialEventTarget(), __func__,
           [self = RefPtr{this}, this](RefPtr<GDBusProxy>&& aProxy) {
@@ -423,7 +470,7 @@ void WakeLockTopic::InhibitFreeDesktopPortal() {
                 aProxy.get(), "Inhibit",
                 g_variant_new("(sua{sv})", g_get_prgname(),
                               FREEDESKTOP_PORTAL_DESKTOP_INHIBIT_IDLE_FLAG, &b),
-                G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT, mCancellable)
+                G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT, mInhibitCancellable)
                 ->Then(
                     GetCurrentSerialEventTarget(), __func__,
                     [s = RefPtr{this}, this](RefPtr<GVariant>&& aResult) {
@@ -490,19 +537,32 @@ void WakeLockTopic::InhibitGNOME() {
 }
 
 void WakeLockTopic::UninhibitFreeDesktopPortal() {
-  WAKE_LOCK_LOG("WakeLockTopic::UninhibitFreeDesktopPortal() object path: %s",
-                mRequestObjectPath.get());
+  WAKE_LOCK_LOG(
+      "WakeLockTopic::UninhibitFreeDesktopPortal() mWaitingForDBusInhibit %d "
+      "mWaitingForDBusUninhibit %d object path: %s",
+      mWaitingForDBusInhibit, mWaitingForDBusUninhibit,
+      mRequestObjectPath.get());
+
+  if (mWaitingForDBusUninhibit) {
+    WAKE_LOCK_LOG("  already waiting to uninihibit, return");
+    return;
+  }
 
+  if (mWaitingForDBusInhibit) {
+    WAKE_LOCK_LOG("  cancel inihibit request");
+    g_cancellable_cancel(mInhibitCancellable);
+    mInhibitCancellable = nullptr;
+    mWaitingForDBusInhibit = false;
+  }
   if (mRequestObjectPath.IsEmpty()) {
     WAKE_LOCK_LOG("UninhibitFreeDesktopPortal() failed: unknown object path\n");
-    DBusUninhibitFailed();
     return;
   }
+  mWaitingForDBusUninhibit = true;
 
-  MOZ_DIAGNOSTIC_ASSERT(!mCancellable);
-  MOZ_DIAGNOSTIC_ASSERT(mState == WaitingToUninhibit);
-
-  mCancellable = dont_AddRef(g_cancellable_new());
+  if (!mUnInhibitCancellable) {
+    mUnInhibitCancellable = dont_AddRef(g_cancellable_new());
+  }
 
   nsCOMPtr<nsISerialEventTarget> target = GetCurrentSerialEventTarget();
   CreateDBusProxyForBus(
@@ -510,12 +570,13 @@ void WakeLockTopic::UninhibitFreeDesktopPortal() {
       GDBusProxyFlags(G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS |
                       G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES),
       nullptr, FREEDESKTOP_PORTAL_DESKTOP_TARGET, mRequestObjectPath.get(),
-      "org.freedesktop.portal.Request", mCancellable)
+      "org.freedesktop.portal.Request", mUnInhibitCancellable)
       ->Then(
           target, __func__,
           [self = RefPtr{this}, target, this](RefPtr<GDBusProxy>&& aProxy) {
             DBusProxyCall(aProxy.get(), "Close", nullptr,
-                          G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT, mCancellable)
+                          G_DBUS_CALL_FLAGS_NONE, DBUS_TIMEOUT,
+                          mUnInhibitCancellable)
                 ->Then(
                     target, __func__,
                     [s = RefPtr{this}, this](RefPtr<GVariant>&& aResult) {
@@ -616,9 +677,6 @@ bool WakeLockTopic::CheckXScreenSaverSupport() {
 bool WakeLockTopic::InhibitXScreenSaver(bool inhibit) {
   WAKE_LOCK_LOG("InhibitXScreenSaver %d", inhibit);
 
-  // Set failed state now to remove WaitingTo* one
-  mState = inhibit ? Uninhibited : Inhibited;
-
   // Should only be called if CheckXScreenSaverSupport returns true.
   // There's a couple of safety checks here nonetheless.
   if (!_XSSSuspend) {
@@ -647,9 +705,6 @@ bool WakeLockTopic::CheckWaylandIdleInhibitSupport() {
 bool WakeLockTopic::InhibitWaylandIdle() {
   WAKE_LOCK_LOG("InhibitWaylandIdle()");
 
-  // Set failed state now to remove WaitingTo* one
-  mState = Uninhibited;
-
   nsWaylandDisplay* waylandDisplay = WaylandDisplayGet();
   if (!waylandDisplay) {
     return false;
@@ -693,6 +748,7 @@ bool WakeLockTopic::SendInhibit() {
   WAKE_LOCK_LOG("WakeLockTopic::SendInhibit() WakeLockType %s",
                 WakeLockTypeNames[sWakeLockType]);
   MOZ_ASSERT(sWakeLockType != Initial);
+
   switch (sWakeLockType) {
 #if defined(MOZ_ENABLE_DBUS)
     case FreeDesktopPortal:
@@ -757,73 +813,44 @@ bool WakeLockTopic::SendUninhibit() {
 
 nsresult WakeLockTopic::InhibitScreensaver() {
   WAKE_LOCK_LOG("WakeLockTopic::InhibitScreensaver() state %s",
-                GetInhibitStateName(mState));
-  // We're broken, don't even try
-  if (sWakeLockType == Unsupported) {
-    return NS_ERROR_FAILURE;
-  }
-  mStateQueue.push(Inhibited);
-  if (mState == WaitingToInhibit || mState == WaitingToUninhibit) {
-    return NS_OK;
-  }
-  return ProcessNextRequest();
-}
+                GetInhibitStateName());
 
-nsresult WakeLockTopic::UninhibitScreensaver() {
-  WAKE_LOCK_LOG("WakeLockTopic::UnInhibitScreensaver() state %s",
-                GetInhibitStateName(mState));
-  // We're broken, don't even try
-  if (sWakeLockType == Unsupported) {
-    return NS_ERROR_FAILURE;
-  }
-  mStateQueue.push(Uninhibited);
-  if (mState == WaitingToInhibit || mState == WaitingToUninhibit) {
+  if (mState == Inhibited || mState == WaitingToInhibit) {
     return NS_OK;
   }
-  return ProcessNextRequest();
-}
-
-nsresult WakeLockTopic::ProcessNextRequest() {
-  WAKE_LOCK_LOG("WakeLockTopic::ProcessNextRequest(): recent state %s",
-                GetInhibitStateName(mState));
-  MOZ_DIAGNOSTIC_ASSERT(mState == Inhibited || mState == Uninhibited);
+  mState = WaitingToInhibit;
 
-  while (!mStateQueue.empty()) {
-    WakeLockState nextState = mStateQueue.front();
-    mStateQueue.pop();
+  // Iterate through wake lock types in case of failure.
+  while (!SendInhibit()) {
+    // We don't switch away from native locks. Just try again.
+    if (IsNativeWakeLock(sWakeLockType)) {
+      return NS_ERROR_FAILURE;
+    }
+    if (!SwitchToNextWakeLockType()) {
+      return NS_ERROR_FAILURE;
+    }
+  }
 
-    WAKE_LOCK_LOG("WakeLockTopic::ProcessNextRequest(): next state %s",
-                  GetInhibitStateName(nextState));
+  return (sWakeLockType != Unsupported) ? NS_OK : NS_ERROR_FAILURE;
+}
 
-    if (nextState == mState) {
-      continue;
-    }
+nsresult WakeLockTopic::UninhibitScreensaver() {
+  WAKE_LOCK_LOG("WakeLockTopic::UnInhibitScreensaver() state %s",
+                GetInhibitStateName());
 
-    switch (nextState) {
-      case Inhibited:
-        mState = WaitingToInhibit;
-        return SendInhibit() ? NS_OK : NS_ERROR_FAILURE;
-        break;
-      case Uninhibited:
-        mState = WaitingToUninhibit;
-        return SendUninhibit() ? NS_OK : NS_ERROR_FAILURE;
-      default:
-        MOZ_DIAGNOSTIC_ASSERT(false, "Wrong state!");
-        return NS_ERROR_FAILURE;
-    }
+  if (mState == Uninhibited || mState == WaitingToUninhibit) {
+    return NS_OK;
   }
+  mState = WaitingToUninhibit;
 
-  WAKE_LOCK_LOG("WakeLockTopic::ProcessNextRequest(): empty queue");
-  return NS_OK;
+  // Don't switch wake lock type in case of failure.
+  // We need to use the same lock/unlock type.
+  return SendUninhibit() ? NS_OK : NS_ERROR_FAILURE;
 }
 
 void WakeLockTopic::Shutdown() {
-  WAKE_LOCK_LOG("WakeLockTopic::Shutdown() state %s",
-                GetInhibitStateName(mState));
-  if (mCancellable) {
-    g_cancellable_cancel(mCancellable);
-    mCancellable = nullptr;
-  }
+  WAKE_LOCK_LOG("WakeLockTopic::Shutdown() state %s", GetInhibitStateName());
+  UninhibitScreensaver();
 }
 
 bool WakeLockTopic::IsWakeLockTypeAvailable(int aWakeLockType) {
@@ -894,8 +921,10 @@ bool WakeLockTopic::SwitchToNextWakeLockType() {
 
 #if defined(MOZ_ENABLE_DBUS)
   if (IsDBusWakeLock(sWakeLockType)) {
+    // We're switching out of DBus wakelock - clear our recent DBus states.
+    mWaitingForDBusInhibit = false;
+    mWaitingForDBusUninhibit = false;
     mState = Uninhibited;
-    mCancellable = nullptr;
     ClearDBusInhibitToken();
   }
 #endif
