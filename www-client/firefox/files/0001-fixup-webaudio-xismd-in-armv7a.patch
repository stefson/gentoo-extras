# HG changeset patch
# User serge-sans-paille <sguelton@mozilla.com>
# Date 1678865227 0
# Node ID 2759a85d2f94c7fffae18ace30eae1a5f6bfd2a4
# Parent  a027945ceceb168625837132fa531557b6ea493c
Bug 1821363 - Use fully specified xsimd::batch type r=padenot

That way we cannot have one type using the default architecture that
interacts with the parametric type required by the user.

Differential Revision: https://phabricator.services.mozilla.com/D172126

diff --git a/dom/media/webaudio/AudioNodeEngineGeneric.h b/dom/media/webaudio/AudioNodeEngineGeneric.h
--- a/dom/media/webaudio/AudioNodeEngineGeneric.h
+++ b/dom/media/webaudio/AudioNodeEngineGeneric.h
@@ -200,20 +200,20 @@ struct Engine {
     MOZ_ASSERT(is_aligned<Arch>(aInput), "aInput is aligned");
     MOZ_ASSERT(is_aligned<Arch>(aOutput), "aOutput is aligned");
     MOZ_ASSERT(is_aligned<Arch>(aScale), "aScale is aligned");
     MOZ_ASSERT((aSize % xsimd::batch<float, Arch>::size == 0),
                "requires tail processing");
 
     MOZ_UNROLL(2)
     for (unsigned i = 0; i < aSize * 2;
-         i += 2 * xsimd::batch<std::complex<float>>::size) {
-      auto in1 = xsimd::batch<std::complex<float>>::load_aligned(
+         i += 2 * xsimd::batch<std::complex<float>, Arch>::size) {
+      auto in1 = xsimd::batch<std::complex<float>, Arch>::load_aligned(
           reinterpret_cast<const std::complex<float>*>(&aInput[i]));
-      auto in2 = xsimd::batch<std::complex<float>>::load_aligned(
+      auto in2 = xsimd::batch<std::complex<float>, Arch>::load_aligned(
           reinterpret_cast<const std::complex<float>*>(&aScale[i]));
       auto out = in1 * in2;
       out.store_aligned(reinterpret_cast<std::complex<float>*>(&aOutput[i]));
     }
   };
 
   static float AudioBufferSumOfSquares(const float* aInput, uint32_t aLength) {
     float sum = 0.f;


