diff --git a/third_party/libwebrtc/media/engine/internal_decoder_factory.cc b/third_party/libwebrtc/media/engine/internal_decoder_factory.cc
--- a/third_party/libwebrtc/media/engine/internal_decoder_factory.cc
+++ b/third_party/libwebrtc/media/engine/internal_decoder_factory.cc
@@ -89,14 +89,16 @@
   if (absl::EqualsIgnoreCase(format.name, cricket::kVp9CodecName))
     return VP9Decoder::Create();
   if (absl::EqualsIgnoreCase(format.name, cricket::kH264CodecName))
     return H264Decoder::Create();
 
+#if CONFIG_MOZ_AV1
   if (absl::EqualsIgnoreCase(format.name, cricket::kAv1CodecName) &&
       kDav1dIsIncluded && !field_trial::IsDisabled(kDav1dFieldTrial)) {
     return CreateDav1dDecoder();
   }
+#endif
 
   //if (absl::EqualsIgnoreCase(format.name, cricket::kAv1CodecName) &&
   //    kIsLibaomAv1DecoderSupported) {
   //  return CreateLibaomAv1Decoder();
   //}
diff --git a/third_party/libwebrtc/modules/video_coding/video_codec_initializer.cc b/third_party/libwebrtc/modules/video_coding/video_codec_initializer.cc
--- a/third_party/libwebrtc/modules/video_coding/video_codec_initializer.cc
+++ b/third_party/libwebrtc/modules/video_coding/video_codec_initializer.cc
@@ -300,10 +300,11 @@
       RTC_DCHECK_LE(video_codec.VP9()->numberOfTemporalLayers,
                     kMaxTemporalStreams);
 
       break;
     }
+#if CONFIG_MOZ_AV1
     case kVideoCodecAV1:
       if (SetAv1SvcConfig(video_codec,
                           /*num_temporal_layers=*/
                           streams.back().num_temporal_layers.value_or(1),
                           /*num_spatial_layers=*/
@@ -313,10 +314,11 @@
         }
       } else {
         RTC_LOG(LS_WARNING) << "Failed to configure svc bitrates for av1.";
       }
       break;
+#endif
     case kVideoCodecH264: {
       RTC_CHECK(!config.encoder_specific_settings);
 
       *video_codec.H264() = VideoEncoder::GetDefaultH264Settings();
       video_codec.H264()->numberOfTemporalLayers = static_cast<unsigned char>(
diff --git a/third_party/libwebrtc/moz.build b/third_party/libwebrtc/moz.build
--- a/third_party/libwebrtc/moz.build
+++ b/third_party/libwebrtc/moz.build
@@ -279,13 +279,10 @@
     "/third_party/libwebrtc/modules/utility/utility_gn",
     "/third_party/libwebrtc/modules/video_capture/video_capture_internal_impl_gn",
     "/third_party/libwebrtc/modules/video_capture/video_capture_module_gn",
     "/third_party/libwebrtc/modules/video_coding/chain_diff_calculator_gn",
     "/third_party/libwebrtc/modules/video_coding/codec_globals_headers_gn",
-    "/third_party/libwebrtc/modules/video_coding/codecs/av1/av1_svc_config_gn",
-    "/third_party/libwebrtc/modules/video_coding/codecs/av1/dav1d_decoder_gn",
-    "/third_party/libwebrtc/modules/video_coding/codecs/av1/libaom_av1_decoder_gn",
     "/third_party/libwebrtc/modules/video_coding/encoded_frame_gn",
     "/third_party/libwebrtc/modules/video_coding/frame_dependencies_calculator_gn",
     "/third_party/libwebrtc/modules/video_coding/frame_helpers_gn",
     "/third_party/libwebrtc/modules/video_coding/nack_requester_gn",
     "/third_party/libwebrtc/modules/video_coding/packet_buffer_gn",
@@ -457,10 +454,16 @@
     "/third_party/libwebrtc/video/video_gn",
     "/third_party/libwebrtc/video/video_receive_stream_timeout_tracker_gn",
     "/third_party/libwebrtc/video/video_stream_encoder_impl_gn",
     "/third_party/libwebrtc/webrtc_gn"
 ]
+if CONFIG["MOZ_AV1"]:
+    DIRS += [
+        "/third_party/libwebrtc/modules/video_coding/codecs/av1/av1_svc_config_gn",
+        "/third_party/libwebrtc/modules/video_coding/codecs/av1/dav1d_decoder_gn",
+        "/third_party/libwebrtc/modules/video_coding/codecs/av1/libaom_av1_decoder_gn",
+    ]
 
 if CONFIG["OS_TARGET"] == "Android":
 
     DIRS += [
         "/third_party/libwebrtc/rtc_base/ifaddrs_android_gn"


