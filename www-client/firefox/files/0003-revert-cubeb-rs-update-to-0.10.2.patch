commit cc791688e72b59889ccb657472502780ae19f342
Date:   Wed Oct 5 11:40:07 2022 +0200

    Revert "Bug 1791900 - Update cubeb-rs to 0.10.2.  r=cubeb-reviewers,supply-chain-reviewers,padenot"
    
    This reverts commit faf11528796aea67c78118d202e70caf85f7da46.

diff --git a/Cargo.lock b/Cargo.lock
index 4e5849b53cf0..3789698132b7 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1117,27 +1117,27 @@ checksum = "b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35"
 
 [[package]]
 name = "cubeb"
-version = "0.10.2"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c317e12df33d2b71fecaa9924706957a1833ada5e83d81fb336b33b63b9e0bdc"
+checksum = "53051f86ed8cf5a6771704e80147266f32bdf05cc09089da304484a1c612bb97"
 dependencies = [
  "cubeb-core",
 ]
 
 [[package]]
 name = "cubeb-backend"
-version = "0.10.2"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a45f283b4f89b803ac3ec81200c5631b7965b9f6a0fd212c2046ac0ef1a2aad9"
+checksum = "0ce2d65b509a33ff97b83439dd1df5f50b8253cb14aa5c55794df37a28846724"
 dependencies = [
  "cubeb-core",
 ]
 
 [[package]]
 name = "cubeb-core"
-version = "0.10.2"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a15a431deb277cfeea747c4e0785a6c1094a572c421eba893a07aa65942122d"
+checksum = "48c0ac573dc2e393c12e4b829d6e17bbb7a1f95b288043ee47ef251097ddb094"
 dependencies = [
  "bitflags",
  "cubeb-sys",
@@ -1175,9 +1175,9 @@ dependencies = [
 
 [[package]]
 name = "cubeb-sys"
-version = "0.10.2"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f811de8781e63bd5060f5dbef421fea188737c5856e3fa3aa38cd39f4ecab3a2"
+checksum = "33b49428acff552b1ba790649ea16a6f3d60cf74e9457a1378771a1acc12d5ee"
 dependencies = [
  "cmake",
  "pkg-config",
diff --git a/supply-chain/audits.toml b/supply-chain/audits.toml
index 822183a027ca..cac9cdbc2bfd 100644
--- a/supply-chain/audits.toml
+++ b/supply-chain/audits.toml
@@ -244,11 +244,6 @@ notes = """
 Mozilla-developed package.
 """
 
-[[audits.cubeb]]
-who = "Matthew Gregan <kinetik@flim.org>"
-criteria = "safe-to-deploy"
-delta = "0.10.1 -> 0.10.2"
-
 [[audits.cubeb-backend]]
 who = "Matthew Gregan <kinetik@flim.org>"
 criteria = "safe-to-deploy"
@@ -257,11 +252,6 @@ notes = """
 Mozilla-developed package.
 """
 
-[[audits.cubeb-backend]]
-who = "Matthew Gregan <kinetik@flim.org>"
-criteria = "safe-to-deploy"
-delta = "0.10.1 -> 0.10.2"
-
 [[audits.cubeb-core]]
 who = "Matthew Gregan <kinetik@flim.org>"
 criteria = "safe-to-deploy"
@@ -270,11 +260,6 @@ notes = """
 Mozilla-developed package.
 """
 
-[[audits.cubeb-core]]
-who = "Matthew Gregan <kinetik@flim.org>"
-criteria = "safe-to-deploy"
-delta = "0.10.1 -> 0.10.2"
-
 [[audits.cubeb-sys]]
 who = "Matthew Gregan <kinetik@flim.org>"
 criteria = "safe-to-deploy"
@@ -283,11 +268,6 @@ notes = """
 Mozilla-developed package.
 """
 
-[[audits.cubeb-sys]]
-who = "Matthew Gregan <kinetik@flim.org>"
-criteria = "safe-to-deploy"
-delta = "0.10.1 -> 0.10.2"
-
 [[audits.d3d12]]
 who = "Jim Blandy <jimb@red-bean.com>"
 criteria = "safe-to-deploy"
diff --git a/third_party/rust/cubeb-backend/.cargo-checksum.json b/third_party/rust/cubeb-backend/.cargo-checksum.json
index 38eae7d57fc4..6e5778b6d381 100644
--- a/third_party/rust/cubeb-backend/.cargo-checksum.json
+++ b/third_party/rust/cubeb-backend/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"52d0d552ea4b5e2d77b2d9decdc6205dd4260de785911de04b2175fa023810bd","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","src/capi.rs":"edf8a65022d393d0214897986ca49428438b0b32f84e1380c962ecc835290e54","src/lib.rs":"4ce6db20f88487e99057ebeae0615fa1c99e82cfee0ab0825936da2e108fc73e","src/log.rs":"d32084dd0790001a1083b9909f07aa9d869d421155e12f5f0e6700a9c12f11cf","src/ops.rs":"981866ad12bf07e2f2b887ef9b5810364d2c48101d513879a06a8bf76984dc50","src/traits.rs":"ac35b2124876865b427f0e91026bb1102aadc96f1b763a639c495640cbd92650","tests/test_capi.rs":"27093e582f540c5baf50af5d1e5008c46573792853927b9ecfe62c117bfac303"},"package":"a45f283b4f89b803ac3ec81200c5631b7965b9f6a0fd212c2046ac0ef1a2aad9"}
\ No newline at end of file
+{"files":{"Cargo.toml":"e00c08778e781f852e5f23481fe692311fee9ff332e366900064e08077eb8cf1","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","src/capi.rs":"edf8a65022d393d0214897986ca49428438b0b32f84e1380c962ecc835290e54","src/lib.rs":"4ce6db20f88487e99057ebeae0615fa1c99e82cfee0ab0825936da2e108fc73e","src/log.rs":"56e4cca1fc1e2bbfb61c61f849f577b2175899139686b1e092e00dba7f6d5273","src/ops.rs":"981866ad12bf07e2f2b887ef9b5810364d2c48101d513879a06a8bf76984dc50","src/traits.rs":"ac35b2124876865b427f0e91026bb1102aadc96f1b763a639c495640cbd92650","tests/test_capi.rs":"27093e582f540c5baf50af5d1e5008c46573792853927b9ecfe62c117bfac303"},"package":"0ce2d65b509a33ff97b83439dd1df5f50b8253cb14aa5c55794df37a28846724"}
\ No newline at end of file
diff --git a/third_party/rust/cubeb-backend/Cargo.toml b/third_party/rust/cubeb-backend/Cargo.toml
index 937e9e183f41..1053e566a0d1 100644
--- a/third_party/rust/cubeb-backend/Cargo.toml
+++ b/third_party/rust/cubeb-backend/Cargo.toml
@@ -11,7 +11,7 @@
 
 [package]
 name = "cubeb-backend"
-version = "0.10.2"
+version = "0.10.1"
 authors = ["Dan Glastonbury <dglastonbury@mozilla.com>"]
 description = """
 Bindings to libcubeb internals to facilitate implementing cubeb backends in rust.
@@ -23,7 +23,7 @@ license = "ISC"
 repository = "https://github.com/mozilla/cubeb-rs"
 
 [dependencies.cubeb-core]
-version = "0.10.2"
+version = "0.10.1"
 
 [features]
 gecko-in-tree = ["cubeb-core/gecko-in-tree"]
diff --git a/third_party/rust/cubeb-backend/src/log.rs b/third_party/rust/cubeb-backend/src/log.rs
index 16580e547944..33988d6b4725 100644
--- a/third_party/rust/cubeb-backend/src/log.rs
+++ b/third_party/rust/cubeb-backend/src/log.rs
@@ -3,100 +3,59 @@
 // This program is made available under an ISC-style license.  See the
 // accompanying file LICENSE for details.
 
-/// Maximum length in bytes for a log message.
-/// Longer messages are silently truncated.  See `write_str`.
-const LOG_LIMIT: usize = 1024;
-
-struct StaticCString<const N: usize> {
-    buf: [std::mem::MaybeUninit<u8>; N],
-    len: usize,
-}
-
-impl<const N: usize> StaticCString<N> {
-    fn new() -> Self {
-        StaticCString {
-            buf: unsafe { std::mem::MaybeUninit::uninit().assume_init() },
-            len: 0,
-        }
-    }
-
-    fn as_cstr(&self) -> &std::ffi::CStr {
-        unsafe {
-            std::ffi::CStr::from_bytes_with_nul_unchecked(std::slice::from_raw_parts(
-                self.buf.as_ptr().cast::<u8>(),
-                self.len,
-            ))
-        }
-    }
-}
-
-impl<const N: usize> std::fmt::Write for StaticCString<N> {
-    fn write_str(&mut self, s: &str) -> std::fmt::Result {
-        use std::convert::TryInto;
-        let s = s.as_bytes();
-        let end = s.len().min(N.checked_sub(1).unwrap() - self.len);
-        debug_assert_eq!(s.len(), end, "message truncated");
-        unsafe {
-            std::ptr::copy_nonoverlapping(
-                s[..end].as_ptr(),
-                self.buf
-                    .as_mut_ptr()
-                    .cast::<u8>()
-                    .offset(self.len.try_into().unwrap()),
-                end,
-            )
-        };
-        self.len += end;
-        self.buf[self.len].write(0);
-        Ok(())
-    }
-}
-
-/// Formats `$file:line: $msg\n` into an on-stack buffer of size `LOG_LIMIT`,
-/// then calls `log_callback` with a pointer to the formatted message.
-pub fn cubeb_log_internal_buf_fmt(
-    log_callback: unsafe extern "C" fn(*const i8, ...),
+/// Annotates input buffer string with logging information.
+/// Returns result as a ffi::CStr for use with native cubeb logging functions.
+pub fn cubeb_log_internal_buf_fmt<'a>(
+    buf: &'a mut [u8; 1024],
     file: &str,
     line: u32,
-    msg: std::fmt::Arguments,
-) {
+    msg: &str,
+) -> &'a std::ffi::CStr {
+    use std::io::Write;
     let filename = std::path::Path::new(file)
         .file_name()
         .unwrap()
         .to_str()
         .unwrap();
-    let mut buf = StaticCString::<LOG_LIMIT>::new();
-    let _ = std::fmt::write(&mut buf, format_args!("{}:{}: {}\n", filename, line, msg));
-    unsafe {
-        log_callback(buf.as_cstr().as_ptr());
-    };
+    // 2 for ':', 1 for ' ', 1 for '\n', and 1 for converting `line!()` to number of digits
+    let len = filename.len() + ((line as f32).log10().trunc() as usize) + msg.len() + 5;
+    debug_assert!(len < buf.len(), "log will be truncated");
+    let _ = writeln!(&mut buf[..], "{}:{}: {}", filename, line, msg);
+    let last = std::cmp::min(len, buf.len() - 1);
+    buf[last] = 0;
+    let cstr = unsafe { std::ffi::CStr::from_bytes_with_nul_unchecked(&buf[..=last]) };
+    cstr
 }
 
 #[macro_export]
 macro_rules! cubeb_log_internal {
     ($log_callback: expr, $level: expr, $fmt: expr, $($arg: expr),+) => {
+        cubeb_log_internal!($log_callback, $level, format!($fmt, $($arg),*));
+    };
+    ($log_callback: expr, $level: expr, $msg: expr) => {
         #[allow(unused_unsafe)]
         unsafe {
-            if $level <= $crate::ffi::cubeb_log_get_level().into() {
+            if $level <= $crate::ffi::g_cubeb_log_level.into() {
                 if let Some(log_callback) = $log_callback {
-                    $crate::log::cubeb_log_internal_buf_fmt(log_callback, file!(), line!(), format_args!($fmt, $($arg),+));
+                    let mut buf = [0u8; 1024];
+                    log_callback(
+                        $crate::log::cubeb_log_internal_buf_fmt(&mut buf, file!(), line!(), &$msg)
+                            .as_ptr(),
+                    );
                 }
             }
         }
     };
-    ($log_callback: expr, $level: expr, $msg: expr) => {
-        cubeb_log_internal!($log_callback, $level, "{}", $msg);
-    };
 }
 
 #[macro_export]
 macro_rules! cubeb_log {
-    ($($arg: expr),+) => (cubeb_log_internal!($crate::ffi::cubeb_log_get_callback(), $crate::LogLevel::Normal, $($arg),+));
+    ($($arg: expr),+) => (cubeb_log_internal!($crate::ffi::g_cubeb_log_callback, $crate::LogLevel::Normal, $($arg),+));
 }
 
 #[macro_export]
 macro_rules! cubeb_logv {
-    ($($arg: expr),+) => (cubeb_log_internal!($crate::ffi::cubeb_log_get_callback(), $crate::LogLevel::Verbose, $($arg),+));
+    ($($arg: expr),+) => (cubeb_log_internal!($crate::ffi::g_cubeb_log_callback, $crate::LogLevel::Verbose, $($arg),+));
 }
 
 #[macro_export]
diff --git a/third_party/rust/cubeb-core/.cargo-checksum.json b/third_party/rust/cubeb-core/.cargo-checksum.json
index 92c4ab85f0c3..1fb37939c5f3 100644
--- a/third_party/rust/cubeb-core/.cargo-checksum.json
+++ b/third_party/rust/cubeb-core/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"1a5f30e2c9291dd28c5fa2bd14544198e83dcfa743872f09262666659c45fd13","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","src/builders.rs":"87adbbdd63fde848eeaae4a79a04859ed02ca982fb644f6b8b5fe7c158a8944c","src/call.rs":"cf8949c2cf53f5418d8e5222f570b9301a98a476a18c734fc2ebbc8b53ac0165","src/channel.rs":"676d0cfa733c09ef039ed16138cb78ae6bd10b58d0eb93292e6d8accc69086ff","src/context.rs":"9d7fd770511910e8c416ff47354863f547915ff94fb19ef2dd6796a70c2658cd","src/device.rs":"5fa27f2ba7f108e4ae32ad776b1639b0e8c8ad4c401ce171c512c8126ea5a517","src/device_collection.rs":"f86535ffeee73b889bdbac1c5a3432b01cca86df819a7cc26eaa0c983d30cbbe","src/error.rs":"3693bf575e9504b9b1ab114de3e2ce7132039acf27ec68967dae66c2ce1581aa","src/ffi_types.rs":"71948d0949675df876e18c4340f4e693fc6a14c4de9d63a3885450c95577596b","src/format.rs":"7162c1550be53f5fe94b0bba4c71fea2f0304462108657c62a20ea47207ca413","src/lib.rs":"57ecf793ab1cc052c021ccbf9ad011ea52d1303e2dbc54adea90a95b5d7a36cf","src/log.rs":"4bef74d7a7fd9ffdf249be5ef95781969f00a7ecff2d3a190d5b1536d1635a73","src/stream.rs":"d34a66ee11fc3818a9685923c7211b96544cd2bb6b72f5fa4b2727c57d84d929","src/util.rs":"308cfbaacd615ff600e74415c52daeef007fff34a4a0648a73c0042f6067f84f"},"package":"7a15a431deb277cfeea747c4e0785a6c1094a572c421eba893a07aa65942122d"}
\ No newline at end of file
+{"files":{"Cargo.toml":"7b4569f6fffc88f8176064967e26b353db5738c0918dcd0940da47ec1a2fe4a2","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","src/builders.rs":"87adbbdd63fde848eeaae4a79a04859ed02ca982fb644f6b8b5fe7c158a8944c","src/call.rs":"cf8949c2cf53f5418d8e5222f570b9301a98a476a18c734fc2ebbc8b53ac0165","src/channel.rs":"676d0cfa733c09ef039ed16138cb78ae6bd10b58d0eb93292e6d8accc69086ff","src/context.rs":"9d7fd770511910e8c416ff47354863f547915ff94fb19ef2dd6796a70c2658cd","src/device.rs":"5fa27f2ba7f108e4ae32ad776b1639b0e8c8ad4c401ce171c512c8126ea5a517","src/device_collection.rs":"f86535ffeee73b889bdbac1c5a3432b01cca86df819a7cc26eaa0c983d30cbbe","src/error.rs":"3693bf575e9504b9b1ab114de3e2ce7132039acf27ec68967dae66c2ce1581aa","src/ffi_types.rs":"71948d0949675df876e18c4340f4e693fc6a14c4de9d63a3885450c95577596b","src/format.rs":"7162c1550be53f5fe94b0bba4c71fea2f0304462108657c62a20ea47207ca413","src/lib.rs":"57ecf793ab1cc052c021ccbf9ad011ea52d1303e2dbc54adea90a95b5d7a36cf","src/log.rs":"c46bae3472043fd076df3229c3421d948a87fae8495c1524b41ab2d8608f612a","src/stream.rs":"d34a66ee11fc3818a9685923c7211b96544cd2bb6b72f5fa4b2727c57d84d929","src/util.rs":"308cfbaacd615ff600e74415c52daeef007fff34a4a0648a73c0042f6067f84f"},"package":"48c0ac573dc2e393c12e4b829d6e17bbb7a1f95b288043ee47ef251097ddb094"}
\ No newline at end of file
diff --git a/third_party/rust/cubeb-core/Cargo.toml b/third_party/rust/cubeb-core/Cargo.toml
index 45c28f315f1f..316ee581a6e3 100644
--- a/third_party/rust/cubeb-core/Cargo.toml
+++ b/third_party/rust/cubeb-core/Cargo.toml
@@ -11,7 +11,7 @@
 
 [package]
 name = "cubeb-core"
-version = "0.10.2"
+version = "0.10.1"
 authors = ["Dan Glastonbury <dglastonbury@mozilla.com>"]
 description = """
 Common types and definitions for cubeb rust and C bindings. Not intended for direct use.
@@ -26,7 +26,7 @@ repository = "https://github.com/mozilla/cubeb-rs"
 version = "1.2.0"
 
 [dependencies.cubeb-sys]
-version = "0.10.2"
+version = "0.10.1"
 
 [features]
 gecko-in-tree = ["cubeb-sys/gecko-in-tree"]
diff --git a/third_party/rust/cubeb-core/src/log.rs b/third_party/rust/cubeb-core/src/log.rs
index 6bf6ba914d93..41614c3b03ac 100644
--- a/third_party/rust/cubeb-core/src/log.rs
+++ b/third_party/rust/cubeb-core/src/log.rs
@@ -28,7 +28,7 @@ impl From<ffi::cubeb_log_level> for LogLevel {
 }
 
 pub fn log_enabled() -> bool {
-    unsafe { ffi::cubeb_log_get_level() != LogLevel::Disabled as _ }
+    unsafe { ffi::g_cubeb_log_level != LogLevel::Disabled as _ }
 }
 
 #[cfg(test)]
diff --git a/third_party/rust/cubeb-sys/.cargo-checksum.json b/third_party/rust/cubeb-sys/.cargo-checksum.json
index 79005125caab..6e65b5657750 100644
--- a/third_party/rust/cubeb-sys/.cargo-checksum.json
+++ b/third_party/rust/cubeb-sys/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"4b3ad2bbc71ebc46cd6e29bad54877dcffa9145bf9dcb0b52c9e2d8275b63fd7","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","build.rs":"4572cbb7b2bb0ac41330dc1535dbc6685d38ea4f485029ee932639e2feb94d7b","libcubeb/AUTHORS":"829e45d138c7c8827799f302806fa4be8cd8bd4bad70a2fe26c3a27a5cf36948","libcubeb/CMakeLists.txt":"c3f0fc76ecf1854fbed5808d9cfb7db8bade9ff659441124edef09eb2c61b0a7","libcubeb/Config.cmake.in":"a156fb5cd30208aedcb9ef025d94187df82142fd4442e3a7d0e2a688668a3da9","libcubeb/INSTALL.md":"1fa77e15423e6f583c30861528cd2732d52a028982020cd3a7a9da4a452d7311","libcubeb/LICENSE":"44c6b5ae5ec3fe2fbc608b00e6f4896f4d2d5c7e525fcbaa3eaa3cf2f3d5a983","libcubeb/README.md":"9b01cda3464a448373176c07368d1ce4a2b4f87ec9f8f02cbac0b4a40719c141","libcubeb/cmake/compile_tests/oss_is_v4.c":"482bcd4c569e8a26f4ab0fe3a3bed25e9d4b296bf678896a2cc1dc8abbad492d","libcubeb/cmake/sanitizers-cmake/CMakeLists.txt":"89b282c19b3897ff666f7847d5e679ae928ca7e76ffd0d23f7c58c9464048b61","libcubeb/cmake/sanitizers-cmake/LICENSE":"4b67e7ae8c91e68e1a929eb1cbaa4c773c6d19aa91aaa12c390cf9560d1c9799","libcubeb/cmake/sanitizers-cmake/README.md":"f3b85a594e1601ae65bb09393c56fbc8a98e3f3f49234e56f86bd78803c3544e","libcubeb/cmake/sanitizers-cmake/cmake/FindASan.cmake":"bd30b1c3cb0682b8a2b0b599f6c51fbf99ef4908b00eba8826f0d484c623b01b","libcubeb/cmake/sanitizers-cmake/cmake/FindMSan.cmake":"55e40f0994b47f8e779622af2007c69252d9456be99f4aa4fba7dd49c23d5580","libcubeb/cmake/sanitizers-cmake/cmake/FindSanitizers.cmake":"2ffd9717a49e3e9de848ec0d91097bdbab3f75a7866211d902f9659f59271ffc","libcubeb/cmake/sanitizers-cmake/cmake/FindTSan.cmake":"ceace234abd5a463ad1b8134ad06c4c8004895b2e8fc9edb67e64620ea97ca47","libcubeb/cmake/sanitizers-cmake/cmake/FindUBSan.cmake":"4720ec96ea42a2a9c07d887c1fc5562ed3e8c222f5778a18b78c46678b23f156","libcubeb/cmake/sanitizers-cmake/cmake/asan-wrapper":"4e543936e6374e24b80a0f92135c07c2e2101c0d110e51bddaf0e70ae8ec391e","libcubeb/cmake/sanitizers-cmake/cmake/sanitize-helpers.cmake":"c0c225f22bebd27eb68b807b2a61962d28afc61609735fe652c2fde6aa6a005b","libcubeb/cmake/sanitizers-cmake/tests/CMakeLists.txt":"64b7aea469a043f27414e3d652aaa89a03a11843d152c4cd42f30561e6ef51bc","libcubeb/cmake/sanitizers-cmake/tests/asan_test.cpp":"a25de95282aaee22d977d0b474468b946c1422b80b15424c04266dba038eba2e","libcubeb/cmake/sanitizers-cmake/tests/shortest.ext.test.cpp":"a25de95282aaee22d977d0b474468b946c1422b80b15424c04266dba038eba2e","libcubeb/cmake/toolchain-cross-mingw.cmake":"1c26749465364061ddf37aaa00f363eaf057c4b6a70181086e13b0a4d09bd376","libcubeb/cubeb.supp":"19f33e59f8dc91a327c923e44c2c3f9af0a043ce1d6a8cac275ba094b4bfe0da","libcubeb/docs/Doxyfile.in":"e721a50ccf3a010b9b5169b97f93a24f66bd4b88cade17b5b5088de19fa89716","libcubeb/googletest/CHANGES":"72c8a289bfe4dd9160074a3a2238c8067a5bc7ca49fd87f70a134c3f373932a4","libcubeb/googletest/CMakeLists.txt":"cdf938ce79ea066866dc614de3925bfaa48d9e19e04049db2ec8c5443abaaa9b","libcubeb/googletest/CONTRIBUTORS":"4d911cd5e6d71f3f4bbcb2788b2f916df4b0ce1e088752a159457a1d936ae0ce","libcubeb/googletest/COPYING":"9702de7e4117a8e2b20dafab11ffda58c198aede066406496bef670d40a22138","libcubeb/googletest/Makefile.am":"a795e5a18e82ba06fd97509d92d773b7fafd0dd7086db8a1211fbd151b503bac","libcubeb/googletest/README":"484b19654362942fac9734c8fab0ed3d99249b81c69027bdb7de46054abada6b","libcubeb/googletest/cmake/internal_utils.cmake":"6f4670a5825cf8ae0415be9dd43d82a7f30316d75cab20a4c60afb6d9db2a01d","libcubeb/googletest/codegear/gtest.cbproj":"9fa07a66b8c01773256e508187775407c465ed9055651e93d390426d1888721a","libcubeb/googletest/codegear/gtest.groupproj":"76c001cb2ee0070e26d1570fb6db5250f2585179c707496c5ef6d12e582cf205","libcubeb/googletest/codegear/gtest_all.cc":"c8750dc2b7b3612edb60e8d23fc2f60ae264451916c4b15f81cbf60ea30eb75d","libcubeb/googletest/codegear/gtest_link.cc":"e5e47c086f932471e0ca748a62b3b1597e5e731f4d34fb8cb8b2ca2db7ba3ed0","libcubeb/googletest/codegear/gtest_main.cbproj":"056448ba7f41fae3f704b1001922d9f6e419cf8cbcf3a55bf0ecc59ece1fa9a1","libcubeb/googletest/codegear/gtest_unittest.cbproj":"2c48be90b0dbc3224a8bd6c4dc21f78dd1b08c81685e6bd4952bb6df6ee38701","libcubeb/googletest/configure.ac":"fadebffdaeaccebb60fbe4a501c1138c296e01348a5da45fabf5e4233248baa8","libcubeb/googletest/include/gtest/gtest-death-test.h":"fdd087f700cd04a3ce4bdd36f35769de52a44bfc0c5bae2dc9681d4cbcd3c44a","libcubeb/googletest/include/gtest/gtest-message.h":"eaf44df1284d94333507c47091c84eaaf43814e6a02a1b1c0061ca7b363e74d6","libcubeb/googletest/include/gtest/gtest-param-test.h":"f226f0a24c04cddbceaaa45d8a5e575ce18c3392349f9b8ba73317e37e62368d","libcubeb/googletest/include/gtest/gtest-param-test.h.pump":"17c65fd5cc5218279044a61f3873c9c952b0924a7ba5147d4999d400b122207f","libcubeb/googletest/include/gtest/gtest-printers.h":"7046f611398d63ee0f1c37bdb4fd08d9931979b2fedf13b781e6d85d4b3b5d60","libcubeb/googletest/include/gtest/gtest-spi.h":"560407dd45e8e57fa6927504c9e4a4cfdecf30f8cada975c1ffddce765e6a88a","libcubeb/googletest/include/gtest/gtest-test-part.h":"c4d6d840284728740c284646075e8ffc85b63b9f74f3ed488b18ef3c2c2b9005","libcubeb/googletest/include/gtest/gtest-typed-test.h":"1ec858bbb9ed8a8bb553232df016437c080b2670f00453b4de297c286eb78c21","libcubeb/googletest/include/gtest/gtest.h":"47433ca72a43bda7a380c34fe6d4ff451797c687e9bbd74d1f366bcdfa0cb013","libcubeb/googletest/include/gtest/gtest_pred_impl.h":"f03a3f77e3c231889c0ace6f63b2c4e410e4a9330287ea09443b23b9a3cf9092","libcubeb/googletest/include/gtest/gtest_prod.h":"4a99a3d986a45b4d6d9b3af54809f015c54aa98274793a4ae173f5010d0ad33c","libcubeb/googletest/include/gtest/internal/gtest-death-test-internal.h":"0b3abead866363f3e6b4201acc8d2763072e033826b22ae5ebffd790e1415235","libcubeb/googletest/include/gtest/internal/gtest-filepath.h":"638d2bb6c06a894513b03311a8e931ac835fc00afc4bd21fab3afc05732c23a0","libcubeb/googletest/include/gtest/internal/gtest-internal.h":"12c2c83df0a9dc5b46697ccd8271dfa34ee5f3d1972dcb56585bc1459d9583c9","libcubeb/googletest/include/gtest/internal/gtest-linked_ptr.h":"9bd319548dd073630dfd349c06a440c6a582feec47d4ff14f348ec32f8b4c1f3","libcubeb/googletest/include/gtest/internal/gtest-param-util-generated.h":"10db93fa7e98820192bae6f560664469dd33b265036fca64253c89b6801f96cb","libcubeb/googletest/include/gtest/internal/gtest-param-util-generated.h.pump":"abb72365d94d2811b34c195dc520fbf41c7dcb42aae5a1cfa0502cf619b21e70","libcubeb/googletest/include/gtest/internal/gtest-param-util.h":"7f9311f033ef6916217d87cef53b1db6c4e8733be930e4b48fe7e11d21b33da0","libcubeb/googletest/include/gtest/internal/gtest-port.h":"612932c2930a7cf2c3514d89a8d6b51a2c0030d251309b71765ed1c9954e20c5","libcubeb/googletest/include/gtest/internal/gtest-string.h":"a46aa36165c400d1e926f942be03fe04cd7ccb1e59f7a2a03b919c4eea05b997","libcubeb/googletest/include/gtest/internal/gtest-tuple.h":"43e7e3c92f8e4258cf3927a9204b214d4d03e6c796f88f3ad4e66b1ac20aa938","libcubeb/googletest/include/gtest/internal/gtest-tuple.h.pump":"16fa027ed3c5940699e0ac906815e66620993bcf75b0acaf826d4f09348d4b83","libcubeb/googletest/include/gtest/internal/gtest-type-util.h":"6d177af46a9b1e14b969972a8b886667f95e69037aba411433a44fb9b92e7037","libcubeb/googletest/include/gtest/internal/gtest-type-util.h.pump":"22092f44127af91651f57ce222e20914d5d32ae02f1c0964f6d5d7bc019af339","libcubeb/googletest/m4/acx_pthread.m4":"3326e3746b6b351d1671fe31f798269cda8de92c365b8a8305404ec0fa6c6b32","libcubeb/googletest/m4/gtest.m4":"d3c37ebd1aa792c967d4357755cc670bc6deb30091d9e6db498871d90a30ea4c","libcubeb/googletest/make/Makefile":"9b86e2a112dd55c6bf6a2b39e6f4078faf60cfecb8282ebf9b025167ed233420","libcubeb/googletest/msvc/gtest-md.sln":"0beab679b42cf0c431eaf4fe143bbf3b01fc064e20c74d9e33e7e437a70487d4","libcubeb/googletest/msvc/gtest-md.vcproj":"52e873e964daf9d5409b4e9bb471ddf2827be04985cd96c40620f9275d17a256","libcubeb/googletest/msvc/gtest.sln":"be21c2340650ec2259a2fbaeb8608ae6d3e982a0626a0f91128a771dc88e6bea","libcubeb/googletest/msvc/gtest.vcproj":"0064616c7d88a284c1b7c05baab038f239134ea9c6c563628f286f9600b3f921","libcubeb/googletest/msvc/gtest_main-md.vcproj":"f83a294a92b616bf34ccae6743ff916297bdba61d6125a9637a813d467a30372","libcubeb/googletest/msvc/gtest_main.vcproj":"9f03270a00896eab0c7015c6fb1a73818d024e462d3944ba1d3ceb313a051649","libcubeb/googletest/msvc/gtest_prod_test-md.vcproj":"7caa108733e2d5f140da004d2133e04a9a105811909c0e2d4ec06e2971983592","libcubeb/googletest/msvc/gtest_prod_test.vcproj":"cf5bfb7f3de9a59a0eba5535067845d12c33c3fd8fecc3d03aa702665db29578","libcubeb/googletest/msvc/gtest_unittest-md.vcproj":"e7949b21cf0418f2a7afe8aa94616e2c40e3ba0801c2f0826f3a3a3d2e6f48b0","libcubeb/googletest/msvc/gtest_unittest.vcproj":"5b097d596fbbc1c4090fd518008a0961b29661194e1c02d8a2d3daaa557e626f","libcubeb/googletest/samples/prime_tables.h":"2903df1d1e6643a5f624fe3ea3f931c3410eb1858ac347c5df278273c6c91ca4","libcubeb/googletest/samples/sample1.cc":"dc106c5940d87bb4bbef3d77815eab642ee173a3340b2b9c532b5c711c4c2d0e","libcubeb/googletest/samples/sample1.h":"7a7bf9a0fbd2401e8b2cb554bfcb9bd0ed228212f3b970675c1b1d38d4e188bb","libcubeb/googletest/samples/sample10_unittest.cc":"ccebb6393a5a8468399f7e511219b667a2233f82312ce59834a4bb0997d8700e","libcubeb/googletest/samples/sample1_unittest.cc":"904be0d4a095e74393515195392bd10e1e916bb2ca61f3f94b1bd6aebea29cb6","libcubeb/googletest/samples/sample2.cc":"f14b8a1e69d52eef1a70053fb256818c7eca64e8eda08de43cf46e896e57fcc2","libcubeb/googletest/samples/sample2.h":"df956ba520dafca068dbc1e28f36567db3cba36293e06762318af8cda6a12bd4","libcubeb/googletest/samples/sample2_unittest.cc":"abe7e0b253d328cb82ae67623fbe3c89eb94699102510c64a0b568eaca101e05","libcubeb/googletest/samples/sample3-inl.h":"3fe482bbd4f725f5820f5d6beab4d0d4a524be8addf4b344a9a470ec5aabc451","libcubeb/googletest/samples/sample3_unittest.cc":"252c06b4531dc35213ebdd7311700b9b4057bc1bdeeba0cd767b2bc86c456639","libcubeb/googletest/samples/sample4.cc":"b4260f5fa35d78ac114a9abb59fce12403faf0273df41f57e83c341ae7979222","libcubeb/googletest/samples/sample4.h":"604905cae7e5587805c3b884a36eda7a2bebdfedb53b24b0fd9a220eec0ef1a9","libcubeb/googletest/samples/sample4_unittest.cc":"6cfb4821d8cb1c77fbb5af4f8aec569948762d8ea314827e3ead967b5b6a223e","libcubeb/googletest/samples/sample5_unittest.cc":"73646d9038873a68bb2e56b12495d7f7b65b5c23901109701da446af454ba2ec","libcubeb/googletest/samples/sample6_unittest.cc":"833fee399954f908cf0f3b789832e505329787f4cf73607a7b31ca0f62f368d7","libcubeb/googletest/samples/sample7_unittest.cc":"8013ee68d61c181e4e936cdae3a9a635646274f8512033ef11bff7214e03e4a6","libcubeb/googletest/samples/sample8_unittest.cc":"7b7510fadf4955d2f934d23d652dbd35add832e50bdfcc98421fb9be4588d808","libcubeb/googletest/samples/sample9_unittest.cc":"8b827040dea37b460cbcaea0b255b98974a9840f6ef7bd82aaa7d4ad2c724335","libcubeb/googletest/scripts/fuse_gtest_files.py":"adecf64c6bab65b31740c321e568cf174f753d5617745aa5762d842339d68b53","libcubeb/googletest/scripts/gen_gtest_pred_impl.py":"78fb7e20a014c251d723186eb58040e4eb32405b73c9288d787ea0a0e4ff5183","libcubeb/googletest/scripts/gtest-config.in":"9a43978eeee88e188845d737c17f4d024d4e74feae09da7997e8fbe4ea6cc176","libcubeb/googletest/scripts/pump.py":"3856a3d7be37f78e0f214ee7d4f29d05f1ca14218b67539d67c9a16e992f670c","libcubeb/googletest/scripts/test/Makefile":"3576b257594a2d8e843b9e4de8c83353d837833bb86431fb1b4198022b1bcddc","libcubeb/googletest/scripts/upload.py":"f75d0712e3b13bebd8daa0a15e4eb32c9e3034a933f4fcccf65b1e999a7ae066","libcubeb/googletest/scripts/upload_gtest.py":"6e76fc0a7a3831c01cfffd18c220d44438073a66338d91ca61fc84b924021e61","libcubeb/googletest/src/gtest-all.cc":"568ac119f5e6418f1fbcfbdf185d724657d7f3539b47822da229ac5d015626b2","libcubeb/googletest/src/gtest-death-test.cc":"eec1b3c8252670c76acbbaf63483946897ce625139b53a566406b6313f023896","libcubeb/googletest/src/gtest-filepath.cc":"31b7fcda5d11346f8a487597c6a70ff057f1192e0cb11f27eb7841a9f3aa8b86","libcubeb/googletest/src/gtest-internal-inl.h":"c9d428a6b5990ace091e40c4ce8b7bf6c50c186a8314b1c4a4cdc988ca0ac1a4","libcubeb/googletest/src/gtest-port.cc":"95bcf473622d1b901c734e5c2aeb8efb058555ec924212a61bb04f049bb5a069","libcubeb/googletest/src/gtest-printers.cc":"6f191a7fc7f5a0a967fd11964057f2e2d2eaf2f37ccece16bd816531f52b3154","libcubeb/googletest/src/gtest-test-part.cc":"e489868b4cdc66f4fc33bc2326ac86bc1acc5808ab58bbb288c9dcfc330faddc","libcubeb/googletest/src/gtest-typed-test.cc":"ca9e819df728c25a6a1fc072806c22f3494e1dffe4bd0d48284f38dbdd3a0dd5","libcubeb/googletest/src/gtest.cc":"5cf9a3e897892c9f0e5c887f91d3c8c8c5665bd7348560441fc0b946c254873c","libcubeb/googletest/src/gtest_main.cc":"22fa1f77542b882d1798d7f696045c5895942a626e26200a175fa4382e1fa5b5","libcubeb/googletest/test/gtest-death-test_ex_test.cc":"613ccf50a3ff8f84c975a13e86ea01ea4e36933072388a3738b4acf9ed3ed7cf","libcubeb/googletest/test/gtest-death-test_test.cc":"df8384a847bdf889233c3d45d171f784991def7a9b6a08442138569fbae32b9d","libcubeb/googletest/test/gtest-filepath_test.cc":"49760f91723845b113bb60bb9b1a1426ed1da1f4ebfef2462128980ea5692cc9","libcubeb/googletest/test/gtest-linked_ptr_test.cc":"1b9cb4ff67475900db9de34ae9749b94193048a1f7a741091ba5a2dd7fc7a79b","libcubeb/googletest/test/gtest-listener_test.cc":"acf78f2c9a730525ea5adc93e9196a42de8fbfe488db1dfd02656bdbd477b2c0","libcubeb/googletest/test/gtest-message_test.cc":"b1fc68f8b75ce25fbd79b3f7d3c9c793381ef07b3203e1a2d9b610cb597542be","libcubeb/googletest/test/gtest-options_test.cc":"74e3ae0c310edb3139b0032266219d3ce7f386ded6feafa57fef03f4493ed7fa","libcubeb/googletest/test/gtest-param-test2_test.cc":"a0f1efbcab3f7e49df639383157626931f64756f7e738be081760f93f7308332","libcubeb/googletest/test/gtest-param-test_test.cc":"ef8bd344e959053f562b0c9e0d15e2fb6c1e534772a67aaf3f90bd6bad0bf99f","libcubeb/googletest/test/gtest-param-test_test.h":"9d7f47b79d54df7cc050aa6038b0464aa684dfca669a847bf70ea16e4a000628","libcubeb/googletest/test/gtest-port_test.cc":"1600f78ef0860a0f5b5525e5e5041ff32a216cc6ae948b1ea61fe04ec603f67d","libcubeb/googletest/test/gtest-printers_test.cc":"7898e4b4163ee0821fed248e1c75d9f4a0a511a2b4bbfad1ef2f4a11a099f6e7","libcubeb/googletest/test/gtest-test-part_test.cc":"62c8906bb0d12ea84d60217b3773cd8e1768db4aab934880db2316df7026cab8","libcubeb/googletest/test/gtest-tuple_test.cc":"2850dc1f73a3f8020d8a4d80688a28d9b736eae6d677222c3f871d8d33b25501","libcubeb/googletest/test/gtest-typed-test2_test.cc":"c52b65e7181610d6e577631cd50177399884913ff28d08aedfedc92f05185044","libcubeb/googletest/test/gtest-typed-test_test.cc":"c7daff5211028da79b3ca0473dca18ada9197f38e710f72d0493ad3332ce3ec9","libcubeb/googletest/test/gtest-typed-test_test.h":"3145698534d8869beb624c9c8ed114f75bead046b2eeb92ada5a724993ee7786","libcubeb/googletest/test/gtest-unittest-api_test.cc":"e3f54c28ef2849e8b12af666ed46aace50c3e047845072ee6f974ce4528bd297","libcubeb/googletest/test/gtest_all_test.cc":"db0c3c42b385570b1d517e3ee927671b8fad4e206247fca738ec477222ac3d97","libcubeb/googletest/test/gtest_break_on_failure_unittest.py":"11c91bc1c68cfdb913e2affb01261b55fb3b0c18773a45875e9c25cb330a4dcd","libcubeb/googletest/test/gtest_break_on_failure_unittest_.cc":"1da12e4bdda2a0bc7b59d4638fe34b2d3798134224fd9237eeebdd09c3326011","libcubeb/googletest/test/gtest_catch_exceptions_test.py":"305cef45c6dc034bdf72fd91aba1e89e1c6b5d222c3d6baffff5acdfd9b3873e","libcubeb/googletest/test/gtest_catch_exceptions_test_.cc":"b297a4f4d5bc0285ea9eb8869741631658305e49d4513bca904842aacb82128b","libcubeb/googletest/test/gtest_color_test.py":"c4cb006682a40f2d88759a4bcabf0d4be623720b135c71447f1788d17ea23d0f","libcubeb/googletest/test/gtest_color_test_.cc":"f263ba349afe58a558bf0fee98a98bb9207a648e7cd4f908a87799bd13d001ea","libcubeb/googletest/test/gtest_env_var_test.py":"79819598cd1e366eaa8f2a4fee2d638b6ef0686e490402fae792ccce58d876c0","libcubeb/googletest/test/gtest_env_var_test_.cc":"0eee5dfbb2a2598f4e76626346b921928ec1e052e38f254cc97c60d05611ab46","libcubeb/googletest/test/gtest_environment_test.cc":"a52a21ea29c2203b03fa93922733546d171f98d3b2fcd42972269e98fd124715","libcubeb/googletest/test/gtest_filter_unittest.py":"edc7d278803bba41626eacd050d91d7247f1c5999f9dceb99a8877e238bc73d6","libcubeb/googletest/test/gtest_filter_unittest_.cc":"996ac528ad75c293d8201ce28cf6acccee266286bd369b4cf43f05b8d67a4559","libcubeb/googletest/test/gtest_help_test.py":"b43ab690c08e4bffd84a47b361167496298697f9511bdf4a745bf305b5cfbdfc","libcubeb/googletest/test/gtest_help_test_.cc":"ff4b121098f0fe7cb4abf11fdd31f2fe7a477286ec9175482138bc038d61c807","libcubeb/googletest/test/gtest_list_tests_unittest.py":"7caebc175b44b3c727fc50420ada1a6a9500f3e4ce9e2839f69205437aa85e7a","libcubeb/googletest/test/gtest_list_tests_unittest_.cc":"d82d8b72914897232c2ff9fd091a7b0add68b7cf75f3f210d3a487ebeea84cfe","libcubeb/googletest/test/gtest_main_unittest.cc":"0f66f318809c88f0fbe034a340a75331720c4e33be5378022baffaf588ef1202","libcubeb/googletest/test/gtest_no_test_unittest.cc":"7cf487e07c3d27376c2cb8af33d02239b7966623875d37b7aa0259e927a9c2f6","libcubeb/googletest/test/gtest_output_test.py":"cf0dc1979572d94450a5e611b44f3fdb88d9cd980d669a723f0ed63057b5e2c4","libcubeb/googletest/test/gtest_output_test_.cc":"f69569374c2b3d06aa04a38ebc4f92ddc303e6af503f8b533cd8e6bf9f104899","libcubeb/googletest/test/gtest_output_test_golden_lin.txt":"4f3e49c10a524a99437cdcb5294e3335a7f3c07ea8462e65730f703a5fe4fec3","libcubeb/googletest/test/gtest_pred_impl_unittest.cc":"e406eccf75b6b58746a95d1c7ea7bc8e80ff974e438ef7c83074a46d4e62db9a","libcubeb/googletest/test/gtest_prod_test.cc":"b42ca1a6d0a1e43bc576b4ff7776c6d2c37234f6dc2a76f2735f261b4a47a526","libcubeb/googletest/test/gtest_repeat_test.cc":"e10abbb71595920aa3bb415029eed74106335fc9ea3d58c417ccfc7cba6a4cdb","libcubeb/googletest/test/gtest_shuffle_test.py":"12dd94eb5f30260ba37059fa74658bda57dffa821f3ba6a2a8b52ff14b1ad029","libcubeb/googletest/test/gtest_shuffle_test_.cc":"af1b2b01ae275f1a9fee7e7940c0f88f39ded063008994d585aad87e3ffadb39","libcubeb/googletest/test/gtest_sole_header_test.cc":"538414c27a593ab8dc34c37b5c877eb3a022d75d1b481ef14ceca00914929754","libcubeb/googletest/test/gtest_stress_test.cc":"0b02fc12f87944226915a999bdcc8a3eaafb34a1ea5bb0df128774abf8667f09","libcubeb/googletest/test/gtest_test_utils.py":"d4a76930aee6658ad8734981ca0c4ea14f34dbe8fdd31d5afe41f6d98f9779ee","libcubeb/googletest/test/gtest_throw_on_failure_ex_test.cc":"11ae790028da20bc7b7af1572eff3cfe8499be43ab64c110e18e1892612a183f","libcubeb/googletest/test/gtest_throw_on_failure_test.py":"ebe18ca0b07f90c53b9b3f9a54ed02df94facf8995cfa90dd41c6f5474537c13","libcubeb/googletest/test/gtest_throw_on_failure_test_.cc":"f8cbf75d8bf9e9ae068a17ff968434c3aec7b7f1137c994d8f14af1a84361aa9","libcubeb/googletest/test/gtest_uninitialized_test.py":"da8e6ce34930753e36fc1dfa2c3e20e48d02bda2a27d3d03a07364312c5f3bd9","libcubeb/googletest/test/gtest_uninitialized_test_.cc":"0b6a9d4983480f87352ca4da946089264b401f7a4a3b1282253fd6cc861bf483","libcubeb/googletest/test/gtest_unittest.cc":"c0c7d1f691ce1e10c3d1647ed5f7a66510725808ad58bb6da4bc03a7a08fb2fc","libcubeb/googletest/test/gtest_xml_outfile1_test_.cc":"29341d777a9c9d25f360d13ed966b30f0cbef1fc88aefe2f01bb88b82cf1ed93","libcubeb/googletest/test/gtest_xml_outfile2_test_.cc":"da7ab3cf0e9b2a293eceed7c5691233d6b61afb557e3c1176dfb75390f85be46","libcubeb/googletest/test/gtest_xml_outfiles_test.py":"b07927b43f44afbfd61761c2cc69f1b68c4fbdeddb992db03ff0c73052518cd4","libcubeb/googletest/test/gtest_xml_output_unittest.py":"b5ff0c0207238d01cada961b8f4656f2ec30a3e1e5bf9d22efdf1745af423031","libcubeb/googletest/test/gtest_xml_output_unittest_.cc":"ad0b9ebe63a146e386df3c5c51916869f6d4647b9832ceacc912fb1272d15f82","libcubeb/googletest/test/gtest_xml_test_utils.py":"ad89a39a6cd5b08e87082341f3e7800dbf1150ea0f1386e0b8cd374aa6832f00","libcubeb/googletest/test/production.cc":"56fef77c3a8e62073ec11653d740a8e534008a0d57925ab0877b843f4fdd6be8","libcubeb/googletest/test/production.h":"a36d10545d12ead5e93a3b0fdca6ff73405f29091cfe38164415e9038888ba8d","libcubeb/googletest/xcode/Config/DebugProject.xcconfig":"fb42302df29bd8e8b5237194c0c04941f0e578527037930d88469baeb7a7f62b","libcubeb/googletest/xcode/Config/FrameworkTarget.xcconfig":"9935ddabe221f074d2f3b969a137d12b0dc0f845a460f58b63232987cb0f37ff","libcubeb/googletest/xcode/Config/General.xcconfig":"0fb768924daba1048f8db28b3a1fbf915b6f788d49d9d37e85979aa4ee92e02d","libcubeb/googletest/xcode/Config/ReleaseProject.xcconfig":"a4878ddd1ed78fb411906623cb51bc0ab4aea1cc3feb5379d2ae2862d8bf3bf5","libcubeb/googletest/xcode/Config/StaticLibraryTarget.xcconfig":"5886291788b3e9d5aadcb979ff055fd26a2413be81016e7afffb813b627d177c","libcubeb/googletest/xcode/Config/TestTarget.xcconfig":"f074e6c2516a6063b253ec6b842d74f5c2abefc7bcf8d8da54097a7bfe016480","libcubeb/googletest/xcode/Resources/Info.plist":"5b7f78a6d5810ce5490649793175c8982d41e6b49af06bc0705bc061567cc9aa","libcubeb/googletest/xcode/Samples/FrameworkSample/Info.plist":"1c13d83e5eed45689d7fe4bf4681030366474bc40608e39e1623c1350513a0cd","libcubeb/googletest/xcode/Samples/FrameworkSample/WidgetFramework.xcodeproj/project.pbxproj":"1cf0e1b1abf84414372faf9c8bf634e01fe5750bb3ca769b1eb25fc530b21358","libcubeb/googletest/xcode/Samples/FrameworkSample/runtests.sh":"a587e5b00a8353dee0aca5a4c59b28301ccf7648dee8c79b62a9223f9fc3c8cf","libcubeb/googletest/xcode/Samples/FrameworkSample/widget.cc":"562a2bb615e93186012823c9b41761769638a11e38b54498ad5f699038c8fd32","libcubeb/googletest/xcode/Samples/FrameworkSample/widget.h":"0c7915e45cf7cb8d67db24e49cd0b277f23f967578f917f8e859a6adc4b156f9","libcubeb/googletest/xcode/Samples/FrameworkSample/widget_test.cc":"6a1a49d64912d9829ef3d991faf5a3f0e1e081126a1d8d387cdfa84fab70dc77","libcubeb/googletest/xcode/Scripts/runtests.sh":"1a0672a4151b16f3c797478ba26c534e82b2faa603f90b9aa14e785805f7683a","libcubeb/googletest/xcode/Scripts/versiongenerate.py":"4b9d5c0f4e1b556084109311d156bee6d781968dc5b1dfdc8702364508f1dd43","libcubeb/googletest/xcode/gtest.xcodeproj/project.pbxproj":"a1224decff058bfed01b8eefaee13cab0129492615548c6d0d878003a154f7ff","libcubeb/include/cubeb/cubeb.h":"e46d0463c00a7a51e1331169c156e2928802a9d28888086962e7ac5259535bf0","libcubeb/scan-build-install.sh":"1ecf22aca367a4d02f810c4cb78db8636e08a12787e94e30c441ce439cf4a265","libcubeb/src/android/audiotrack_definitions.h":"7cbb2a68924d20ec651cead5a923f63eb20192f109b597a3fa1594a79196693b","libcubeb/src/android/cubeb-output-latency.h":"a0176780c82dcaff369e3126fededd1abbc06ea1e792c6e04a599da6356d030e","libcubeb/src/android/cubeb_media_library.h":"8cb1d21278b038ec35e137208144045b799998cd1a446982477528e4c1b28070","libcubeb/src/android/sles_definitions.h":"4c9c3cedfc06c8df479cc675fbadb1f158b8219223a96b9cffbcbfac738d7f28","libcubeb/src/cubeb-internal.h":"3b03a19f5ba34683bcc08d72532c99b205f20a8922e872657ccc747cf184f827","libcubeb/src/cubeb-jni-instances.h":"8195554372bf60dea569873c9e5fb1106a2cf5dedc66a13d2bc967da0ff48a12","libcubeb/src/cubeb-jni.cpp":"cee58136cde7ef82045b59eee032e6eaf9bb677db12e053d8805ad9d67ee304e","libcubeb/src/cubeb-jni.h":"39669666e68ee77464031e816fee46b8e05cc46a8ed7c0784a3ade86e46e0de3","libcubeb/src/cubeb-speex-resampler.h":"dbf543eee4cc6e40ba3531a39d327e2cec884c19e26c570aa7eae0647e5f7420","libcubeb/src/cubeb.c":"cd81ff6af58f12e643478fe821f4806b9aa9d52139cfa5efab0b04e2b5288be2","libcubeb/src/cubeb_aaudio.cpp":"5c8f20ad68241ec379042bc8f2987b8130b2c0ab0a33265c766ee3c59291b567","libcubeb/src/cubeb_alsa.c":"d15de87fdba3f9ca7cd854c3637e3b5c426b7f1259ed27ead3b812f7be72b9d1","libcubeb/src/cubeb_android.h":"396922d2bb994c39acb745f7449a78e8dee00ad5146583f647545a3e0a9dd010","libcubeb/src/cubeb_array_queue.h":"86ab9c32eef5f4427413091d5932843ee870144475cddb1f0e18cd39d49f6115","libcubeb/src/cubeb_assert.h":"07841be6cca09999a913d0c1e61ab0a5de02200efed5b66fbf7c481b1d0489b0","libcubeb/src/cubeb_audiotrack.c":"a1f4f7000226ebadf58c168eaf01f38a395e19e91a008ecb007d5851bb77971c","libcubeb/src/cubeb_audiounit.cpp":"6e15ea9549d2882565e0d8fcc3318200d81fed82480c84e030f7fcbabb842c23","libcubeb/src/cubeb_jack.cpp":"c7b6c921d15d5eb53c86cb7e1f651893a1472c9bea74f6fbb89e41a1d6f88821","libcubeb/src/cubeb_kai.c":"7fd9927bb422462c73a78c11a675893f6ca3ea10457f4e1d84377df9995e6b30","libcubeb/src/cubeb_log.cpp":"2fb443f8409c573250919a7fe39de2393c95eb8a8f2c285e475900fae835b54f","libcubeb/src/cubeb_log.h":"9383b5e2c3557b290489c4c0aaab0a5015ddf819a834e51400240c03847f9e12","libcubeb/src/cubeb_mixer.cpp":"79dab844a7470c17ee9201b999a5e3b41eeb49c6c94d90b4591e05b4cd35ca93","libcubeb/src/cubeb_mixer.h":"64425dcefad3632acf68d6ae9fbdf59ff7b7b0e92487c34d18cd67f52431dc23","libcubeb/src/cubeb_opensl.c":"f60a0de0a88ffed3c1b2b8d722fe9f8768f3e0a577e91f41fd02215b46061cd0","libcubeb/src/cubeb_oss.c":"9892dad35431fe230f8ee09e3cbc18ef22e3a968a08452231cc37162a0c28b3e","libcubeb/src/cubeb_osx_run_loop.cpp":"e5c9ef5591eced85310af94575f84ea5d3051c7aaef4e41cfd221f8f8b7c4331","libcubeb/src/cubeb_osx_run_loop.h":"aa10dd0d6111973b37488d83403d204ecf6001a3530aac6bffab00c6bb31df15","libcubeb/src/cubeb_pulse.c":"afaca8cc2149f4e87723d0a2d91aea3db36afbebfe608616d22ded9918a7ebc4","libcubeb/src/cubeb_resampler.cpp":"78a0c5becc11a92c77ff8215c618fac952e62623cbf87ce9c52dce94014a9775","libcubeb/src/cubeb_resampler.h":"2baa28aaf29143145bde23d12d21aa3b38e325d1db692c62da4d0e908c0a5719","libcubeb/src/cubeb_resampler_internal.h":"9b8b20a9f6afcb608e87633248d7e18e063814f39f90b8d8d9aa3273d8228bc4","libcubeb/src/cubeb_ring_array.h":"1576bd942562687fcf3f25a07193d82bf765665485355d87cd5beec9d17e2e7d","libcubeb/src/cubeb_ringbuffer.h":"8f5dc7a58d8b7ad265ff3bbcac80ae160ff22243d869a5b502bf413fa58fd9b0","libcubeb/src/cubeb_sndio.c":"5faa0a7133151c98b26ca43df742ecb76c91757baf1d9c16e2018cd2d7534449","libcubeb/src/cubeb_strings.c":"6004618393cf4dc3e06cd4f44cb53589459dad21384de3695f8b3d16774edf26","libcubeb/src/cubeb_strings.h":"312f5c2230d9a02e369be1d991ec44a1793373046f208529b3cc54cb9a5b0610","libcubeb/src/cubeb_sun.c":"bffaa6af749cd57f348f620298ad1dfa50b00f50d7a26476967dc1a7d42b8635","libcubeb/src/cubeb_tracing.h":"def71a9c9659383ea3cf7e12ff0ba2f2c51a0ead03fef6d418eafde6e70c8f39","libcubeb/src/cubeb_utils.cpp":"8f41899df2f5f82541f816dadcee3d18baab7a1aecf2bc6d0b382567209351aa","libcubeb/src/cubeb_utils.h":"a92b7d0f7611c41d641a35dc3a8be8d116c1f4c9d84426159b4dc772e7b9b4ba","libcubeb/src/cubeb_utils_unix.h":"2e67e39daed8ec17092a2d1a9b660a3d4e153fc351698d9e1f3d51ef974979c5","libcubeb/src/cubeb_utils_win.h":"4d7a397f475e08dd7af47fdc4003e9f78cf9058e095348eeb554135ea3c3c454","libcubeb/src/cubeb_wasapi.cpp":"ad246a97b37ab6adcb1dad6be9d8a4a629d41fdba452d9b7eb539455b0b2db87","libcubeb/src/cubeb_winmm.c":"77b14d45f37efbd973ae4d563bf4ab0396e96b53bac3b36375c15517f0fb7028","libcubeb/subprojects/speex/arch.h":"2300bce68c588270cdc684dc7f01377e5e251529f4545d93771e111c56d51b0f","libcubeb/subprojects/speex/fixed_generic.h":"306ee7453677fa6067f16c79d358c6c90a9d3d008850b493cdaa59c07e6375c1","libcubeb/subprojects/speex/resample.c":"9c3a1c64ecf3750af82c980d01ea73d3682f73c332a580465d1e787e5c54cd00","libcubeb/subprojects/speex/resample_neon.h":"7d3fd7af9a1ddde22518b9c7b4419073b72b2dfa5be4c3bc8796992bc87b3da0","libcubeb/subprojects/speex/resample_sse.h":"5a196d8e2d8ab5c956f5252f09f5ddc55aee1f99b1341af3fa54a1f4c2157924","libcubeb/subprojects/speex/speex_config_types.h":"24e3ffbf29e5519611a48e5acb959645b01d166dcb4369380d5f776c3f53d4cd","libcubeb/subprojects/speex/speex_resampler.h":"7e439ec0dd30c32216b3ced17135f8992e5aaf53389d3f5996a7d900c453e65f","libcubeb/subprojects/speex/stack_alloc.h":"e8a2fc0874942d2c7177475fcc141fdd0c0156200b8a4e7656d4a20313e2e569","libcubeb/test/README.md":"1c11b038f87daf10ea78abc17bdbdd157940c241df548c24d5872d142a98c1af","libcubeb/test/common.h":"968144634f3ce627d7f6cb91d48ddc6f1fa89f481ae63f80a7cbe743989e449c","libcubeb/test/test_audio.cpp":"4dfa5e686293101541a300b04712f0cd5a32904fc1f1a71f73ca872d56050e57","libcubeb/test/test_callback_ret.cpp":"77b1bd5e86954458bde25f32bda25cd092bf69c11a9f5294ffa3d56794839a8f","libcubeb/test/test_deadlock.cpp":"0e28e59f360e27241536879d9e02e4e05291db252f66fd601577aaf723e06543","libcubeb/test/test_device_changed_callback.cpp":"d804d1da5611ef5b12abb68b17840cb19a1fa4207678dbb2fc9bdd834aed1fc2","libcubeb/test/test_devices.cpp":"0fbffbd4097898220b5e60f3bee5008dbf005f77bce33c6aa4934a5562b8d092","libcubeb/test/test_duplex.cpp":"0b37b431a1501e8d59f73c05245abe1a313bc7732e14d71e4b3ec4d375da6ce8","libcubeb/test/test_latency.cpp":"dc5af071df0ff0c4b2f6cf7b37438ac8ed9f18cc0fafffb2c685b1e82201c9f5","libcubeb/test/test_loopback.cpp":"00f1250c2012a8bd458a38dfbd80f7e93b764494595c6cd5f3bc2ea518cf1ad0","libcubeb/test/test_overload_callback.cpp":"f3ffa014a0e6f7871a023b46733f93d992ddc9b41e0974cc22a365979b6d989e","libcubeb/test/test_record.cpp":"89a884872b780005b2fb29d106b6f33ddd76b2fcae381395e17d3413153b3b89","libcubeb/test/test_resampler.cpp":"93b16b818a656f2c65060748cecea0a2577b26ac68247a2479d038630d818939","libcubeb/test/test_ring_array.cpp":"27836d716616abf8b020a710659c10ac5e1d4b64149d22cb89bd7a7a5a5669d1","libcubeb/test/test_ring_buffer.cpp":"0ac28f2de88fb4f052b8c212be680002f447a87d72695bb1fdca508145aade7f","libcubeb/test/test_sanity.cpp":"1cbb690544a3b2f4f7fda13a96862295d97837660cce927f83cec070f157f728","libcubeb/test/test_tone.cpp":"372ba4f47cd5cd481abe7ce46c0fb396cf279b83a55348d967847761b49b5367","libcubeb/test/test_utils.cpp":"e8d7a02a9096dbc0fd15d71f9849415d52958d2ed82cbc7b8507d3228e08d382","libcubeb/tools/cubeb-test.cpp":"65ba5565f00f2a9885a5623d68ec3ea67c413fd3ae0609e3a5fde338a1a8d48b","src/callbacks.rs":"a83d9a16ee66b3cd7100dd06e1f409698a727d642df0dfa797c067b5cf1def66","src/channel.rs":"02fd91384195180a56663aba87f00660c20e71fe7654c7b68d8f470173f40d5f","src/context.rs":"96bf3442b1dd40262d3088dbb6c473f5451fd91320cef93c522b40f284599803","src/device.rs":"08a4292bb35f09c129c4b6dcb85653ffe7e7aa98dee3202d47605f3a2b8c4244","src/error.rs":"406e3b843ed2d263fe677c4b34fb96a6d780a68bcb56a6f85f041d20d70227bd","src/format.rs":"d4d27790c20eab0b16592f60d5e487425a45a268cf4c74cf843c10ac91bbff4c","src/internal.rs":"c3af5f53dc7957860bf3bc0cd9737d094fb8ac000e7b40c569304cfa76a43145","src/lib.rs":"cdc36b11f18e274d10df592d216f142e05e1d22db5aac4c7e346893d6b1510db","src/log.rs":"8ac402b6c4d20db651cbddb87b27b3aa5ab0c3c50dac08a6c09fb1b7f9a3a391","src/macros.rs":"caef13f5d23f7a3ec1a54ec3ca2390ac4ad89d521893f1d0864daf70d57a20aa","src/mixer.rs":"e72e92855614da187da6419ed0a115062a05670cb73443b2ea4313d8f5108a68","src/resampler.rs":"b16bd6a4b1179b25f2a5391133fcd4410467e6a68c0a46cf15a12d280c1862e0","src/stream.rs":"59e893d4a8f166d079cfceb9ecc2af6d71f53ee247bb9f2eb971b9563a348eb9"},"package":"f811de8781e63bd5060f5dbef421fea188737c5856e3fa3aa38cd39f4ecab3a2"}
\ No newline at end of file
+{"files":{"Cargo.toml":"1057422eadbec78feb9e83bd9f74e81bbebda1fb19e2ad8651c52dc0b9c7c0e4","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","build.rs":"d096625ec1a7f280b8732baf805230f0e0ed062a12e4e1109eb97c19736daf98","libcubeb/AUTHORS":"829e45d138c7c8827799f302806fa4be8cd8bd4bad70a2fe26c3a27a5cf36948","libcubeb/CMakeLists.txt":"33a5558e6f665be5a3df177a3d2220034083af29c46f48d89d489ac032f440d9","libcubeb/Config.cmake.in":"a156fb5cd30208aedcb9ef025d94187df82142fd4442e3a7d0e2a688668a3da9","libcubeb/INSTALL.md":"4e0c8e7f564b5a802e23750d67eb0c46a12c3959e9b48d994c0744156f80c090","libcubeb/LICENSE":"44c6b5ae5ec3fe2fbc608b00e6f4896f4d2d5c7e525fcbaa3eaa3cf2f3d5a983","libcubeb/README.md":"9b01cda3464a448373176c07368d1ce4a2b4f87ec9f8f02cbac0b4a40719c141","libcubeb/cmake/compile_tests/oss_is_v4.c":"482bcd4c569e8a26f4ab0fe3a3bed25e9d4b296bf678896a2cc1dc8abbad492d","libcubeb/cmake/sanitizers-cmake/CMakeLists.txt":"89b282c19b3897ff666f7847d5e679ae928ca7e76ffd0d23f7c58c9464048b61","libcubeb/cmake/sanitizers-cmake/LICENSE":"4b67e7ae8c91e68e1a929eb1cbaa4c773c6d19aa91aaa12c390cf9560d1c9799","libcubeb/cmake/sanitizers-cmake/README.md":"f3b85a594e1601ae65bb09393c56fbc8a98e3f3f49234e56f86bd78803c3544e","libcubeb/cmake/sanitizers-cmake/cmake/FindASan.cmake":"bd30b1c3cb0682b8a2b0b599f6c51fbf99ef4908b00eba8826f0d484c623b01b","libcubeb/cmake/sanitizers-cmake/cmake/FindMSan.cmake":"55e40f0994b47f8e779622af2007c69252d9456be99f4aa4fba7dd49c23d5580","libcubeb/cmake/sanitizers-cmake/cmake/FindSanitizers.cmake":"2ffd9717a49e3e9de848ec0d91097bdbab3f75a7866211d902f9659f59271ffc","libcubeb/cmake/sanitizers-cmake/cmake/FindTSan.cmake":"ceace234abd5a463ad1b8134ad06c4c8004895b2e8fc9edb67e64620ea97ca47","libcubeb/cmake/sanitizers-cmake/cmake/FindUBSan.cmake":"4720ec96ea42a2a9c07d887c1fc5562ed3e8c222f5778a18b78c46678b23f156","libcubeb/cmake/sanitizers-cmake/cmake/asan-wrapper":"4e543936e6374e24b80a0f92135c07c2e2101c0d110e51bddaf0e70ae8ec391e","libcubeb/cmake/sanitizers-cmake/cmake/sanitize-helpers.cmake":"c0c225f22bebd27eb68b807b2a61962d28afc61609735fe652c2fde6aa6a005b","libcubeb/cmake/sanitizers-cmake/tests/CMakeLists.txt":"64b7aea469a043f27414e3d652aaa89a03a11843d152c4cd42f30561e6ef51bc","libcubeb/cmake/sanitizers-cmake/tests/asan_test.cpp":"a25de95282aaee22d977d0b474468b946c1422b80b15424c04266dba038eba2e","libcubeb/cmake/sanitizers-cmake/tests/shortest.ext.test.cpp":"a25de95282aaee22d977d0b474468b946c1422b80b15424c04266dba038eba2e","libcubeb/cmake/toolchain-cross-mingw.cmake":"1c26749465364061ddf37aaa00f363eaf057c4b6a70181086e13b0a4d09bd376","libcubeb/cubeb.supp":"19f33e59f8dc91a327c923e44c2c3f9af0a043ce1d6a8cac275ba094b4bfe0da","libcubeb/docs/Doxyfile.in":"0815f19789cedd310652a133bab260c27b57e95f7a65458df2dfca38ea4f1041","libcubeb/googletest/CHANGES":"72c8a289bfe4dd9160074a3a2238c8067a5bc7ca49fd87f70a134c3f373932a4","libcubeb/googletest/CMakeLists.txt":"cdf938ce79ea066866dc614de3925bfaa48d9e19e04049db2ec8c5443abaaa9b","libcubeb/googletest/CONTRIBUTORS":"4d911cd5e6d71f3f4bbcb2788b2f916df4b0ce1e088752a159457a1d936ae0ce","libcubeb/googletest/COPYING":"9702de7e4117a8e2b20dafab11ffda58c198aede066406496bef670d40a22138","libcubeb/googletest/Makefile.am":"a795e5a18e82ba06fd97509d92d773b7fafd0dd7086db8a1211fbd151b503bac","libcubeb/googletest/README":"484b19654362942fac9734c8fab0ed3d99249b81c69027bdb7de46054abada6b","libcubeb/googletest/cmake/internal_utils.cmake":"6f4670a5825cf8ae0415be9dd43d82a7f30316d75cab20a4c60afb6d9db2a01d","libcubeb/googletest/codegear/gtest.cbproj":"9fa07a66b8c01773256e508187775407c465ed9055651e93d390426d1888721a","libcubeb/googletest/codegear/gtest.groupproj":"76c001cb2ee0070e26d1570fb6db5250f2585179c707496c5ef6d12e582cf205","libcubeb/googletest/codegear/gtest_all.cc":"c8750dc2b7b3612edb60e8d23fc2f60ae264451916c4b15f81cbf60ea30eb75d","libcubeb/googletest/codegear/gtest_link.cc":"e5e47c086f932471e0ca748a62b3b1597e5e731f4d34fb8cb8b2ca2db7ba3ed0","libcubeb/googletest/codegear/gtest_main.cbproj":"056448ba7f41fae3f704b1001922d9f6e419cf8cbcf3a55bf0ecc59ece1fa9a1","libcubeb/googletest/codegear/gtest_unittest.cbproj":"2c48be90b0dbc3224a8bd6c4dc21f78dd1b08c81685e6bd4952bb6df6ee38701","libcubeb/googletest/configure.ac":"fadebffdaeaccebb60fbe4a501c1138c296e01348a5da45fabf5e4233248baa8","libcubeb/googletest/include/gtest/gtest-death-test.h":"fdd087f700cd04a3ce4bdd36f35769de52a44bfc0c5bae2dc9681d4cbcd3c44a","libcubeb/googletest/include/gtest/gtest-message.h":"eaf44df1284d94333507c47091c84eaaf43814e6a02a1b1c0061ca7b363e74d6","libcubeb/googletest/include/gtest/gtest-param-test.h":"f226f0a24c04cddbceaaa45d8a5e575ce18c3392349f9b8ba73317e37e62368d","libcubeb/googletest/include/gtest/gtest-param-test.h.pump":"17c65fd5cc5218279044a61f3873c9c952b0924a7ba5147d4999d400b122207f","libcubeb/googletest/include/gtest/gtest-printers.h":"7046f611398d63ee0f1c37bdb4fd08d9931979b2fedf13b781e6d85d4b3b5d60","libcubeb/googletest/include/gtest/gtest-spi.h":"560407dd45e8e57fa6927504c9e4a4cfdecf30f8cada975c1ffddce765e6a88a","libcubeb/googletest/include/gtest/gtest-test-part.h":"c4d6d840284728740c284646075e8ffc85b63b9f74f3ed488b18ef3c2c2b9005","libcubeb/googletest/include/gtest/gtest-typed-test.h":"1ec858bbb9ed8a8bb553232df016437c080b2670f00453b4de297c286eb78c21","libcubeb/googletest/include/gtest/gtest.h":"47433ca72a43bda7a380c34fe6d4ff451797c687e9bbd74d1f366bcdfa0cb013","libcubeb/googletest/include/gtest/gtest_pred_impl.h":"f03a3f77e3c231889c0ace6f63b2c4e410e4a9330287ea09443b23b9a3cf9092","libcubeb/googletest/include/gtest/gtest_prod.h":"4a99a3d986a45b4d6d9b3af54809f015c54aa98274793a4ae173f5010d0ad33c","libcubeb/googletest/include/gtest/internal/gtest-death-test-internal.h":"0b3abead866363f3e6b4201acc8d2763072e033826b22ae5ebffd790e1415235","libcubeb/googletest/include/gtest/internal/gtest-filepath.h":"638d2bb6c06a894513b03311a8e931ac835fc00afc4bd21fab3afc05732c23a0","libcubeb/googletest/include/gtest/internal/gtest-internal.h":"12c2c83df0a9dc5b46697ccd8271dfa34ee5f3d1972dcb56585bc1459d9583c9","libcubeb/googletest/include/gtest/internal/gtest-linked_ptr.h":"9bd319548dd073630dfd349c06a440c6a582feec47d4ff14f348ec32f8b4c1f3","libcubeb/googletest/include/gtest/internal/gtest-param-util-generated.h":"10db93fa7e98820192bae6f560664469dd33b265036fca64253c89b6801f96cb","libcubeb/googletest/include/gtest/internal/gtest-param-util-generated.h.pump":"abb72365d94d2811b34c195dc520fbf41c7dcb42aae5a1cfa0502cf619b21e70","libcubeb/googletest/include/gtest/internal/gtest-param-util.h":"7f9311f033ef6916217d87cef53b1db6c4e8733be930e4b48fe7e11d21b33da0","libcubeb/googletest/include/gtest/internal/gtest-port.h":"612932c2930a7cf2c3514d89a8d6b51a2c0030d251309b71765ed1c9954e20c5","libcubeb/googletest/include/gtest/internal/gtest-string.h":"a46aa36165c400d1e926f942be03fe04cd7ccb1e59f7a2a03b919c4eea05b997","libcubeb/googletest/include/gtest/internal/gtest-tuple.h":"43e7e3c92f8e4258cf3927a9204b214d4d03e6c796f88f3ad4e66b1ac20aa938","libcubeb/googletest/include/gtest/internal/gtest-tuple.h.pump":"16fa027ed3c5940699e0ac906815e66620993bcf75b0acaf826d4f09348d4b83","libcubeb/googletest/include/gtest/internal/gtest-type-util.h":"6d177af46a9b1e14b969972a8b886667f95e69037aba411433a44fb9b92e7037","libcubeb/googletest/include/gtest/internal/gtest-type-util.h.pump":"22092f44127af91651f57ce222e20914d5d32ae02f1c0964f6d5d7bc019af339","libcubeb/googletest/m4/acx_pthread.m4":"3326e3746b6b351d1671fe31f798269cda8de92c365b8a8305404ec0fa6c6b32","libcubeb/googletest/m4/gtest.m4":"d3c37ebd1aa792c967d4357755cc670bc6deb30091d9e6db498871d90a30ea4c","libcubeb/googletest/make/Makefile":"9b86e2a112dd55c6bf6a2b39e6f4078faf60cfecb8282ebf9b025167ed233420","libcubeb/googletest/msvc/gtest-md.sln":"0beab679b42cf0c431eaf4fe143bbf3b01fc064e20c74d9e33e7e437a70487d4","libcubeb/googletest/msvc/gtest-md.vcproj":"52e873e964daf9d5409b4e9bb471ddf2827be04985cd96c40620f9275d17a256","libcubeb/googletest/msvc/gtest.sln":"be21c2340650ec2259a2fbaeb8608ae6d3e982a0626a0f91128a771dc88e6bea","libcubeb/googletest/msvc/gtest.vcproj":"0064616c7d88a284c1b7c05baab038f239134ea9c6c563628f286f9600b3f921","libcubeb/googletest/msvc/gtest_main-md.vcproj":"f83a294a92b616bf34ccae6743ff916297bdba61d6125a9637a813d467a30372","libcubeb/googletest/msvc/gtest_main.vcproj":"9f03270a00896eab0c7015c6fb1a73818d024e462d3944ba1d3ceb313a051649","libcubeb/googletest/msvc/gtest_prod_test-md.vcproj":"7caa108733e2d5f140da004d2133e04a9a105811909c0e2d4ec06e2971983592","libcubeb/googletest/msvc/gtest_prod_test.vcproj":"cf5bfb7f3de9a59a0eba5535067845d12c33c3fd8fecc3d03aa702665db29578","libcubeb/googletest/msvc/gtest_unittest-md.vcproj":"e7949b21cf0418f2a7afe8aa94616e2c40e3ba0801c2f0826f3a3a3d2e6f48b0","libcubeb/googletest/msvc/gtest_unittest.vcproj":"5b097d596fbbc1c4090fd518008a0961b29661194e1c02d8a2d3daaa557e626f","libcubeb/googletest/samples/prime_tables.h":"2903df1d1e6643a5f624fe3ea3f931c3410eb1858ac347c5df278273c6c91ca4","libcubeb/googletest/samples/sample1.cc":"dc106c5940d87bb4bbef3d77815eab642ee173a3340b2b9c532b5c711c4c2d0e","libcubeb/googletest/samples/sample1.h":"7a7bf9a0fbd2401e8b2cb554bfcb9bd0ed228212f3b970675c1b1d38d4e188bb","libcubeb/googletest/samples/sample10_unittest.cc":"ccebb6393a5a8468399f7e511219b667a2233f82312ce59834a4bb0997d8700e","libcubeb/googletest/samples/sample1_unittest.cc":"904be0d4a095e74393515195392bd10e1e916bb2ca61f3f94b1bd6aebea29cb6","libcubeb/googletest/samples/sample2.cc":"f14b8a1e69d52eef1a70053fb256818c7eca64e8eda08de43cf46e896e57fcc2","libcubeb/googletest/samples/sample2.h":"df956ba520dafca068dbc1e28f36567db3cba36293e06762318af8cda6a12bd4","libcubeb/googletest/samples/sample2_unittest.cc":"abe7e0b253d328cb82ae67623fbe3c89eb94699102510c64a0b568eaca101e05","libcubeb/googletest/samples/sample3-inl.h":"3fe482bbd4f725f5820f5d6beab4d0d4a524be8addf4b344a9a470ec5aabc451","libcubeb/googletest/samples/sample3_unittest.cc":"252c06b4531dc35213ebdd7311700b9b4057bc1bdeeba0cd767b2bc86c456639","libcubeb/googletest/samples/sample4.cc":"b4260f5fa35d78ac114a9abb59fce12403faf0273df41f57e83c341ae7979222","libcubeb/googletest/samples/sample4.h":"604905cae7e5587805c3b884a36eda7a2bebdfedb53b24b0fd9a220eec0ef1a9","libcubeb/googletest/samples/sample4_unittest.cc":"6cfb4821d8cb1c77fbb5af4f8aec569948762d8ea314827e3ead967b5b6a223e","libcubeb/googletest/samples/sample5_unittest.cc":"73646d9038873a68bb2e56b12495d7f7b65b5c23901109701da446af454ba2ec","libcubeb/googletest/samples/sample6_unittest.cc":"833fee399954f908cf0f3b789832e505329787f4cf73607a7b31ca0f62f368d7","libcubeb/googletest/samples/sample7_unittest.cc":"8013ee68d61c181e4e936cdae3a9a635646274f8512033ef11bff7214e03e4a6","libcubeb/googletest/samples/sample8_unittest.cc":"7b7510fadf4955d2f934d23d652dbd35add832e50bdfcc98421fb9be4588d808","libcubeb/googletest/samples/sample9_unittest.cc":"8b827040dea37b460cbcaea0b255b98974a9840f6ef7bd82aaa7d4ad2c724335","libcubeb/googletest/scripts/fuse_gtest_files.py":"adecf64c6bab65b31740c321e568cf174f753d5617745aa5762d842339d68b53","libcubeb/googletest/scripts/gen_gtest_pred_impl.py":"78fb7e20a014c251d723186eb58040e4eb32405b73c9288d787ea0a0e4ff5183","libcubeb/googletest/scripts/gtest-config.in":"9a43978eeee88e188845d737c17f4d024d4e74feae09da7997e8fbe4ea6cc176","libcubeb/googletest/scripts/pump.py":"3856a3d7be37f78e0f214ee7d4f29d05f1ca14218b67539d67c9a16e992f670c","libcubeb/googletest/scripts/test/Makefile":"3576b257594a2d8e843b9e4de8c83353d837833bb86431fb1b4198022b1bcddc","libcubeb/googletest/scripts/upload.py":"f75d0712e3b13bebd8daa0a15e4eb32c9e3034a933f4fcccf65b1e999a7ae066","libcubeb/googletest/scripts/upload_gtest.py":"6e76fc0a7a3831c01cfffd18c220d44438073a66338d91ca61fc84b924021e61","libcubeb/googletest/src/gtest-all.cc":"568ac119f5e6418f1fbcfbdf185d724657d7f3539b47822da229ac5d015626b2","libcubeb/googletest/src/gtest-death-test.cc":"eec1b3c8252670c76acbbaf63483946897ce625139b53a566406b6313f023896","libcubeb/googletest/src/gtest-filepath.cc":"31b7fcda5d11346f8a487597c6a70ff057f1192e0cb11f27eb7841a9f3aa8b86","libcubeb/googletest/src/gtest-internal-inl.h":"c9d428a6b5990ace091e40c4ce8b7bf6c50c186a8314b1c4a4cdc988ca0ac1a4","libcubeb/googletest/src/gtest-port.cc":"95bcf473622d1b901c734e5c2aeb8efb058555ec924212a61bb04f049bb5a069","libcubeb/googletest/src/gtest-printers.cc":"6f191a7fc7f5a0a967fd11964057f2e2d2eaf2f37ccece16bd816531f52b3154","libcubeb/googletest/src/gtest-test-part.cc":"e489868b4cdc66f4fc33bc2326ac86bc1acc5808ab58bbb288c9dcfc330faddc","libcubeb/googletest/src/gtest-typed-test.cc":"ca9e819df728c25a6a1fc072806c22f3494e1dffe4bd0d48284f38dbdd3a0dd5","libcubeb/googletest/src/gtest.cc":"5cf9a3e897892c9f0e5c887f91d3c8c8c5665bd7348560441fc0b946c254873c","libcubeb/googletest/src/gtest_main.cc":"22fa1f77542b882d1798d7f696045c5895942a626e26200a175fa4382e1fa5b5","libcubeb/googletest/test/gtest-death-test_ex_test.cc":"613ccf50a3ff8f84c975a13e86ea01ea4e36933072388a3738b4acf9ed3ed7cf","libcubeb/googletest/test/gtest-death-test_test.cc":"df8384a847bdf889233c3d45d171f784991def7a9b6a08442138569fbae32b9d","libcubeb/googletest/test/gtest-filepath_test.cc":"49760f91723845b113bb60bb9b1a1426ed1da1f4ebfef2462128980ea5692cc9","libcubeb/googletest/test/gtest-linked_ptr_test.cc":"1b9cb4ff67475900db9de34ae9749b94193048a1f7a741091ba5a2dd7fc7a79b","libcubeb/googletest/test/gtest-listener_test.cc":"acf78f2c9a730525ea5adc93e9196a42de8fbfe488db1dfd02656bdbd477b2c0","libcubeb/googletest/test/gtest-message_test.cc":"b1fc68f8b75ce25fbd79b3f7d3c9c793381ef07b3203e1a2d9b610cb597542be","libcubeb/googletest/test/gtest-options_test.cc":"74e3ae0c310edb3139b0032266219d3ce7f386ded6feafa57fef03f4493ed7fa","libcubeb/googletest/test/gtest-param-test2_test.cc":"a0f1efbcab3f7e49df639383157626931f64756f7e738be081760f93f7308332","libcubeb/googletest/test/gtest-param-test_test.cc":"ef8bd344e959053f562b0c9e0d15e2fb6c1e534772a67aaf3f90bd6bad0bf99f","libcubeb/googletest/test/gtest-param-test_test.h":"9d7f47b79d54df7cc050aa6038b0464aa684dfca669a847bf70ea16e4a000628","libcubeb/googletest/test/gtest-port_test.cc":"1600f78ef0860a0f5b5525e5e5041ff32a216cc6ae948b1ea61fe04ec603f67d","libcubeb/googletest/test/gtest-printers_test.cc":"7898e4b4163ee0821fed248e1c75d9f4a0a511a2b4bbfad1ef2f4a11a099f6e7","libcubeb/googletest/test/gtest-test-part_test.cc":"62c8906bb0d12ea84d60217b3773cd8e1768db4aab934880db2316df7026cab8","libcubeb/googletest/test/gtest-tuple_test.cc":"2850dc1f73a3f8020d8a4d80688a28d9b736eae6d677222c3f871d8d33b25501","libcubeb/googletest/test/gtest-typed-test2_test.cc":"c52b65e7181610d6e577631cd50177399884913ff28d08aedfedc92f05185044","libcubeb/googletest/test/gtest-typed-test_test.cc":"c7daff5211028da79b3ca0473dca18ada9197f38e710f72d0493ad3332ce3ec9","libcubeb/googletest/test/gtest-typed-test_test.h":"3145698534d8869beb624c9c8ed114f75bead046b2eeb92ada5a724993ee7786","libcubeb/googletest/test/gtest-unittest-api_test.cc":"e3f54c28ef2849e8b12af666ed46aace50c3e047845072ee6f974ce4528bd297","libcubeb/googletest/test/gtest_all_test.cc":"db0c3c42b385570b1d517e3ee927671b8fad4e206247fca738ec477222ac3d97","libcubeb/googletest/test/gtest_break_on_failure_unittest.py":"11c91bc1c68cfdb913e2affb01261b55fb3b0c18773a45875e9c25cb330a4dcd","libcubeb/googletest/test/gtest_break_on_failure_unittest_.cc":"1da12e4bdda2a0bc7b59d4638fe34b2d3798134224fd9237eeebdd09c3326011","libcubeb/googletest/test/gtest_catch_exceptions_test.py":"305cef45c6dc034bdf72fd91aba1e89e1c6b5d222c3d6baffff5acdfd9b3873e","libcubeb/googletest/test/gtest_catch_exceptions_test_.cc":"b297a4f4d5bc0285ea9eb8869741631658305e49d4513bca904842aacb82128b","libcubeb/googletest/test/gtest_color_test.py":"c4cb006682a40f2d88759a4bcabf0d4be623720b135c71447f1788d17ea23d0f","libcubeb/googletest/test/gtest_color_test_.cc":"f263ba349afe58a558bf0fee98a98bb9207a648e7cd4f908a87799bd13d001ea","libcubeb/googletest/test/gtest_env_var_test.py":"79819598cd1e366eaa8f2a4fee2d638b6ef0686e490402fae792ccce58d876c0","libcubeb/googletest/test/gtest_env_var_test_.cc":"0eee5dfbb2a2598f4e76626346b921928ec1e052e38f254cc97c60d05611ab46","libcubeb/googletest/test/gtest_environment_test.cc":"a52a21ea29c2203b03fa93922733546d171f98d3b2fcd42972269e98fd124715","libcubeb/googletest/test/gtest_filter_unittest.py":"edc7d278803bba41626eacd050d91d7247f1c5999f9dceb99a8877e238bc73d6","libcubeb/googletest/test/gtest_filter_unittest_.cc":"996ac528ad75c293d8201ce28cf6acccee266286bd369b4cf43f05b8d67a4559","libcubeb/googletest/test/gtest_help_test.py":"b43ab690c08e4bffd84a47b361167496298697f9511bdf4a745bf305b5cfbdfc","libcubeb/googletest/test/gtest_help_test_.cc":"ff4b121098f0fe7cb4abf11fdd31f2fe7a477286ec9175482138bc038d61c807","libcubeb/googletest/test/gtest_list_tests_unittest.py":"7caebc175b44b3c727fc50420ada1a6a9500f3e4ce9e2839f69205437aa85e7a","libcubeb/googletest/test/gtest_list_tests_unittest_.cc":"d82d8b72914897232c2ff9fd091a7b0add68b7cf75f3f210d3a487ebeea84cfe","libcubeb/googletest/test/gtest_main_unittest.cc":"0f66f318809c88f0fbe034a340a75331720c4e33be5378022baffaf588ef1202","libcubeb/googletest/test/gtest_no_test_unittest.cc":"7cf487e07c3d27376c2cb8af33d02239b7966623875d37b7aa0259e927a9c2f6","libcubeb/googletest/test/gtest_output_test.py":"cf0dc1979572d94450a5e611b44f3fdb88d9cd980d669a723f0ed63057b5e2c4","libcubeb/googletest/test/gtest_output_test_.cc":"f69569374c2b3d06aa04a38ebc4f92ddc303e6af503f8b533cd8e6bf9f104899","libcubeb/googletest/test/gtest_output_test_golden_lin.txt":"4f3e49c10a524a99437cdcb5294e3335a7f3c07ea8462e65730f703a5fe4fec3","libcubeb/googletest/test/gtest_pred_impl_unittest.cc":"e406eccf75b6b58746a95d1c7ea7bc8e80ff974e438ef7c83074a46d4e62db9a","libcubeb/googletest/test/gtest_prod_test.cc":"b42ca1a6d0a1e43bc576b4ff7776c6d2c37234f6dc2a76f2735f261b4a47a526","libcubeb/googletest/test/gtest_repeat_test.cc":"e10abbb71595920aa3bb415029eed74106335fc9ea3d58c417ccfc7cba6a4cdb","libcubeb/googletest/test/gtest_shuffle_test.py":"12dd94eb5f30260ba37059fa74658bda57dffa821f3ba6a2a8b52ff14b1ad029","libcubeb/googletest/test/gtest_shuffle_test_.cc":"af1b2b01ae275f1a9fee7e7940c0f88f39ded063008994d585aad87e3ffadb39","libcubeb/googletest/test/gtest_sole_header_test.cc":"538414c27a593ab8dc34c37b5c877eb3a022d75d1b481ef14ceca00914929754","libcubeb/googletest/test/gtest_stress_test.cc":"0b02fc12f87944226915a999bdcc8a3eaafb34a1ea5bb0df128774abf8667f09","libcubeb/googletest/test/gtest_test_utils.py":"d4a76930aee6658ad8734981ca0c4ea14f34dbe8fdd31d5afe41f6d98f9779ee","libcubeb/googletest/test/gtest_throw_on_failure_ex_test.cc":"11ae790028da20bc7b7af1572eff3cfe8499be43ab64c110e18e1892612a183f","libcubeb/googletest/test/gtest_throw_on_failure_test.py":"ebe18ca0b07f90c53b9b3f9a54ed02df94facf8995cfa90dd41c6f5474537c13","libcubeb/googletest/test/gtest_throw_on_failure_test_.cc":"f8cbf75d8bf9e9ae068a17ff968434c3aec7b7f1137c994d8f14af1a84361aa9","libcubeb/googletest/test/gtest_uninitialized_test.py":"da8e6ce34930753e36fc1dfa2c3e20e48d02bda2a27d3d03a07364312c5f3bd9","libcubeb/googletest/test/gtest_uninitialized_test_.cc":"0b6a9d4983480f87352ca4da946089264b401f7a4a3b1282253fd6cc861bf483","libcubeb/googletest/test/gtest_unittest.cc":"c0c7d1f691ce1e10c3d1647ed5f7a66510725808ad58bb6da4bc03a7a08fb2fc","libcubeb/googletest/test/gtest_xml_outfile1_test_.cc":"29341d777a9c9d25f360d13ed966b30f0cbef1fc88aefe2f01bb88b82cf1ed93","libcubeb/googletest/test/gtest_xml_outfile2_test_.cc":"da7ab3cf0e9b2a293eceed7c5691233d6b61afb557e3c1176dfb75390f85be46","libcubeb/googletest/test/gtest_xml_outfiles_test.py":"b07927b43f44afbfd61761c2cc69f1b68c4fbdeddb992db03ff0c73052518cd4","libcubeb/googletest/test/gtest_xml_output_unittest.py":"b5ff0c0207238d01cada961b8f4656f2ec30a3e1e5bf9d22efdf1745af423031","libcubeb/googletest/test/gtest_xml_output_unittest_.cc":"ad0b9ebe63a146e386df3c5c51916869f6d4647b9832ceacc912fb1272d15f82","libcubeb/googletest/test/gtest_xml_test_utils.py":"ad89a39a6cd5b08e87082341f3e7800dbf1150ea0f1386e0b8cd374aa6832f00","libcubeb/googletest/test/production.cc":"56fef77c3a8e62073ec11653d740a8e534008a0d57925ab0877b843f4fdd6be8","libcubeb/googletest/test/production.h":"a36d10545d12ead5e93a3b0fdca6ff73405f29091cfe38164415e9038888ba8d","libcubeb/googletest/xcode/Config/DebugProject.xcconfig":"fb42302df29bd8e8b5237194c0c04941f0e578527037930d88469baeb7a7f62b","libcubeb/googletest/xcode/Config/FrameworkTarget.xcconfig":"9935ddabe221f074d2f3b969a137d12b0dc0f845a460f58b63232987cb0f37ff","libcubeb/googletest/xcode/Config/General.xcconfig":"0fb768924daba1048f8db28b3a1fbf915b6f788d49d9d37e85979aa4ee92e02d","libcubeb/googletest/xcode/Config/ReleaseProject.xcconfig":"a4878ddd1ed78fb411906623cb51bc0ab4aea1cc3feb5379d2ae2862d8bf3bf5","libcubeb/googletest/xcode/Config/StaticLibraryTarget.xcconfig":"5886291788b3e9d5aadcb979ff055fd26a2413be81016e7afffb813b627d177c","libcubeb/googletest/xcode/Config/TestTarget.xcconfig":"f074e6c2516a6063b253ec6b842d74f5c2abefc7bcf8d8da54097a7bfe016480","libcubeb/googletest/xcode/Resources/Info.plist":"5b7f78a6d5810ce5490649793175c8982d41e6b49af06bc0705bc061567cc9aa","libcubeb/googletest/xcode/Samples/FrameworkSample/Info.plist":"1c13d83e5eed45689d7fe4bf4681030366474bc40608e39e1623c1350513a0cd","libcubeb/googletest/xcode/Samples/FrameworkSample/WidgetFramework.xcodeproj/project.pbxproj":"1cf0e1b1abf84414372faf9c8bf634e01fe5750bb3ca769b1eb25fc530b21358","libcubeb/googletest/xcode/Samples/FrameworkSample/runtests.sh":"a587e5b00a8353dee0aca5a4c59b28301ccf7648dee8c79b62a9223f9fc3c8cf","libcubeb/googletest/xcode/Samples/FrameworkSample/widget.cc":"562a2bb615e93186012823c9b41761769638a11e38b54498ad5f699038c8fd32","libcubeb/googletest/xcode/Samples/FrameworkSample/widget.h":"0c7915e45cf7cb8d67db24e49cd0b277f23f967578f917f8e859a6adc4b156f9","libcubeb/googletest/xcode/Samples/FrameworkSample/widget_test.cc":"6a1a49d64912d9829ef3d991faf5a3f0e1e081126a1d8d387cdfa84fab70dc77","libcubeb/googletest/xcode/Scripts/runtests.sh":"1a0672a4151b16f3c797478ba26c534e82b2faa603f90b9aa14e785805f7683a","libcubeb/googletest/xcode/Scripts/versiongenerate.py":"4b9d5c0f4e1b556084109311d156bee6d781968dc5b1dfdc8702364508f1dd43","libcubeb/googletest/xcode/gtest.xcodeproj/project.pbxproj":"a1224decff058bfed01b8eefaee13cab0129492615548c6d0d878003a154f7ff","libcubeb/include/cubeb/cubeb.h":"e46d0463c00a7a51e1331169c156e2928802a9d28888086962e7ac5259535bf0","libcubeb/scan-build-install.sh":"1ecf22aca367a4d02f810c4cb78db8636e08a12787e94e30c441ce439cf4a265","libcubeb/src/android/audiotrack_definitions.h":"7cbb2a68924d20ec651cead5a923f63eb20192f109b597a3fa1594a79196693b","libcubeb/src/android/cubeb-output-latency.h":"a0176780c82dcaff369e3126fededd1abbc06ea1e792c6e04a599da6356d030e","libcubeb/src/android/cubeb_media_library.h":"8cb1d21278b038ec35e137208144045b799998cd1a446982477528e4c1b28070","libcubeb/src/android/sles_definitions.h":"4c9c3cedfc06c8df479cc675fbadb1f158b8219223a96b9cffbcbfac738d7f28","libcubeb/src/cubeb-internal.h":"3b03a19f5ba34683bcc08d72532c99b205f20a8922e872657ccc747cf184f827","libcubeb/src/cubeb-jni-instances.h":"8195554372bf60dea569873c9e5fb1106a2cf5dedc66a13d2bc967da0ff48a12","libcubeb/src/cubeb-jni.cpp":"cee58136cde7ef82045b59eee032e6eaf9bb677db12e053d8805ad9d67ee304e","libcubeb/src/cubeb-jni.h":"39669666e68ee77464031e816fee46b8e05cc46a8ed7c0784a3ade86e46e0de3","libcubeb/src/cubeb-sles.h":"d75c478e5aee73488766bd19059e6ead3e385d603d5265684e4b0bda98adccfd","libcubeb/src/cubeb-speex-resampler.h":"dbf543eee4cc6e40ba3531a39d327e2cec884c19e26c570aa7eae0647e5f7420","libcubeb/src/cubeb.c":"3d18d51f03ff7c7318a18cb19da668c45cac2f434f1fe09f77f575da3411c7dc","libcubeb/src/cubeb_aaudio.cpp":"d1f9cd407506df92705d5d8f5f2e96331e0378bc748959ff32c39d038e444941","libcubeb/src/cubeb_alsa.c":"1bceb4db9dd25dd34888adf1f52910f37e820087f1b005d9b7957b60f6ef21fe","libcubeb/src/cubeb_android.h":"396922d2bb994c39acb745f7449a78e8dee00ad5146583f647545a3e0a9dd010","libcubeb/src/cubeb_array_queue.h":"86ab9c32eef5f4427413091d5932843ee870144475cddb1f0e18cd39d49f6115","libcubeb/src/cubeb_assert.h":"07841be6cca09999a913d0c1e61ab0a5de02200efed5b66fbf7c481b1d0489b0","libcubeb/src/cubeb_audiotrack.c":"a1f4f7000226ebadf58c168eaf01f38a395e19e91a008ecb007d5851bb77971c","libcubeb/src/cubeb_audiounit.cpp":"6e15ea9549d2882565e0d8fcc3318200d81fed82480c84e030f7fcbabb842c23","libcubeb/src/cubeb_jack.cpp":"980756c886956b4f1b5e93d8abe680baca19bab5324b3ce0ebbb64d9266bf098","libcubeb/src/cubeb_kai.c":"7fd9927bb422462c73a78c11a675893f6ca3ea10457f4e1d84377df9995e6b30","libcubeb/src/cubeb_log.cpp":"fbe190b352ce45c2166a53d8875379be46379f5e528e0b8951e3af0ba149af2c","libcubeb/src/cubeb_log.h":"db27dc98122b9b5e6acae942652d338f3f2342ecd543f45edfaf57c43366bf73","libcubeb/src/cubeb_mixer.cpp":"79dab844a7470c17ee9201b999a5e3b41eeb49c6c94d90b4591e05b4cd35ca93","libcubeb/src/cubeb_mixer.h":"64425dcefad3632acf68d6ae9fbdf59ff7b7b0e92487c34d18cd67f52431dc23","libcubeb/src/cubeb_opensl.c":"cf2866d97f9cbf374a581a045b8b31cf55ff67e9bd40cf894c1a9073f02a76fb","libcubeb/src/cubeb_oss.c":"f1b5ffe16e8c74572ab577a7ce2f2b6e5100ef09d84e260b945b724a7ed32983","libcubeb/src/cubeb_osx_run_loop.cpp":"e5c9ef5591eced85310af94575f84ea5d3051c7aaef4e41cfd221f8f8b7c4331","libcubeb/src/cubeb_osx_run_loop.h":"aa10dd0d6111973b37488d83403d204ecf6001a3530aac6bffab00c6bb31df15","libcubeb/src/cubeb_pulse.c":"7b934f143e9456a6425d6238182df7cabf05442cd00a50e81bdf843a1ad8a9ab","libcubeb/src/cubeb_resampler.cpp":"78a0c5becc11a92c77ff8215c618fac952e62623cbf87ce9c52dce94014a9775","libcubeb/src/cubeb_resampler.h":"2baa28aaf29143145bde23d12d21aa3b38e325d1db692c62da4d0e908c0a5719","libcubeb/src/cubeb_resampler_internal.h":"a0c9533a2e22203e240372430f655f683e9d2927a5409c6dbe6bd96f971bcd7b","libcubeb/src/cubeb_ring_array.h":"1576bd942562687fcf3f25a07193d82bf765665485355d87cd5beec9d17e2e7d","libcubeb/src/cubeb_ringbuffer.h":"8f5dc7a58d8b7ad265ff3bbcac80ae160ff22243d869a5b502bf413fa58fd9b0","libcubeb/src/cubeb_sndio.c":"26ee283ad73ec0a38549bbd2531fe10c127bfac840b7fbcf21531dd48aba6a98","libcubeb/src/cubeb_strings.c":"6004618393cf4dc3e06cd4f44cb53589459dad21384de3695f8b3d16774edf26","libcubeb/src/cubeb_strings.h":"312f5c2230d9a02e369be1d991ec44a1793373046f208529b3cc54cb9a5b0610","libcubeb/src/cubeb_sun.c":"38c922ed5bf856db915cc4ec9d3283853f90a3d583ac91de6ade609b8e55f15f","libcubeb/src/cubeb_utils.cpp":"8f41899df2f5f82541f816dadcee3d18baab7a1aecf2bc6d0b382567209351aa","libcubeb/src/cubeb_utils.h":"a92b7d0f7611c41d641a35dc3a8be8d116c1f4c9d84426159b4dc772e7b9b4ba","libcubeb/src/cubeb_utils_unix.h":"2e67e39daed8ec17092a2d1a9b660a3d4e153fc351698d9e1f3d51ef974979c5","libcubeb/src/cubeb_utils_win.h":"4d7a397f475e08dd7af47fdc4003e9f78cf9058e095348eeb554135ea3c3c454","libcubeb/src/cubeb_wasapi.cpp":"4b5d98f63b7b33cf2da62d23956fb4a9caba53c4ce999afe5f4c53798d67adec","libcubeb/src/cubeb_winmm.c":"77b14d45f37efbd973ae4d563bf4ab0396e96b53bac3b36375c15517f0fb7028","libcubeb/subprojects/speex/arch.h":"2300bce68c588270cdc684dc7f01377e5e251529f4545d93771e111c56d51b0f","libcubeb/subprojects/speex/fixed_generic.h":"306ee7453677fa6067f16c79d358c6c90a9d3d008850b493cdaa59c07e6375c1","libcubeb/subprojects/speex/resample.c":"9c3a1c64ecf3750af82c980d01ea73d3682f73c332a580465d1e787e5c54cd00","libcubeb/subprojects/speex/resample_neon.h":"7d3fd7af9a1ddde22518b9c7b4419073b72b2dfa5be4c3bc8796992bc87b3da0","libcubeb/subprojects/speex/resample_sse.h":"5a196d8e2d8ab5c956f5252f09f5ddc55aee1f99b1341af3fa54a1f4c2157924","libcubeb/subprojects/speex/speex_config_types.h":"24e3ffbf29e5519611a48e5acb959645b01d166dcb4369380d5f776c3f53d4cd","libcubeb/subprojects/speex/speex_resampler.h":"7e439ec0dd30c32216b3ced17135f8992e5aaf53389d3f5996a7d900c453e65f","libcubeb/subprojects/speex/stack_alloc.h":"e8a2fc0874942d2c7177475fcc141fdd0c0156200b8a4e7656d4a20313e2e569","libcubeb/test/README.md":"1c11b038f87daf10ea78abc17bdbdd157940c241df548c24d5872d142a98c1af","libcubeb/test/common.h":"968144634f3ce627d7f6cb91d48ddc6f1fa89f481ae63f80a7cbe743989e449c","libcubeb/test/test_audio.cpp":"4dfa5e686293101541a300b04712f0cd5a32904fc1f1a71f73ca872d56050e57","libcubeb/test/test_callback_ret.cpp":"77b1bd5e86954458bde25f32bda25cd092bf69c11a9f5294ffa3d56794839a8f","libcubeb/test/test_deadlock.cpp":"0e28e59f360e27241536879d9e02e4e05291db252f66fd601577aaf723e06543","libcubeb/test/test_device_changed_callback.cpp":"d804d1da5611ef5b12abb68b17840cb19a1fa4207678dbb2fc9bdd834aed1fc2","libcubeb/test/test_devices.cpp":"0fbffbd4097898220b5e60f3bee5008dbf005f77bce33c6aa4934a5562b8d092","libcubeb/test/test_duplex.cpp":"0b37b431a1501e8d59f73c05245abe1a313bc7732e14d71e4b3ec4d375da6ce8","libcubeb/test/test_latency.cpp":"dc5af071df0ff0c4b2f6cf7b37438ac8ed9f18cc0fafffb2c685b1e82201c9f5","libcubeb/test/test_loopback.cpp":"00f1250c2012a8bd458a38dfbd80f7e93b764494595c6cd5f3bc2ea518cf1ad0","libcubeb/test/test_overload_callback.cpp":"f3ffa014a0e6f7871a023b46733f93d992ddc9b41e0974cc22a365979b6d989e","libcubeb/test/test_record.cpp":"89a884872b780005b2fb29d106b6f33ddd76b2fcae381395e17d3413153b3b89","libcubeb/test/test_resampler.cpp":"93b16b818a656f2c65060748cecea0a2577b26ac68247a2479d038630d818939","libcubeb/test/test_ring_array.cpp":"27836d716616abf8b020a710659c10ac5e1d4b64149d22cb89bd7a7a5a5669d1","libcubeb/test/test_ring_buffer.cpp":"0ac28f2de88fb4f052b8c212be680002f447a87d72695bb1fdca508145aade7f","libcubeb/test/test_sanity.cpp":"1cbb690544a3b2f4f7fda13a96862295d97837660cce927f83cec070f157f728","libcubeb/test/test_tone.cpp":"372ba4f47cd5cd481abe7ce46c0fb396cf279b83a55348d967847761b49b5367","libcubeb/test/test_utils.cpp":"e8d7a02a9096dbc0fd15d71f9849415d52958d2ed82cbc7b8507d3228e08d382","libcubeb/tools/cubeb-test.cpp":"65ba5565f00f2a9885a5623d68ec3ea67c413fd3ae0609e3a5fde338a1a8d48b","src/callbacks.rs":"a83d9a16ee66b3cd7100dd06e1f409698a727d642df0dfa797c067b5cf1def66","src/channel.rs":"02fd91384195180a56663aba87f00660c20e71fe7654c7b68d8f470173f40d5f","src/context.rs":"96bf3442b1dd40262d3088dbb6c473f5451fd91320cef93c522b40f284599803","src/device.rs":"08a4292bb35f09c129c4b6dcb85653ffe7e7aa98dee3202d47605f3a2b8c4244","src/error.rs":"406e3b843ed2d263fe677c4b34fb96a6d780a68bcb56a6f85f041d20d70227bd","src/format.rs":"d4d27790c20eab0b16592f60d5e487425a45a268cf4c74cf843c10ac91bbff4c","src/internal.rs":"c3af5f53dc7957860bf3bc0cd9737d094fb8ac000e7b40c569304cfa76a43145","src/lib.rs":"cdc36b11f18e274d10df592d216f142e05e1d22db5aac4c7e346893d6b1510db","src/log.rs":"5cf4bbffe67bd03a7c2cf269b3c548e5be45163f85a0fa7bae634d0a70599aa9","src/macros.rs":"caef13f5d23f7a3ec1a54ec3ca2390ac4ad89d521893f1d0864daf70d57a20aa","src/mixer.rs":"e72e92855614da187da6419ed0a115062a05670cb73443b2ea4313d8f5108a68","src/resampler.rs":"b16bd6a4b1179b25f2a5391133fcd4410467e6a68c0a46cf15a12d280c1862e0","src/stream.rs":"59e893d4a8f166d079cfceb9ecc2af6d71f53ee247bb9f2eb971b9563a348eb9"},"package":"33b49428acff552b1ba790649ea16a6f3d60cf74e9457a1378771a1acc12d5ee"}
\ No newline at end of file
diff --git a/third_party/rust/cubeb-sys/Cargo.toml b/third_party/rust/cubeb-sys/Cargo.toml
index 2a653cf34935..d711d7c13e38 100644
--- a/third_party/rust/cubeb-sys/Cargo.toml
+++ b/third_party/rust/cubeb-sys/Cargo.toml
@@ -11,7 +11,7 @@
 
 [package]
 name = "cubeb-sys"
-version = "0.10.2"
+version = "0.10.1"
 authors = ["Dan Glastonbury <dglastonbury@mozilla.com>"]
 build = "build.rs"
 links = "cubeb"
diff --git a/third_party/rust/cubeb-sys/build.rs b/third_party/rust/cubeb-sys/build.rs
index 509ff46c7ab0..579a68d1ade9 100644
--- a/third_party/rust/cubeb-sys/build.rs
+++ b/third_party/rust/cubeb-sys/build.rs
@@ -35,7 +35,7 @@ fn main() {
 
     if !Path::new("libcubeb/.git").exists() {
         let _ = Command::new("git")
-            .args(["submodule", "update", "--init", "--recursive"])
+            .args(&["submodule", "update", "--init", "--recursive"])
             .status();
     }
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/CMakeLists.txt b/third_party/rust/cubeb-sys/libcubeb/CMakeLists.txt
index 7ae58d44de3c..9cfae641b6a6 100644
--- a/third_party/rust/cubeb-sys/libcubeb/CMakeLists.txt
+++ b/third_party/rust/cubeb-sys/libcubeb/CMakeLists.txt
@@ -371,7 +371,6 @@ if(DOXYGEN_FOUND)
     ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/docs/Doxyfile
     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs
     COMMENT "Generating API documentation with Doxygen" VERBATIM)
-  install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs/html/ TYPE DOC)
 endif()
 
 if(BUILD_TESTS)
@@ -383,6 +382,7 @@ if(BUILD_TESTS)
     target_link_libraries(test_${NAME} PRIVATE cubeb gtest_main)
     add_test(${NAME} test_${NAME} --gtest_death_test_style=threadsafe)
     add_sanitizers(test_${NAME})
+    install(TARGETS test_${NAME})
   endmacro(cubeb_add_test)
 
   cubeb_add_test(sanity)
@@ -397,6 +397,7 @@ if(BUILD_TESTS)
   target_link_libraries(test_resampler PRIVATE cubeb gtest_main speex)
   add_test(resampler test_resampler)
   add_sanitizers(test_resampler)
+  install(TARGETS test_resampler)
 
   cubeb_add_test(duplex)
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/INSTALL.md b/third_party/rust/cubeb-sys/libcubeb/INSTALL.md
index 4f83a6520018..4e941b9f8d6b 100644
--- a/third_party/rust/cubeb-sys/libcubeb/INSTALL.md
+++ b/third_party/rust/cubeb-sys/libcubeb/INSTALL.md
@@ -1,12 +1,13 @@
 # Build instructions for libcubeb
 
-You must have CMake v3.14 or later installed.
+You must have CMake v3.1 or later installed.
 
 1. `git clone --recursive https://github.com/mozilla/cubeb.git`
-2. `cd cubeb`
-3. `cmake -B ./build .`
-4. `cmake --build ./build`
-5. `cd build && ctest`
+2. `mkdir cubeb-build`
+3. `cd cubeb-build`
+4. `cmake ../cubeb`
+5. `cmake --build .`
+6. `ctest`
 
 # Windows build notes
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/docs/Doxyfile.in b/third_party/rust/cubeb-sys/libcubeb/docs/Doxyfile.in
index 8ec863be8ea0..2b52bcefc9fc 100644
--- a/third_party/rust/cubeb-sys/libcubeb/docs/Doxyfile.in
+++ b/third_party/rust/cubeb-sys/libcubeb/docs/Doxyfile.in
@@ -1,5 +1,5 @@
-PROJECT_NAME           = @PROJECT_NAME@
-PROJECT_NUMBER         = @PROJECT_VERSION@
+PROJECT_NAME           = @PACKAGE@
+PROJECT_NUMBER         = @VERSION@
 OUTPUT_DIRECTORY       = .
 JAVADOC_AUTOBRIEF      = YES
 OPTIMIZE_OUTPUT_FOR_C  = YES
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb-sles.h b/third_party/rust/cubeb-sys/libcubeb/src/cubeb-sles.h
new file mode 100644
index 000000000000..ca93543c0b62
--- /dev/null
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb-sles.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright © 2016 Mozilla Foundation
+ *
+ * This program is made available under an ISC-style license.  See the
+ * accompanying file LICENSE for details.
+ */
+
+#ifndef _CUBEB_SLES_H_
+#define _CUBEB_SLES_H_
+#include <SLES/OpenSLES.h>
+
+static SLresult
+cubeb_get_sles_engine(SLObjectItf * pEngine, SLuint32 numOptions,
+                      const SLEngineOption * pEngineOptions,
+                      SLuint32 numInterfaces,
+                      const SLInterfaceID * pInterfaceIds,
+                      const SLboolean * pInterfaceRequired)
+{
+  return slCreateEngine(pEngine, numOptions, pEngineOptions, numInterfaces,
+                        pInterfaceIds, pInterfaceRequired);
+}
+
+static void
+cubeb_destroy_sles_engine(SLObjectItf * self)
+{
+  if (*self != NULL) {
+    (**self)->Destroy(*self);
+    *self = NULL;
+  }
+}
+
+static SLresult
+cubeb_realize_sles_engine(SLObjectItf self)
+{
+  return (*self)->Realize(self, SL_BOOLEAN_FALSE);
+}
+
+#endif
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb.c b/third_party/rust/cubeb-sys/libcubeb/src/cubeb.c
index ea2104698b5a..b3d32eea3d8c 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb.c
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb.c
@@ -632,14 +632,14 @@ cubeb_enumerate_devices(cubeb * context, cubeb_device_type devtype,
   int rv;
   if ((devtype & (CUBEB_DEVICE_TYPE_INPUT | CUBEB_DEVICE_TYPE_OUTPUT)) == 0)
     return CUBEB_ERROR_INVALID_PARAMETER;
-  if (context == NULL || collection == NULL)
+  if (collection == NULL)
     return CUBEB_ERROR_INVALID_PARAMETER;
   if (!context->ops->enumerate_devices)
     return CUBEB_ERROR_NOT_SUPPORTED;
 
   rv = context->ops->enumerate_devices(context, devtype, collection);
 
-  if (cubeb_log_get_callback()) {
+  if (g_cubeb_log_callback) {
     for (size_t i = 0; i < collection->count; i++) {
       log_device(&collection->device[i]);
     }
@@ -701,11 +701,21 @@ cubeb_set_log_callback(cubeb_log_level log_level,
     return CUBEB_ERROR_INVALID_PARAMETER;
   }
 
-  if (cubeb_log_get_callback() && log_callback) {
+  if (g_cubeb_log_callback && log_callback) {
     return CUBEB_ERROR_NOT_SUPPORTED;
   }
 
-  cubeb_log_set(log_level, log_callback);
+  g_cubeb_log_callback = log_callback;
+  g_cubeb_log_level = log_level;
+
+  // Logging a message here allows to initialize the asynchronous logger from a
+  // thread that is not the audio rendering thread, and especially to not
+  // initialize it the first time we find a verbose log, which is often in the
+  // audio rendering callback, that runs from the audio rendering thread, and
+  // that is high priority, and that we don't want to block.
+  if (log_level >= CUBEB_LOG_VERBOSE) {
+    ALOGV("Starting cubeb log");
+  }
 
   return CUBEB_OK;
 }
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_aaudio.cpp b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_aaudio.cpp
index 2ac67c2e6c61..6076f1d21816 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_aaudio.cpp
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_aaudio.cpp
@@ -463,11 +463,10 @@ aaudio_destroy(cubeb * ctx)
   if (ctx->state.notifier.joinable()) {
     ctx->state.notifier.join();
   }
-#ifndef DISABLE_LIBAAUDIO_DLOPEN
+
   if (ctx->libaaudio) {
     dlclose(ctx->libaaudio);
   }
-#endif
   delete ctx;
 }
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_alsa.c b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_alsa.c
index 7481c1668ef8..b1464d154cc7 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_alsa.c
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_alsa.c
@@ -10,7 +10,6 @@
 #define _XOPEN_SOURCE 500
 #include "cubeb-internal.h"
 #include "cubeb/cubeb.h"
-#include "cubeb_tracing.h"
 #include <alsa/asoundlib.h>
 #include <assert.h>
 #include <dlfcn.h>
@@ -580,14 +579,10 @@ alsa_run_thread(void * context)
   cubeb * ctx = context;
   int r;
 
-  CUBEB_REGISTER_THREAD("cubeb rendering thread");
-
   do {
     r = alsa_run(ctx);
   } while (r >= 0);
 
-  CUBEB_UNREGISTER_THREAD();
-
   return NULL;
 }
 
@@ -962,11 +957,11 @@ alsa_destroy(cubeb * ctx)
     WRAP(snd_config_delete)(ctx->local_config);
     pthread_mutex_unlock(&cubeb_alsa_mutex);
   }
-#ifndef DISABLE_LIBASOUND_DLOPEN
+
   if (ctx->libasound) {
     dlclose(ctx->libasound);
   }
-#endif
+
   free(ctx);
 }
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_jack.cpp b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_jack.cpp
index d851c79f9095..3b3056c642af 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_jack.cpp
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_jack.cpp
@@ -788,10 +788,10 @@ cbjack_destroy(cubeb * context)
 
   if (context->jack_client != NULL)
     WRAP(jack_client_close)(context->jack_client);
-#ifndef DISABLE_LIBJACK_DLOPEN
+
   if (context->libjack)
     dlclose(context->libjack);
-#endif
+
   free(context);
 }
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.cpp b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.cpp
index 0d86518b4ed7..bd34af16621e 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.cpp
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.cpp
@@ -8,7 +8,6 @@
 
 #include "cubeb_log.h"
 #include "cubeb_ringbuffer.h"
-#include "cubeb_tracing.h"
 #include <cstdarg>
 #ifdef _WIN32
 #include <windows.h>
@@ -16,8 +15,8 @@
 #include <time.h>
 #endif
 
-std::atomic<cubeb_log_level> g_cubeb_log_level;
-std::atomic<cubeb_log_callback> g_cubeb_log_callback;
+cubeb_log_level g_cubeb_log_level;
+cubeb_log_callback g_cubeb_log_callback;
 
 /** The maximum size of a log message, after having been formatted. */
 const size_t CUBEB_LOG_MESSAGE_MAX_SIZE = 256;
@@ -70,11 +69,10 @@ public:
   void run()
   {
     std::thread([this]() {
-      CUBEB_REGISTER_THREAD("cubeb_log");
       while (true) {
         cubeb_log_message msg;
         while (msg_queue.dequeue(&msg, 1)) {
-          cubeb_log_internal_no_format(msg.get());
+          LOGV("%s", msg.get());
         }
 #ifdef _WIN32
         Sleep(CUBEB_LOG_BATCH_PRINT_INTERVAL_MS);
@@ -89,7 +87,6 @@ public:
         } while (remainder.tv_sec || remainder.tv_nsec);
 #endif
       }
-      CUBEB_UNREGISTER_THREAD();
     }).detach();
   }
   // Tell the underlying queue the producer thread has changed, so it does not
@@ -108,26 +105,12 @@ private:
   lock_free_queue<cubeb_log_message> msg_queue;
 };
 
-void
-cubeb_log_internal(char const * file, uint32_t line, char const * fmt, ...)
-{
-  va_list args;
-  va_start(args, fmt);
-  char msg[CUBEB_LOG_MESSAGE_MAX_SIZE];
-  vsnprintf(msg, CUBEB_LOG_MESSAGE_MAX_SIZE, fmt, args);
-  g_cubeb_log_callback.load()("%s:%d:%s", file, line, msg);
-  va_end(args);
-}
-
-void
-cubeb_log_internal_no_format(const char * msg)
-{
-  g_cubeb_log_callback.load()(msg);
-}
-
 void
 cubeb_async_log(char const * fmt, ...)
 {
+  if (!g_cubeb_log_callback) {
+    return;
+  }
   // This is going to copy a 256 bytes array around, which is fine.
   // We don't want to allocate memory here, because this is made to
   // be called from a real-time callback.
@@ -147,22 +130,3 @@ cubeb_async_log_reset_threads(void)
   }
   cubeb_async_logger::get().reset_producer_thread();
 }
-
-void
-cubeb_log_set(cubeb_log_level log_level, cubeb_log_callback log_callback)
-{
-  g_cubeb_log_level = log_level;
-  g_cubeb_log_callback = log_callback;
-}
-
-cubeb_log_level
-cubeb_log_get_level()
-{
-  return g_cubeb_log_level;
-}
-
-cubeb_log_callback
-cubeb_log_get_callback()
-{
-  return g_cubeb_log_callback;
-}
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.h b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.h
index 54ddbd308562..4380da4391df 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.h
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_log.h
@@ -30,16 +30,8 @@ extern "C" {
   (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)
 #endif
 
-void
-cubeb_log_set(cubeb_log_level log_level, cubeb_log_callback log_callback);
-cubeb_log_level
-cubeb_log_get_level(void);
-cubeb_log_callback
-cubeb_log_get_callback(void);
-void
-cubeb_log_internal_no_format(const char * msg);
-void
-cubeb_log_internal(const char * filename, uint32_t line, const char * fmt, ...);
+extern cubeb_log_level g_cubeb_log_level;
+extern cubeb_log_callback g_cubeb_log_callback PRINTF_FORMAT(1, 2);
 void
 cubeb_async_log(const char * fmt, ...);
 void
@@ -54,21 +46,17 @@ cubeb_async_log_reset_threads(void);
 
 #define LOG_INTERNAL(level, fmt, ...)                                          \
   do {                                                                         \
-    if (cubeb_log_get_level() <= level && cubeb_log_get_callback()) {          \
-      cubeb_log_internal(__FILENAME__, __LINE__, fmt, ##__VA_ARGS__);          \
+    if (g_cubeb_log_callback && level <= g_cubeb_log_level) {                  \
+      g_cubeb_log_callback("%s:%d: " fmt "\n", __FILENAME__, __LINE__,         \
+                           ##__VA_ARGS__);                                     \
     }                                                                          \
   } while (0)
 
-#define ALOG_INTERNAL(level, fmt, ...)                                         \
+/* Asynchronous verbose logging, to log in real-time callbacks. */
+/* Should not be used on android due to the use of global/static variables. */
+#define ALOGV(fmt, ...)                                                        \
   do {                                                                         \
-    if (cubeb_log_get_level() <= level && cubeb_log_get_callback()) {          \
-      cubeb_async_log(fmt, ##__VA_ARGS__);                                     \
-    }                                                                          \
+    cubeb_async_log(fmt, ##__VA_ARGS__);                                       \
   } while (0)
 
-/* Asynchronous logging macros to log in real-time callbacks. */
-/* Should not be used on android due to the use of global/static variables. */
-#define ALOGV(msg, ...) ALOG_INTERNAL(CUBEB_LOG_VERBOSE, msg, ##__VA_ARGS__)
-#define ALOG(msg, ...) ALOG_INTERNAL(CUBEB_LOG_NORMAL, msg, ##__VA_ARGS__)
-
 #endif // CUBEB_LOG
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_opensl.c b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_opensl.c
index efac34d24e1b..e5969984bb4b 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_opensl.c
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_opensl.c
@@ -23,6 +23,7 @@
 #endif
 #include "android/cubeb-output-latency.h"
 #include "cubeb-internal.h"
+#include "cubeb-sles.h"
 #include "cubeb/cubeb.h"
 #include "cubeb_android.h"
 #include "cubeb_array_queue.h"
@@ -727,14 +728,14 @@ opensl_init(cubeb ** context, char const * context_name)
   const SLEngineOption opt[] = {{SL_ENGINEOPTION_THREADSAFE, SL_BOOLEAN_TRUE}};
 
   SLresult res;
-  res = f_slCreateEngine(&ctx->engObj, 1, opt, 0, NULL, NULL);
+  res = cubeb_get_sles_engine(&ctx->engObj, 1, opt, 0, NULL, NULL);
 
   if (res != SL_RESULT_SUCCESS) {
     opensl_destroy(ctx);
     return CUBEB_ERROR;
   }
 
-  res = (*ctx->engObj)->Realize(ctx->engObj, SL_BOOLEAN_FALSE);
+  res = cubeb_realize_sles_engine(ctx->engObj);
   if (res != SL_RESULT_SUCCESS) {
     opensl_destroy(ctx);
     return CUBEB_ERROR;
@@ -795,12 +796,10 @@ opensl_get_max_channel_count(cubeb * ctx, uint32_t * max_channels)
 static void
 opensl_destroy(cubeb * ctx)
 {
-  if (ctx->outmixObj) {
+  if (ctx->outmixObj)
     (*ctx->outmixObj)->Destroy(ctx->outmixObj);
-  }
-  if (ctx->engObj) {
-    (*ctx->engObj)->Destroy(ctx->engObj);
-  }
+  if (ctx->engObj)
+    cubeb_destroy_sles_engine(&ctx->engObj);
   dlclose(ctx->lib);
   if (ctx->p_output_latency_function)
     cubeb_output_latency_unload_method(ctx->p_output_latency_function);
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_oss.c b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_oss.c
index 8718fa306754..88f8582a05eb 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_oss.c
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_oss.c
@@ -14,7 +14,6 @@
 #include "cubeb/cubeb.h"
 #include "cubeb_mixer.h"
 #include "cubeb_strings.h"
-#include "cubeb_tracing.h"
 #include <assert.h>
 #include <ctype.h>
 #include <errno.h>
@@ -976,8 +975,6 @@ oss_io_routine(void * arg)
   cubeb_state new_state;
   int stopped;
 
-  CUBEB_REGISTER_THREAD("cubeb rendering thread");
-
   do {
     pthread_mutex_lock(&s->mtx);
     if (s->destroying) {
@@ -1008,9 +1005,6 @@ oss_io_routine(void * arg)
   pthread_mutex_lock(&s->mtx);
   s->thread_created = false;
   pthread_mutex_unlock(&s->mtx);
-
-  CUBEB_UNREGISTER_THREAD();
-
   return NULL;
 }
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_pulse.c b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_pulse.c
index 686640525045..13f679164007 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_pulse.c
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_pulse.c
@@ -804,11 +804,10 @@ pulse_destroy(cubeb * ctx)
   if (ctx->device_ids) {
     cubeb_strings_destroy(ctx->device_ids);
   }
-#ifndef DISABLE_LIBPULSE_DLOPEN
+
   if (ctx->libpulse) {
     dlclose(ctx->libpulse);
   }
-#endif
   free(ctx->default_sink_info);
   free(ctx);
 }
@@ -1025,7 +1024,7 @@ pulse_stream_init(cubeb * context, cubeb_stream ** stream,
     return CUBEB_ERROR;
   }
 
-  if (cubeb_log_get_level()) {
+  if (g_cubeb_log_level) {
     if (output_stream_params) {
       const pa_buffer_attr * output_att;
       output_att = WRAP(pa_stream_get_buffer_attr)(stm->output_stream);
@@ -1578,7 +1577,7 @@ pulse_subscribe_callback(pa_context * ctx, pa_subscription_event_type_t t,
   case PA_SUBSCRIPTION_EVENT_SOURCE:
   case PA_SUBSCRIPTION_EVENT_SINK:
 
-    if (cubeb_log_get_level()) {
+    if (g_cubeb_log_level) {
       if ((t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) ==
               PA_SUBSCRIPTION_EVENT_SOURCE &&
           (t & PA_SUBSCRIPTION_EVENT_TYPE_MASK) ==
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_resampler_internal.h b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_resampler_internal.h
index 285f24dd0b75..b271afc15450 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_resampler_internal.h
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_resampler_internal.h
@@ -91,7 +91,6 @@ public:
     uint32_t to_keep = min_buffered_audio_frame(sample_rate);
     uint32_t available = samples_to_frames(internal_input_buffer.length());
     if (available > to_keep) {
-      ALOGV("Dropping %u frames", available - to_keep);
       internal_input_buffer.pop(nullptr,
                                 frames_to_samples(available - to_keep));
     }
@@ -326,7 +325,6 @@ public:
     uint32_t available = samples_to_frames(resampling_in_buffer.length());
     uint32_t to_keep = min_buffered_audio_frame(source_rate);
     if (available > to_keep) {
-      ALOGV("Dropping %u frames", available - to_keep);
       resampling_in_buffer.pop(nullptr, frames_to_samples(available - to_keep));
     }
   }
@@ -472,7 +470,6 @@ public:
     size_t available = samples_to_frames(delay_input_buffer.length());
     uint32_t to_keep = min_buffered_audio_frame(sample_rate);
     if (available > to_keep) {
-      ALOGV("Dropping %u frames", available - to_keep);
       delay_input_buffer.pop(nullptr, frames_to_samples(available - to_keep));
     }
   }
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sndio.c b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sndio.c
index 665110b8f885..5e11725ece3e 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sndio.c
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sndio.c
@@ -6,7 +6,6 @@
  */
 #include "cubeb-internal.h"
 #include "cubeb/cubeb.h"
-#include "cubeb_tracing.h"
 #include <assert.h>
 #include <dlfcn.h>
 #include <inttypes.h>
@@ -162,14 +161,10 @@ sndio_mainloop(void * arg)
   size_t pstart = 0, pend = 0, rstart = 0, rend = 0;
   long nfr;
 
-  CUBEB_REGISTER_THREAD("cubeb rendering thread");
-
   nfds = WRAP(sio_nfds)(s->hdl);
   pfds = calloc(nfds, sizeof(struct pollfd));
-  if (pfds == NULL) {
-    CUBEB_UNREGISTER_THREAD();
+  if (pfds == NULL)
     return NULL;
-  }
 
   DPR("sndio_mainloop()\n");
   s->state_cb(s, s->arg, CUBEB_STATE_STARTED);
@@ -177,7 +172,6 @@ sndio_mainloop(void * arg)
   if (!WRAP(sio_start)(s->hdl)) {
     pthread_mutex_unlock(&s->mtx);
     free(pfds);
-    CUBEB_UNREGISTER_THREAD();
     return NULL;
   }
   DPR("sndio_mainloop(), started\n");
@@ -306,7 +300,6 @@ sndio_mainloop(void * arg)
   pthread_mutex_unlock(&s->mtx);
   s->state_cb(s, s->arg, state);
   free(pfds);
-  CUBEB_UNREGISTER_THREAD();
   return NULL;
 }
 
@@ -369,10 +362,8 @@ static void
 sndio_destroy(cubeb * context)
 {
   DPR("sndio_destroy()\n");
-#ifndef DISABLE_LIBSNDIO_DLOPEN
   if (context->libsndio)
     dlclose(context->libsndio);
-#endif
   free(context);
 }
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sun.c b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sun.c
index d3dcb12ff36a..3b7bef71d6ef 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sun.c
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_sun.c
@@ -6,7 +6,6 @@
  */
 #include "cubeb-internal.h"
 #include "cubeb/cubeb.h"
-#include "cubeb_tracing.h"
 #include <fcntl.h>
 #include <limits.h>
 #include <pthread.h>
@@ -429,8 +428,6 @@ sun_io_routine(void * arg)
   size_t read_ofs = 0;
   int drain = 0;
 
-  CUBEB_REGISTER_THREAD("cubeb rendering thread");
-
   s->state_cb(s, s->user_ptr, CUBEB_STATE_STARTED);
   while (state != CUBEB_STATE_ERROR) {
     pthread_mutex_lock(&s->mutex);
@@ -508,7 +505,6 @@ sun_io_routine(void * arg)
     }
   }
   s->state_cb(s, s->user_ptr, state);
-  CUBEB_UNREGISTER_THREAD();
   return NULL;
 }
 
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_tracing.h b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_tracing.h
deleted file mode 100644
index 49944cdf6797..000000000000
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_tracing.h
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright © 2022 Mozilla Foundation
- *
- * This program is made available under an ISC-style license.  See the
- * accompanying file LICENSE for details.
- */
-
-#ifndef CUBEB_TRACING_H
-#define CUBEB_TRACING_H
-
-/* Empty header to allow hooking up a frame profiler. */
-
-// To be called once on a thread to register for tracing.
-#define CUBEB_REGISTER_THREAD(name)
-// To be called once before a registered threads exits.
-#define CUBEB_UNREGISTER_THREAD()
-// Insert a tracing marker, with a particular name.
-// Phase can be 'x': instant marker, start time but no duration
-//              'b': beginning of a marker with a duration
-//              'e': end of a marker with a duration
-#define CUBEB_TRACE(name, phase)
-
-#endif // CUBEB_TRACING_H
diff --git a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_wasapi.cpp b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_wasapi.cpp
index 7767b3a249ce..039ad76c005c 100644
--- a/third_party/rust/cubeb-sys/libcubeb/src/cubeb_wasapi.cpp
+++ b/third_party/rust/cubeb-sys/libcubeb/src/cubeb_wasapi.cpp
@@ -30,7 +30,6 @@
 #include "cubeb_mixer.h"
 #include "cubeb_resampler.h"
 #include "cubeb_strings.h"
-#include "cubeb_tracing.h"
 #include "cubeb_utils.h"
 
 // Windows 10 exposes the IAudioClient3 interface to create low-latency streams.
@@ -224,11 +223,6 @@ private:
   com_heap_ptr<wchar_t> capture_comms_id;
 };
 
-struct AutoRegisterThread {
-  AutoRegisterThread(const char * name) { CUBEB_REGISTER_THREAD(name); }
-  ~AutoRegisterThread() { CUBEB_UNREGISTER_THREAD(); }
-};
-
 int
 wasapi_stream_stop(cubeb_stream * stm);
 int
@@ -469,7 +463,6 @@ public:
 private:
   static unsigned int __stdcall thread_proc(LPVOID args)
   {
-    AutoRegisterThread raii("WASAPI device notification thread");
     XASSERT(args);
     auto mdn = static_cast<monitor_device_notifications *>(args);
     mdn->notification_thread_loop();
@@ -1344,8 +1337,6 @@ handle_emergency_bailout(cubeb_stream * stm)
 
 static unsigned int __stdcall wasapi_stream_render_loop(LPVOID stream)
 {
-  AutoRegisterThread raii("cubeb rendering thread");
-
   cubeb_stream * stm = static_cast<cubeb_stream *>(stream);
 
   bool is_playing = true;
diff --git a/third_party/rust/cubeb-sys/src/log.rs b/third_party/rust/cubeb-sys/src/log.rs
index d1a1c4e4480f..41ab494370aa 100644
--- a/third_party/rust/cubeb-sys/src/log.rs
+++ b/third_party/rust/cubeb-sys/src/log.rs
@@ -21,9 +21,9 @@ extern "C" {
         log_callback: cubeb_log_callback,
     ) -> c_int;
 
-    pub fn cubeb_log_get_callback() -> cubeb_log_callback;
-    pub fn cubeb_log_get_level() -> cubeb_log_level;
+    pub static g_cubeb_log_level: cubeb_log_level;
+    pub static g_cubeb_log_callback: cubeb_log_callback;
 
-    pub fn cubeb_async_log_reset_threads(_: c_void);
-    pub fn cubeb_async_log(msg: *const c_char, ...);
+    pub fn cubeb_async_log_reset_threads(_: c_void) -> c_void;
+    pub fn cubeb_async_log(msg: *const c_char, ...) -> c_void;
 }
diff --git a/third_party/rust/cubeb/.cargo-checksum.json b/third_party/rust/cubeb/.cargo-checksum.json
index f801c77924a1..15e4b426ab27 100644
--- a/third_party/rust/cubeb/.cargo-checksum.json
+++ b/third_party/rust/cubeb/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.lock":"a8540db496638cee48d1ac390acbb448bb93946617350476ca03332cbd47b35d","Cargo.toml":"52d5c0de45c85c06dc4c3debf751f96a8f3c2ccaabe6353702cce46c6664d3fb","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","README.md":"408c573ec240927cf5b9c036098e94e374ec41f71991415422586f450586b214","examples/common/mod.rs":"3363405f3d21ad120617473a0288c337a7b15eb79f5bb1035cfd258bd9bedf2b","examples/devices.rs":"ff5dcd588e7036165c4b4c20ec355d036e0ae90cf88b3b0f5cd86621fe2ce61d","examples/tone.rs":"8f5f9851b6d99f6f16c597fcb9312e3ef81769cbfb89341d2ea2522ca2e2214e","src/context.rs":"176f0923c13245acdc3934f649608fea1c17ad254daa3396d8929f38374e932e","src/frame.rs":"649cedaa2e9e1c5d2c3146bd0d66fd28bb230e68142493a9ea7dbab4a15f5adc","src/lib.rs":"58c78cad9541ebaef0ea96c67bc1db7d25e68e4e3d2f9a90f371c473e25c181f","src/sample.rs":"0d4645cc1d6ac26f198f6f59a44e193422e5646ecef0de46224653bef79d1a10","src/stream.rs":"0f51eab71d08685afdd0e748b85513541b9a612da1cad329c8c897dc0f79607c"},"package":"c317e12df33d2b71fecaa9924706957a1833ada5e83d81fb336b33b63b9e0bdc"}
\ No newline at end of file
+{"files":{"Cargo.lock":"b5619b3fbd40526e5ca797cc26134375b4fe94b476428f34aed791ffe9f07ee2","Cargo.toml":"42c32a8a24c2ed9c317ee83c73597080c029f1084d9a7924cc3f37d498c16056","LICENSE":"8c044baa5d883274736eeece0b955249076c2697b826e576fce59496235b2cf5","README.md":"408c573ec240927cf5b9c036098e94e374ec41f71991415422586f450586b214","examples/common/mod.rs":"3363405f3d21ad120617473a0288c337a7b15eb79f5bb1035cfd258bd9bedf2b","examples/devices.rs":"ff5dcd588e7036165c4b4c20ec355d036e0ae90cf88b3b0f5cd86621fe2ce61d","examples/tone.rs":"8f5f9851b6d99f6f16c597fcb9312e3ef81769cbfb89341d2ea2522ca2e2214e","src/context.rs":"2d29d9704af311996bf9702519ef5bb0e9d3ada032d22070db7dbb6e8987859e","src/frame.rs":"649cedaa2e9e1c5d2c3146bd0d66fd28bb230e68142493a9ea7dbab4a15f5adc","src/lib.rs":"c86f594be459cbef72b05d60f4124d0844ba13d5d07fbe11b3d7438cd52a5a5e","src/log.rs":"704faeb31934dad6bc6d02e01caa85118754209bd559d30d03fcfa5cb8c1603c","src/sample.rs":"0d4645cc1d6ac26f198f6f59a44e193422e5646ecef0de46224653bef79d1a10","src/stream.rs":"32c4169de7b6f5d5c5016c1cb6c70fbb20bc9155979630b1fc4c57636950dfe6"},"package":"53051f86ed8cf5a6771704e80147266f32bdf05cc09089da304484a1c612bb97"}
\ No newline at end of file
diff --git a/third_party/rust/cubeb/Cargo.lock b/third_party/rust/cubeb/Cargo.lock
index a53f7d4eb7d6..016444f715d6 100644
--- a/third_party/rust/cubeb/Cargo.lock
+++ b/third_party/rust/cubeb/Cargo.lock
@@ -25,16 +25,16 @@ dependencies = [
 
 [[package]]
 name = "cubeb"
-version = "0.10.2"
+version = "0.10.1"
 dependencies = [
  "cubeb-core",
 ]
 
 [[package]]
 name = "cubeb-core"
-version = "0.10.2"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a15a431deb277cfeea747c4e0785a6c1094a572c421eba893a07aa65942122d"
+checksum = "48c0ac573dc2e393c12e4b829d6e17bbb7a1f95b288043ee47ef251097ddb094"
 dependencies = [
  "bitflags",
  "cubeb-sys",
@@ -42,9 +42,9 @@ dependencies = [
 
 [[package]]
 name = "cubeb-sys"
-version = "0.10.2"
+version = "0.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f811de8781e63bd5060f5dbef421fea188737c5856e3fa3aa38cd39f4ecab3a2"
+checksum = "33b49428acff552b1ba790649ea16a6f3d60cf74e9457a1378771a1acc12d5ee"
 dependencies = [
  "cmake",
  "pkg-config",
diff --git a/third_party/rust/cubeb/Cargo.toml b/third_party/rust/cubeb/Cargo.toml
index 01ea9b4d03a2..364ad7fd4bb6 100644
--- a/third_party/rust/cubeb/Cargo.toml
+++ b/third_party/rust/cubeb/Cargo.toml
@@ -11,7 +11,7 @@
 
 [package]
 name = "cubeb"
-version = "0.10.2"
+version = "0.10.1"
 authors = ["Dan Glastonbury <dglastonbury@mozilla.com>"]
 description = """
 Bindings to libcubeb for interacting with system audio from rust.
@@ -24,7 +24,7 @@ license = "ISC"
 repository = "https://github.com/mozilla/cubeb-rs"
 
 [dependencies.cubeb-core]
-version = "0.10.2"
+version = "0.10.1"
 
 [features]
 gecko-in-tree = ["cubeb-core/gecko-in-tree"]
diff --git a/third_party/rust/cubeb/src/context.rs b/third_party/rust/cubeb/src/context.rs
index 6b9d8fc03da2..43900955b28a 100644
--- a/third_party/rust/cubeb/src/context.rs
+++ b/third_party/rust/cubeb/src/context.rs
@@ -1,7 +1,6 @@
 use std::ffi::CString;
 use {Context, Result};
 
-/// Initialize a new cubeb [`Context`]
 pub fn init<T: Into<Vec<u8>>>(name: T) -> Result<Context> {
     let name = CString::new(name)?;
 
diff --git a/third_party/rust/cubeb/src/lib.rs b/third_party/rust/cubeb/src/lib.rs
index 7e9764941b67..9d2c8a90796d 100644
--- a/third_party/rust/cubeb/src/lib.rs
+++ b/third_party/rust/cubeb/src/lib.rs
@@ -10,8 +10,6 @@
 //! expose the internal interfaces, so isn't suitable for extending
 //! libcubeb. See [cubeb-pulse-rs][2] for an example of extending
 //! libcubeb via implementing a cubeb backend in rust.
-//!
-//! To get started, have a look at the [`StreamBuilder`]
 
 // Copyright © 2017-2018 Mozilla Foundation
 //
@@ -22,6 +20,8 @@ extern crate cubeb_core;
 
 mod context;
 mod frame;
+#[macro_use]
+mod log;
 mod sample;
 mod stream;
 
diff --git a/third_party/rust/cubeb/src/log.rs b/third_party/rust/cubeb/src/log.rs
new file mode 100644
index 000000000000..eb0170d94791
--- /dev/null
+++ b/third_party/rust/cubeb/src/log.rs
@@ -0,0 +1,59 @@
+// Copyright © 2017-2018 Mozilla Foundation
+//
+// This program is made available under an ISC-style license.  See the
+// accompanying file LICENSE for details.
+
+#[macro_export]
+macro_rules! cubeb_log_internal {
+    ($level: expr, $msg: expr) => {
+        #[allow(unused_unsafe)]
+        unsafe {
+            if $level <= $crate::ffi::g_cubeb_log_level.into() {
+                cubeb_log_internal!(__INTERNAL__ $msg);
+            }
+        }
+    };
+    ($level: expr, $fmt: expr, $($arg: expr),+) => {
+        #[allow(unused_unsafe)]
+        unsafe {
+            if $level <= $crate::ffi::g_cubeb_log_level.into() {
+                cubeb_log_internal!(__INTERNAL__ format!($fmt, $($arg),*));
+            }
+        }
+    };
+    (__INTERNAL__ $msg: expr) => {
+        if let Some(log_callback) = $crate::ffi::g_cubeb_log_callback {
+            let cstr = ::std::ffi::CString::new(format!("{}:{}: {}\n", file!(), line!(), $msg)).unwrap();
+            log_callback(cstr.as_ptr());
+        }
+    }
+}
+
+#[macro_export]
+macro_rules! cubeb_logv {
+    ($msg: expr) => (cubeb_log_internal!($crate::LogLevel::Verbose, $msg));
+    ($fmt: expr, $($arg: expr),+) => (cubeb_log_internal!($crate::LogLevel::Verbose, $fmt, $($arg),*));
+}
+
+#[macro_export]
+macro_rules! cubeb_log {
+    ($msg: expr) => (cubeb_log_internal!($crate::LogLevel::Normal, $msg));
+    ($fmt: expr, $($arg: expr),+) => (cubeb_log_internal!($crate::LogLevel::Normal, $fmt, $($arg),*));
+}
+
+#[cfg(test)]
+mod tests {
+    #[test]
+    fn test_normal_logging() {
+        cubeb_log!("This is log at normal level");
+        cubeb_log!("{} Formatted log", 1);
+        cubeb_log!("{} Formatted {} log {}", 1, 2, 3);
+    }
+
+    #[test]
+    fn test_verbose_logging() {
+        cubeb_logv!("This is a log at verbose level");
+        cubeb_logv!("{} Formatted log", 1);
+        cubeb_logv!("{} Formatted {} log {}", 1, 2, 3);
+    }
+}
diff --git a/third_party/rust/cubeb/src/stream.rs b/third_party/rust/cubeb/src/stream.rs
index 33c37fd6cbbf..e8ca7d5e2112 100644
--- a/third_party/rust/cubeb/src/stream.rs
+++ b/third_party/rust/cubeb/src/stream.rs
@@ -3,6 +3,61 @@
 // This program is made available under an ISC-style license.  See the
 // accompanying file LICENSE for details.
 
+//! Stream Functions
+//!
+//! # Example
+//! ```no_run
+//! extern crate cubeb;
+//! use std::thread;
+//! use std::time::Duration;
+//!
+//! type Frame = cubeb::MonoFrame<f32>;
+//!
+//! fn main() {
+//!     let ctx = cubeb::init("Cubeb tone example").unwrap();
+//!
+//!     let params = cubeb::StreamParamsBuilder::new()
+//!         .format(cubeb::SampleFormat::Float32LE)
+//!         .rate(44_100)
+//!         .channels(1)
+//!         .layout(cubeb::ChannelLayout::MONO)
+//!         .prefs(cubeb::StreamPrefs::NONE)
+//!         .take();
+//!
+//!     let phase_inc = 440.0 / 44_100.0;
+//!     let mut phase = 0.0;
+//!     let volume = 0.25;
+//!
+//!     let mut builder = cubeb::StreamBuilder::<Frame>::new();
+//!     builder
+//!         .name("Cubeb Square Wave")
+//!         .default_output(&params)
+//!         .latency(0x1000)
+//!         .data_callback(move |_, output| {
+//!             // Generate a square wave
+//!             for x in output.iter_mut() {
+//!                 x.m = if phase < 0.5 { volume } else { -volume };
+//!                 phase = (phase + phase_inc) % 1.0;
+//!             }
+//!
+//!             output.len() as isize
+//!         })
+//!         .state_callback(|state| {
+//!             println!("stream {:?}", state);
+//!         });
+//!     let stream = builder.init(&ctx).expect("Failed to create stream.");
+//!
+//!     // Start playback
+//!     stream.start().unwrap();
+//!
+//!     // Play for 1/2 second
+//!     thread::sleep(Duration::from_millis(500));
+//!
+//!     // Shutdown
+//!     stream.stop().unwrap();
+//! }
+//! ```
+
 use cubeb_core;
 use ffi;
 use std::ffi::CString;
@@ -13,38 +68,8 @@ use std::slice::{from_raw_parts, from_raw_parts_mut};
 use std::{ops, panic, ptr};
 use {ContextRef, DeviceId, Error, Result, State, StreamParamsRef};
 
-/// User supplied data callback.
-///
-/// - Calling other cubeb functions from this callback is unsafe.
-/// - The code in the callback should be non-blocking.
-/// - Returning less than the number of frames this callback asks for or
-///   provides puts the stream in drain mode. This callback will not be called
-///   again, and the state callback will be called with CUBEB_STATE_DRAINED when
-///   all the frames have been output.
-///
-/// # Arguments
-///
-/// - `input_buffer`: A slice containing the input data, zero-len if this is an output-only stream.
-/// - `output_buffer`: A mutable slice to be filled with audio samples, zero-len if this is an input-only stream.
-///
-/// # Return value
-///
-/// If the stream has output, this is the number of frames written to the output buffer. In this
-/// case, if this number is less than the length of the output buffer, then the stream will start to
-/// drain.
-///
-/// If the stream is input only, then returning the length of the input buffer indicates data has
-/// been read.  In this case, a value less than that will result in the stream being stopped.
 pub type DataCallback<F> = dyn FnMut(&[F], &mut [F]) -> isize + Send + Sync + 'static;
-
-/// User supplied state callback.
-///
-/// # Arguments
-///
-/// `state`: The new state of the stream
 pub type StateCallback = dyn FnMut(State) + Send + Sync + 'static;
-
-/// User supplied callback called when the underlying device changed.
 pub type DeviceChangedCallback = dyn FnMut() + Send + Sync + 'static;
 
 pub struct StreamCallbacks<F> {
@@ -53,60 +78,6 @@ pub struct StreamCallbacks<F> {
     pub(crate) device_changed: Option<Box<DeviceChangedCallback>>,
 }
 
-/// Audio input/output stream
-///
-/// # Example
-/// ```no_run
-/// extern crate cubeb;
-/// use std::thread;
-/// use std::time::Duration;
-///
-/// type Frame = cubeb::MonoFrame<f32>;
-///
-/// fn main() {
-///     let ctx = cubeb::init("Cubeb tone example").unwrap();
-///
-///     let params = cubeb::StreamParamsBuilder::new()
-///         .format(cubeb::SampleFormat::Float32LE)
-///         .rate(44_100)
-///         .channels(1)
-///         .layout(cubeb::ChannelLayout::MONO)
-///         .prefs(cubeb::StreamPrefs::NONE)
-///         .take();
-///
-///     let phase_inc = 440.0 / 44_100.0;
-///     let mut phase = 0.0;
-///     let volume = 0.25;
-///
-///     let mut builder = cubeb::StreamBuilder::<Frame>::new();
-///     builder
-///         .name("Cubeb Square Wave")
-///         .default_output(&params)
-///         .latency(0x1000)
-///         .data_callback(move |_, output| {
-///             // Generate a square wave
-///             for x in output.iter_mut() {
-///                 x.m = if phase < 0.5 { volume } else { -volume };
-///                 phase = (phase + phase_inc) % 1.0;
-///             }
-///
-///             output.len() as isize
-///         })
-///         .state_callback(|state| {
-///             println!("stream {:?}", state);
-///         });
-///     let stream = builder.init(&ctx).expect("Failed to create stream.");
-///
-///     // Start playback
-///     stream.start().unwrap();
-///
-///     // Play for 1/2 second
-///     thread::sleep(Duration::from_millis(500));
-///
-///     // Shutdown
-///     stream.stop().unwrap();
-/// }
-/// ```
 pub struct Stream<F>(ManuallyDrop<cubeb_core::Stream>, PhantomData<*const F>);
 
 impl<F> Stream<F> {
@@ -131,53 +102,6 @@ impl<F> ops::Deref for Stream<F> {
     }
 }
 
-/// Stream builder
-///
-/// ```no_run
-/// use cubeb::{Context, MonoFrame, Sample};
-/// use std::f32::consts::PI;
-/// use std::thread;
-/// use std::time::Duration;
-///
-/// const SAMPLE_FREQUENCY: u32 = 48_000;
-/// const STREAM_FORMAT: cubeb::SampleFormat = cubeb::SampleFormat::S16LE;
-/// type Frame = MonoFrame<i16>;
-///
-/// let ctx = Context::init(None, None).unwrap();
-///
-/// let params = cubeb::StreamParamsBuilder::new()
-///     .format(STREAM_FORMAT)
-///     .rate(SAMPLE_FREQUENCY)
-///     .channels(1)
-///     .layout(cubeb::ChannelLayout::MONO)
-///     .take();
-///
-/// let mut position = 0u32;
-///
-/// let mut builder = cubeb::StreamBuilder::<Frame>::new();
-/// builder
-///     .name("Cubeb tone (mono)")
-///     .default_output(&params)
-///     .latency(0x1000)
-///     .data_callback(move |_, output| {
-///         // generate our test tone on the fly
-///         for f in output.iter_mut() {
-///             // North American dial tone
-///             let t1 = (2.0 * PI * 350.0 * position as f32 / SAMPLE_FREQUENCY as f32).sin();
-///             let t2 = (2.0 * PI * 440.0 * position as f32 / SAMPLE_FREQUENCY as f32).sin();
-///
-///             f.m = i16::from_float(0.5 * (t1 + t2));
-///
-///             position += 1;
-///         }
-///         output.len() as isize
-///     })
-///     .state_callback(|state| {
-///         println!("stream {:?}", state);
-///     });
-///
-/// let stream = builder.init(&ctx).expect("Failed to create cubeb stream");
-/// ```
 pub struct StreamBuilder<'a, F> {
     name: Option<CString>,
     input: Option<(DeviceId, &'a StreamParamsRef)>,
@@ -193,7 +117,6 @@ impl<'a, F> StreamBuilder<'a, F> {
         Default::default()
     }
 
-    /// User supplied data callback, see [`DataCallback`]
     pub fn data_callback<D>(&mut self, cb: D) -> &mut Self
     where
         D: FnMut(&[F], &mut [F]) -> isize + Send + Sync + 'static,
@@ -201,8 +124,6 @@ impl<'a, F> StreamBuilder<'a, F> {
         self.data_cb = Some(Box::new(cb) as Box<DataCallback<F>>);
         self
     }
-
-    /// User supplied state callback, see [`StateCallback`]
     pub fn state_callback<S>(&mut self, cb: S) -> &mut Self
     where
         S: FnMut(State) + Send + Sync + 'static,
@@ -211,57 +132,36 @@ impl<'a, F> StreamBuilder<'a, F> {
         self
     }
 
-    /// A name for this stream.
     pub fn name<T: Into<Vec<u8>>>(&mut self, name: T) -> &mut Self {
         self.name = Some(CString::new(name).unwrap());
         self
     }
 
-    /// Use the default input device with `params`
-    ///
-    /// Optional if the stream is output only
     pub fn default_input(&mut self, params: &'a StreamParamsRef) -> &mut Self {
         self.input = Some((ptr::null(), params));
         self
     }
 
-    /// Use a specific input device with `params`
-    ///
-    /// Optional if the stream is output only
     pub fn input(&mut self, device: DeviceId, params: &'a StreamParamsRef) -> &mut Self {
         self.input = Some((device, params));
         self
     }
 
-    /// Use the default output device with `params`
-    ///
-    /// Optional if the stream is input only
     pub fn default_output(&mut self, params: &'a StreamParamsRef) -> &mut Self {
         self.output = Some((ptr::null(), params));
         self
     }
 
-    /// Use a specific output device with `params`
-    ///
-    /// Optional if the stream is input only
     pub fn output(&mut self, device: DeviceId, params: &'a StreamParamsRef) -> &mut Self {
         self.output = Some((device, params));
         self
     }
 
-    /// Stream latency in frames.
-    ///
-    /// Valid range is [1, 96000].
     pub fn latency(&mut self, latency: u32) -> &mut Self {
         self.latency = Some(latency);
         self
     }
 
-    /// User supplied callback called when the underlying device changed.
-    ///
-    /// See [`StateCallback`]
-    ///
-    /// Optional
     pub fn device_changed_cb<CB>(&mut self, cb: CB) -> &mut Self
     where
         CB: FnMut() + Send + Sync + 'static,
@@ -270,7 +170,6 @@ impl<'a, F> StreamBuilder<'a, F> {
         self
     }
 
-    /// Build the stream
     pub fn init(self, ctx: &ContextRef) -> Result<Stream<F>> {
         if self.data_cb.is_none() || self.state_cb.is_none() {
             return Err(Error::error());
