# HG changeset patch
# User Timothy Nikkel <tnikkel@gmail.com>
# Date 1718665597 0
# Node ID dc2a0c23b5d287199fafa4a23ee1d5624cb33418
# Parent  4f3e1cb7ea7d60ad9971292b65b09885c5a87a5e
Bug 1902304. Fix how libjpeg turbo build enables simd code. r=RyanVM

Instead of ifdef'ing the architectures that don't have simd, just turn simd on specifically for the cases where we have simd code.

Just defining WITH_SIMD in the moz.build file does not work because some of the time the libjpeg turbo build wants WITH_SIMD undefined for the build to work.

Differential Revision: https://phabricator.services.mozilla.com/D213934

diff --git a/media/libjpeg/jconfig.h b/media/libjpeg/jconfig.h
--- a/media/libjpeg/jconfig.h
+++ b/media/libjpeg/jconfig.h
@@ -14,20 +14,20 @@
 
 /* Support arithmetic decoding when using 8-bit samples */
 /* #undef D_ARITH_CODING_SUPPORTED */
 
 /* Support in-memory source/destination managers */
 #define MEM_SRCDST_SUPPORTED 1
 
 /* Use accelerated SIMD routines. */
-#if defined(__sparc__) || defined(__loongarch__)
+#ifdef MOZ_WITH_SIMD
+#define WITH_SIMD 1
+#else
 #undef  WITH_SIMD
-#else
-#define WITH_SIMD 1
 #endif
 
 /* This version of libjpeg-turbo supports run-time selection of data precision,
  * so BITS_IN_JSAMPLE is no longer used to specify the data precision at build
  * time.  However, some downstream software expects the macro to be defined.
  * Since 12-bit data precision is an opt-in feature that requires explicitly
  * calling 12-bit-specific libjpeg API functions and using 12-bit-specific data
  * types, the unmodified portion of the libjpeg API still behaves as if it were
diff --git a/media/libjpeg/jconfigint.h b/media/libjpeg/jconfigint.h
--- a/media/libjpeg/jconfigint.h
+++ b/media/libjpeg/jconfigint.h
@@ -76,15 +76,15 @@
 
 /* Support arithmetic encoding */
 /* #undef C_ARITH_CODING_SUPPORTED */
 
 /* Support arithmetic decoding */
 /* #undef D_ARITH_CODING_SUPPORTED */
 
 /* Use accelerated SIMD routines. */
-#if defined(__sparc__) || defined(__loongarch__)
+#ifdef MOZ_WITH_SIMD
+#define WITH_SIMD 1
+#else
 #undef  WITH_SIMD
-#else
-#define WITH_SIMD 1
 #endif
 
 #endif
diff --git a/media/libjpeg/moz.build b/media/libjpeg/moz.build
--- a/media/libjpeg/moz.build
+++ b/media/libjpeg/moz.build
@@ -105,16 +105,17 @@ if CONFIG['LIBJPEG_TURBO_HAVE_VLD1Q_U8_X
 
 if CONFIG['LIBJPEG_TURBO_NEON_INTRINSICS']:
     DEFINES['NEON_INTRINSICS'] = True
 
 if CONFIG['LIBJPEG_TURBO_USE_NASM']:
     USE_NASM = True
 
 if CONFIG['LIBJPEG_TURBO_SIMD_FLAGS']:
+    DEFINES['MOZ_WITH_SIMD'] = 1
     if CONFIG['TARGET_CPU'] == 'arm':
         LOCAL_INCLUDES += [
             '/media/libjpeg/simd/arm',
             '/media/libjpeg/simd/arm/aarch32',
         ]
         SOURCES += [
             'simd/arm/aarch32/jsimd.c',
         ]
@@ -293,16 +294,17 @@ if CONFIG['LIBJPEG_TURBO_SIMD_FLAGS']:
             'simd/i386/jquant-sse.asm',
             'simd/i386/jquantf-sse2.asm',
             'simd/i386/jquanti-avx2.asm',
             'simd/i386/jquanti-sse2.asm',
             'simd/i386/jsimd.c',
             'simd/i386/jsimdcpu.asm',
         ]
 elif CONFIG['TARGET_CPU'].startswith('ppc'):
+    DEFINES['MOZ_WITH_SIMD'] = 1
     # PowerPC has no assembly files, but still needs its own headers.
     LOCAL_INCLUDES += ['/media/libjpeg/simd/powerpc']
 
     # For libjpeg's internal runtime detection to work, jsimd.c must NOT
     # be compiled with -maltivec (otherwise it gets statically set),
     # but everything else should be. If -maltivec was already
     # specified in .mozconfig, though, then this won't harm anything.
     ppc_vmx_sources = [

