# HG changeset patch
# User Emilio Cobos √Ålvarez <emilio@crisal.io>
# Date 1639338557 0
# Node ID 402d4d4417f158f4cfe9d0c6c72ca040f9ea1a4f
# Parent  56cf5b4eb7812650e60e935da251267ad832fe6e
Bug 1745537 - Avoid duplicating GetBorderRadius.

Differential Revision: https://phabricator.services.mozilla.com/D133587

diff --git a/widget/gtk/WidgetStyleCache.cpp b/widget/gtk/WidgetStyleCache.cpp
--- a/widget/gtk/WidgetStyleCache.cpp
+++ b/widget/gtk/WidgetStyleCache.cpp
@@ -1455,8 +1455,38 @@ void StyleContextSetScale(GtkStyleContex
   // Support HiDPI styles on Gtk 3.20+
   static auto sGtkStyleContextSetScalePtr =
       (void (*)(GtkStyleContext*, gint))dlsym(RTLD_DEFAULT,
                                               "gtk_style_context_set_scale");
   if (sGtkStyleContextSetScalePtr && style) {
     sGtkStyleContextSetScalePtr(style, aScaleFactor);
   }
 }
+
+gint GetBorderRadius(GtkStyleContext* aStyle) {
+  GValue value = G_VALUE_INIT;
+  // NOTE(emilio): In an ideal world, we'd query the two longhands
+  // (border-top-left-radius and border-top-right-radius) separately. However,
+  // that doesn't work (GTK rejects the query with:
+  //
+  //   Style property "border-top-left-radius" is not gettable
+  //
+  // However! Getting border-radius does work, and it does return the
+  // border-top-left-radius as a gint:
+  //
+  //   https://docs.gtk.org/gtk3/const.STYLE_PROPERTY_BORDER_RADIUS.html
+  //   https://gitlab.gnome.org/GNOME/gtk/-/blob/gtk-3-20/gtk/gtkcssshorthandpropertyimpl.c#L961-977
+  //
+  // So we abuse this fact, and make the assumption here that the
+  // border-top-{left,right}-radius are the same, and roll with it.
+  gtk_style_context_get_property(aStyle, "border-radius", GTK_STATE_FLAG_NORMAL,
+                                 &value);
+  gint result = 0;
+  auto type = G_VALUE_TYPE(&value);
+  if (type == G_TYPE_INT) {
+    result = g_value_get_int(&value);
+  } else {
+    NS_WARNING(nsPrintfCString("Unknown value type %lu for border-radius", type)
+                   .get());
+  }
+  g_value_unset(&value);
+  return result;
+}
diff --git a/widget/gtk/WidgetStyleCache.h b/widget/gtk/WidgetStyleCache.h
--- a/widget/gtk/WidgetStyleCache.h
+++ b/widget/gtk/WidgetStyleCache.h
@@ -51,9 +51,11 @@ GtkStyleContext* CreateStyleContextWithS
     GtkStateFlags aStateFlags = GTK_STATE_FLAG_NORMAL);
 
 void ResetWidgetCache();
 
 bool IsSolidCSDStyleUsed();
 
 void StyleContextSetScale(GtkStyleContext* style, gint aScaleFactor);
 
+gint GetBorderRadius(GtkStyleContext* aStyle);
+
 #endif  // WidgetStyleCache_h
diff --git a/widget/gtk/gtk3drawing.cpp b/widget/gtk/gtk3drawing.cpp
--- a/widget/gtk/gtk3drawing.cpp
+++ b/widget/gtk/gtk3drawing.cpp
@@ -2163,28 +2163,16 @@ static gint moz_gtk_check_menu_item_pain
     gtk_render_option(style, cr, x, y, indicator_width, indicator_height);
   } else {
     gtk_render_check(style, cr, x, y, indicator_width, indicator_height);
   }
 
   return MOZ_GTK_SUCCESS;
 }
 
-static gint GetBorderRadius(GtkStyleContext* aStyle) {
-  GValue value = G_VALUE_INIT;
-  gtk_style_context_get_property(aStyle, "border-radius", GTK_STATE_FLAG_NORMAL,
-                                 &value);
-  gint result = 0;
-  if (G_VALUE_TYPE(&value) == G_TYPE_INT) {
-    result = g_value_get_int(&value);
-  }
-  g_value_unset(&value);
-  return result;
-}
-
 static gint moz_gtk_header_bar_paint(WidgetNodeType widgetType, cairo_t* cr,
                                      GdkRectangle* rect,
                                      GtkWidgetState* state) {
   GtkStateFlags state_flags = GetStateFlagsFromGtkWidgetState(state);
   GtkStyleContext* style =
       GetStyleContext(widgetType, state->scale, GTK_TEXT_DIR_NONE, state_flags);
 
   // Some themes like Elementary's style the container of the headerbar rather
diff --git a/widget/gtk/nsLookAndFeel.cpp b/widget/gtk/nsLookAndFeel.cpp
--- a/widget/gtk/nsLookAndFeel.cpp
+++ b/widget/gtk/nsLookAndFeel.cpp
@@ -1412,45 +1412,16 @@ static nscolor GetBackgroundColor(
                  ? l
                  : d;
     }
   }
 
   return NS_TRANSPARENT;
 }
 
-static int32_t GetBorderRadius(GtkStyleContext* aStyle) {
-  GValue value = G_VALUE_INIT;
-  // NOTE(emilio): In an ideal world, we'd query the two longhands
-  // (border-top-left-radius and border-top-right-radius) separately. However,
-  // that doesn't work (GTK rejects the query with:
-  //
-  //   Style property "border-top-left-radius" is not gettable
-  //
-  // However! Getting border-radius does work, and it does return the
-  // border-top-left-radius as a gint:
-  //
-  //   https://docs.gtk.org/gtk3/const.STYLE_PROPERTY_BORDER_RADIUS.html
-  //   https://gitlab.gnome.org/GNOME/gtk/-/blob/gtk-3-20/gtk/gtkcssshorthandpropertyimpl.c#L961-977
-  //
-  // So we abuse this fact, and make the assumption here that the
-  // border-top-{left,right}-radius are the same, and roll with it.
-  gtk_style_context_get_property(aStyle, "border-radius", GTK_STATE_FLAG_NORMAL,
-                                 &value);
-  auto unset = MakeScopeExit([&] { g_value_unset(&value); });
-
-  auto type = G_VALUE_TYPE(&value);
-  if (type == G_TYPE_INT) {
-    return g_value_get_int(&value);
-  }
-  NS_WARNING(nsPrintfCString("Unknown value type %lu for titlebar radius", type)
-                 .get());
-  return 0;
-}
-
 void nsLookAndFeel::PerThemeData::Init() {
   mName = GetGtkTheme();
 
   GtkStyleContext* style;
 
   mHighContrast = StaticPrefs::widget_content_gtk_high_contrast_enabled() &&
                   mName.Find("HighContrast"_ns) >= 0;
 

