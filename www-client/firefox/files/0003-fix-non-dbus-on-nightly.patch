# HG changeset patch
# User Emilio Cobos √Ålvarez <emilio@crisal.io>
# Date 1709627168 0
# Node ID f29f37a00080ad0295d0d084d55fedd112c0748e
# Parent  011df63abebe9c01fc042ece1ebe70b0749ae71d
Bug 1883254 - Fix dbus-disabled build after bug 1883184. r=stransky

Ugh

Differential Revision: https://phabricator.services.mozilla.com/D203487

diff --git a/widget/gtk/NativeMenuGtk.cpp b/widget/gtk/NativeMenuGtk.cpp
--- a/widget/gtk/NativeMenuGtk.cpp
+++ b/widget/gtk/NativeMenuGtk.cpp
@@ -439,16 +439,18 @@ void NativeMenuGtk::ActivateItem(dom::El
 void NativeMenuGtk::OpenSubmenu(dom::Element*) {
   // TODO: For testing mostly.
 }
 
 void NativeMenuGtk::CloseSubmenu(dom::Element*) {
   // TODO: For testing mostly.
 }
 
+#ifdef MOZ_ENABLE_DBUS
+
 class MenubarModelDBus final : public MenuModel {
  public:
   explicit MenubarModelDBus(dom::Element* aElement) : MenuModel(aElement) {
     mRoot = dont_AddRef(dbusmenu_menuitem_new());
     dbusmenu_menuitem_set_root(mRoot.get(), true);
     mShowing = true;
   }
 
@@ -512,17 +514,17 @@ static uint32_t KeyFrom(const dom::Eleme
   nsAutoString key;
   nsAutoString keycode;
   element->GetAttr(nsGkAtoms::key, key);
   element->GetAttr(nsGkAtoms::keycode, keycode);
 
   return ParseKey(key, keycode);
 }
 
-// TODO(emilio): Unifiy with nsMenuUtilsX::GeckoModifiersForNodeAttribute (or
+// TODO(emilio): Unify with nsMenuUtilsX::GeckoModifiersForNodeAttribute (or
 // at least switch to strtok_r).
 static uint32_t ParseModifiers(const nsAString& aModifiers) {
   if (aModifiers.IsEmpty()) {
     return 0;
   }
 
   uint32_t modifier = 0;
   char* str = ToNewUTF8String(aModifiers);
@@ -725,17 +727,17 @@ void DBusMenuBar::OnNameOwnerChanged() {
     return;
   }
   auto* gdkWin =
       static_cast<GdkWindow*>(widget->GetNativeData(NS_NATIVE_WINDOW));
   if (NS_WARN_IF(!gdkWin)) {
     return;
   }
 
-#ifdef MOZ_WAYLAND
+#  ifdef MOZ_WAYLAND
   if (auto* display = widget::WaylandDisplayGet()) {
     xdg_dbus_annotation_manager_v1* annotationManager =
         display->GetXdgDbusAnnotationManager();
     if (NS_WARN_IF(!annotationManager)) {
       return;
     }
 
     wl_surface* surface = gdk_wayland_window_get_wl_surface(gdkWin);
@@ -752,34 +754,34 @@ void DBusMenuBar::OnNameOwnerChanged() {
     // FIXME(emilio, bug 1883209): Nothing deletes this as of right now.
     mAnnotation = xdg_dbus_annotation_manager_v1_create_surface(
         annotationManager, "com.canonical.dbusmenu", surface);
 
     xdg_dbus_annotation_v1_set_address(mAnnotation, myServiceName,
                                        mObjectPath.get());
     return;
   }
-#endif
-#ifdef MOZ_X11
+#  endif
+#  ifdef MOZ_X11
   // legacy path
   auto xid = GDK_WINDOW_XID(gdkWin);
   widget::DBusProxyCall(mProxy, "RegisterWindow",
                         g_variant_new("(uo)", xid, mObjectPath.get()),
                         G_DBUS_CALL_FLAGS_NONE)
       ->Then(
           GetCurrentSerialEventTarget(), __func__,
           [self = RefPtr{this}](RefPtr<GVariant>&& aResult) {
             self->mMenuModel->Element()->SetBoolAttr(nsGkAtoms::hidden, true);
           },
           [self = RefPtr{this}](GUniquePtr<GError>&& aError) {
             g_printerr("Failed to register window menubar: %s\n",
                        aError->message);
             self->mMenuModel->Element()->SetBoolAttr(nsGkAtoms::hidden, false);
           });
-#endif
+#  endif
 }
 
 static unsigned sID = 0;
 
 DBusMenuBar::DBusMenuBar(dom::Element* aElement)
     : mObjectPath(nsPrintfCString("/com/canonical/menu/%u", sID++)),
       mMenuModel(MakeRefPtr<MenubarModelDBus>(aElement)),
       mServer(dont_AddRef(dbusmenu_server_new(mObjectPath.get()))) {
@@ -807,10 +809,11 @@ RefPtr<DBusMenuBar> DBusMenuBar::Create(
           [](GUniquePtr<GError>&& aError) {
             g_printerr("Failed to create DBUS proxy for menubar: %s\n",
                        aError->message);
           });
   return self;
 }
 
 DBusMenuBar::~DBusMenuBar() = default;
+#endif
 
 }  // namespace mozilla::widget
diff --git a/widget/gtk/NativeMenuGtk.h b/widget/gtk/NativeMenuGtk.h
--- a/widget/gtk/NativeMenuGtk.h
+++ b/widget/gtk/NativeMenuGtk.h
@@ -56,33 +56,37 @@ class NativeMenuGtk : public NativeMenu 
   MOZ_CAN_RUN_SCRIPT void FireEvent(EventMessage);
 
   bool mPoppedUp = false;
   RefPtr<GtkWidget> mNativeMenu;
   RefPtr<MenuModelGMenu> mMenuModel;
   nsTArray<NativeMenu::Observer*> mObservers;
 };
 
+#ifdef MOZ_ENABLE_DBUS
+
 class DBusMenuBar final : public RefCounted<DBusMenuBar> {
  public:
   MOZ_DECLARE_REFCOUNTED_TYPENAME(DBusMenuBar)
   static RefPtr<DBusMenuBar> Create(dom::Element*);
   ~DBusMenuBar();
 
  protected:
   explicit DBusMenuBar(dom::Element* aElement);
 
   static void NameOwnerChangedCallback(GObject*, GParamSpec*, gpointer);
   void OnNameOwnerChanged();
 
   nsCString mObjectPath;
   RefPtr<MenubarModelDBus> mMenuModel;
   RefPtr<DbusmenuServer> mServer;
   RefPtr<GDBusProxy> mProxy;
-#ifdef MOZ_WAYLAND
+#  ifdef MOZ_WAYLAND
   xdg_dbus_annotation_v1* mAnnotation = nullptr;
+#  endif
+};
+
 #endif
-};
 
 }  // namespace widget
 }  // namespace mozilla
 
 #endif
diff --git a/widget/gtk/NativeMenuSupport.cpp b/widget/gtk/NativeMenuSupport.cpp
--- a/widget/gtk/NativeMenuSupport.cpp
+++ b/widget/gtk/NativeMenuSupport.cpp
@@ -13,21 +13,23 @@
 
 namespace mozilla::widget {
 
 void NativeMenuSupport::CreateNativeMenuBar(nsIWidget* aParent,
                                             dom::Element* aMenuBarElement) {
   MOZ_RELEASE_ASSERT(NS_IsMainThread(),
                      "Attempting to create native menu bar on wrong thread!");
 
+#ifdef MOZ_ENABLE_DBUS
   if (aMenuBarElement && StaticPrefs::widget_gtk_global_menu_enabled() &&
       DBusMenuFunctions::Init()) {
     static_cast<nsWindow*>(aParent)->SetDBusMenuBar(
         DBusMenuBar::Create(aMenuBarElement));
   }
+#endif
 }
 
 already_AddRefed<NativeMenu> NativeMenuSupport::CreateNativeContextMenu(
     dom::Element* aPopup) {
   return MakeAndAddRef<NativeMenuGtk>(aPopup);
 }
 
 bool NativeMenuSupport::ShouldUseNativeContextMenus() {
diff --git a/widget/gtk/moz.build b/widget/gtk/moz.build
--- a/widget/gtk/moz.build
+++ b/widget/gtk/moz.build
@@ -58,17 +58,16 @@ EXPORTS.mozilla.widget += [
     "WindowSurface.h",
     "WindowSurfaceProvider.h",
 ]
 
 UNIFIED_SOURCES += [
     "AsyncGtkClipboardRequest.cpp",
     "CompositorWidgetChild.cpp",
     "CompositorWidgetParent.cpp",
-    "DBusMenu.cpp",
     "DMABufLibWrapper.cpp",
     "DMABufSurface.cpp",
     "GfxInfo.cpp",
     "gtk3drawing.cpp",
     "GtkCompositorWidget.cpp",
     "IMContextWrapper.cpp",
     "InProcessGtkCompositorWidget.cpp",
     "MozContainer.cpp",
@@ -169,12 +168,13 @@ if CONFIG["MOZ_WAYLAND"]:
     CXXFLAGS += CONFIG["MOZ_WAYLAND_CFLAGS"]
 
 if CONFIG["MOZ_ENABLE_DBUS"]:
     EXPORTS.mozilla.widget += [
         "AsyncDBus.h",
     ]
     UNIFIED_SOURCES += [
         "AsyncDBus.cpp",
+        "DBusMenu.cpp",
     ]
     CXXFLAGS += CONFIG["MOZ_DBUS_CFLAGS"]
 
 CXXFLAGS += ["-Werror=switch"]
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -6979,20 +6979,22 @@ void nsWindow::SetInputRegion(const Inpu
 // with -moz-window-dragging: drag.
 void nsWindow::UpdateWindowDraggingRegion(
     const LayoutDeviceIntRegion& aRegion) {
   if (mDraggableRegion != aRegion) {
     mDraggableRegion = aRegion;
   }
 }
 
+#ifdef MOZ_ENABLE_DBUS
 void nsWindow::SetDBusMenuBar(
     RefPtr<mozilla::widget::DBusMenuBar> aDbusMenuBar) {
   mDBusMenuBar = std::move(aDbusMenuBar);
 }
+#endif
 
 LayoutDeviceIntCoord nsWindow::GetTitlebarRadius() {
   MOZ_RELEASE_ASSERT(NS_IsMainThread());
   int32_t cssCoord = LookAndFeel::GetInt(LookAndFeel::IntID::TitlebarRadius);
   return GdkCoordToDevicePixels(cssCoord);
 }
 
 // See subtract_corners_from_region() at gtk/gtkwindow.c
diff --git a/widget/gtk/nsWindow.h b/widget/gtk/nsWindow.h
--- a/widget/gtk/nsWindow.h
+++ b/widget/gtk/nsWindow.h
@@ -369,17 +369,19 @@ class nsWindow final : public nsBaseWidg
   nsresult SetNonClientMargins(const LayoutDeviceIntMargin&) override;
   void SetDrawsInTitlebar(bool aState);
   void SetTitlebarRect();
   mozilla::LayoutDeviceIntCoord GetTitlebarRadius();
   LayoutDeviceIntRect GetTitlebarRect();
   void UpdateWindowDraggingRegion(
       const LayoutDeviceIntRegion& aRegion) override;
 
+#ifdef MOZ_ENABLE_DBUS
   void SetDBusMenuBar(RefPtr<mozilla::widget::DBusMenuBar> aDbusMenuBar);
+#endif
 
   // HiDPI scale conversion
   gint GdkCeiledScaleFactor();
   double FractionalScaleFactor();
 
   // To GDK
   gint DevicePixelsToGdkCoordRoundUp(int);
   gint DevicePixelsToGdkCoordRoundDown(int);
@@ -903,17 +905,19 @@ class nsWindow final : public nsBaseWidg
   // Toplevel window (first element) of linked list of Wayland popups. It's null
   // if we're the toplevel.
   RefPtr<nsWindow> mWaylandToplevel;
 
   // Next/Previous popups in Wayland popup hierarchy.
   RefPtr<nsWindow> mWaylandPopupNext;
   RefPtr<nsWindow> mWaylandPopupPrev;
 
+#ifdef MOZ_ENABLE_DBUS
   RefPtr<mozilla::widget::DBusMenuBar> mDBusMenuBar;
+#endif
 
   // When popup is resized by Gtk by move-to-rect callback,
   // we store final popup size here. Then we use mMoveToRectPopupSize size
   // in following popup operations unless mLayoutPopupSizeCleared is set.
   LayoutDeviceIntSize mMoveToRectPopupSize;
 
   /**
    * |mIMContext| takes all IME related stuff.

