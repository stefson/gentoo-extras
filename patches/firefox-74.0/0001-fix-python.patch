# HG changeset patch
# User Ricky Stewart <rstewart@mozilla.com>
# Date 1581618852 0
# Node ID 0803b57c77a1ab38d071f7d9829c5d8e489eec4e
# Parent  baab608583fda4b939a6702a6f4a5370321f7485
Bug 1614994 - Fix "ImportError: No module named shutil_which" in configure r=froydnj

Differential Revision: https://phabricator.services.mozilla.com/D62770

diff --git a/build/moz.configure/init.configure b/build/moz.configure/init.configure
--- a/build/moz.configure/init.configure
+++ b/build/moz.configure/init.configure
@@ -294,28 +294,36 @@ def virtualenv_python2(env_python, build
 
     virtualenvs_root = os.path.join(topobjdir, '_virtualenvs')
     with LineIO(lambda l: log.info(l), 'replace') as out:
         manager = VirtualenvManager(
             topsrcdir, topobjdir,
             os.path.join(virtualenvs_root, 'init'), out,
             os.path.join(topsrcdir, 'build', 'virtualenv_packages.txt'))
 
-    # If we're not in the virtualenv, we need the mozfile module for
-    # find_program.
+    # If we're not in the virtualenv, we need to update the path to include some
+    # necessary modules for find_program.
     if normsep(sys.executable) != normsep(manager.python_path):
         sys.path.insert(
             0, os.path.join(topsrcdir, 'testing', 'mozbase', 'mozfile'))
+        sys.path.insert(
+            0, os.path.join(topsrcdir, 'third_party', 'python', 'backports',
+                            'shutil_which'))
 
     if python:
         found_python = find_program(python)
         if not found_python:
             die('The PYTHON environment variable does not contain '
                 'a valid path. Cannot find %s', python)
         python = found_python
+        try:
+            version = python_executable_version(python).version
+        except Exception as e:
+            raise FatalCheckError(
+                'could not determine version of given PYTHON: %s' % e)
     elif mozillabuild:
         # MozillaBuild provides a Python 2.
         python = normsep('%s/python/python2.exe' % mozillabuild)
 
         try:
             version = python_executable_version(python).version
         except Exception as e:
             raise FatalCheckError('could not determine version of '

