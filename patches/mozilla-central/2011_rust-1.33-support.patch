# HG changeset patch
# Parent  eac9ac400c0ed720be0760c8b9d02e2949819792
https://bugzilla.mozilla.org/show_bug.cgi?id=1521249 - Part 3

---
 .cargo/config.in                              |   5 +
 Cargo.lock                                    |   6 +-
 Cargo.toml                                    |   1 +
 third_party/rust/packed_simd/.appveyor.yml    |  59 ++++
 .../rust/packed_simd/.cargo-checksum.json     |   2 +-
 third_party/rust/packed_simd/.travis.yml      | 308 ++++++++++++++++++
 third_party/rust/packed_simd/Cargo.toml       |  71 ++--
 third_party/rust/packed_simd/build.rs         |   1 +
 third_party/rust/packed_simd/ci/all.sh        |  21 +-
 .../rust/packed_simd/perf-guide/.gitignore    |   1 +
 third_party/rust/packed_simd/readme.md        |   2 +
 third_party/rust/packed_simd/rust-toolchain   |   1 -
 third_party/rust/packed_simd/src/api.rs       |  13 +-
 .../rust/packed_simd/src/api/bitmask.rs       |  82 -----
 third_party/rust/packed_simd/src/api/cast.rs  |   8 +-
 .../packed_simd/src/api/cmp/partial_eq.rs     |   9 +-
 .../rust/packed_simd/src/api/fmt/binary.rs    |  14 +-
 .../rust/packed_simd/src/api/fmt/debug.rs     |  10 +-
 .../rust/packed_simd/src/api/fmt/lower_hex.rs |  14 +-
 .../rust/packed_simd/src/api/fmt/octal.rs     |  14 +-
 .../rust/packed_simd/src/api/fmt/upper_hex.rs |  14 +-
 .../rust/packed_simd/src/api/minimal/iuf.rs   |   3 +-
 .../rust/packed_simd/src/api/minimal/mask.rs  |   6 +-
 .../rust/packed_simd/src/api/minimal/ptr.rs   |  25 +-
 .../packed_simd/src/api/reductions/mask.rs    |  11 +-
 .../packed_simd/src/api/slice/from_slice.rs   |   5 +-
 .../src/api/slice/write_to_slice.rs           |  18 +-
 .../rust/packed_simd/src/codegen/llvm.rs      |   2 -
 .../packed_simd/src/codegen/math/float.rs     |   2 +-
 .../packed_simd/src/codegen/swap_bytes.rs     |  10 +-
 third_party/rust/packed_simd/src/lib.rs       |  33 +-
 third_party/rust/packed_simd/src/masks.rs     |   2 +-
 third_party/rust/packed_simd/src/v128.rs      |  30 +-
 third_party/rust/packed_simd/src/v16.rs       |   6 +-
 third_party/rust/packed_simd/src/v256.rs      |  30 +-
 third_party/rust/packed_simd/src/v32.rs       |  12 +-
 third_party/rust/packed_simd/src/v512.rs      |  30 +-
 third_party/rust/packed_simd/src/v64.rs       |  24 +-
 third_party/rust/packed_simd/src/vSize.rs     |  18 +-
 39 files changed, 576 insertions(+), 347 deletions(-)
 create mode 100644 third_party/rust/packed_simd/.appveyor.yml
 create mode 100644 third_party/rust/packed_simd/.travis.yml
 create mode 100644 third_party/rust/packed_simd/perf-guide/.gitignore
 delete mode 100644 third_party/rust/packed_simd/rust-toolchain
 delete mode 100644 third_party/rust/packed_simd/src/api/bitmask.rs

diff --git a/.cargo/config.in b/.cargo/config.in
--- a/.cargo/config.in
+++ b/.cargo/config.in
@@ -17,12 +17,17 @@ git = "https://github.com/froydnj/winapi
 branch = "aarch64"
 replace-with = "vendored-sources"
 
 [source."https://github.com/alexcrichton/cc-rs"]
 git = "https://github.com/glandium/cc-rs"
 branch = "1.0.23-clang-cl-aarch64"
 replace-with = "vendored-sources"
 
+[source."https://github.com/rust-lang-nursery/packed_simd"]
+git = "https://github.com/hsivonen/packed_simd"
+branch = "rust_1_32"
+replace-with = "vendored-sources"
+
 [source.vendored-sources]
 directory = '@top_srcdir@/third_party/rust'
 
 @WIN64_CARGO_LINKER_CONFIG@
diff --git a/Cargo.lock b/Cargo.lock
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -882,17 +882,17 @@ dependencies = [
 ]
 
 [[package]]
 name = "encoding_rs"
 version = "0.8.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "packed_simd 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "packed_simd 0.3.3 (git+https://github.com/hsivonen/packed_simd?branch=rust_1_32)",
 ]
 
 [[package]]
 name = "env_logger"
 version = "0.5.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1927,17 +1927,17 @@ version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "packed_simd"
 version = "0.3.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
+source = "git+https://github.com/hsivonen/packed_simd?branch=rust_1_32#3541e3818fdc7c2a24f87e3459151a4ce955a67a"
 dependencies = [
  "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "parking_lot"
 version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -3500,17 +3500,17 @@ dependencies = [
 "checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)" = "92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31"
 "checksum num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)" = "0b3a5d7cc97d6d30d8b9bc8fa19bf45349ffe46241e8816f50f62f6d6aaabee1"
 "checksum num_cpus 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "514f0d73e64be53ff320680ca671b64fe3fb91da01e1ae2ddc99eb51d453b20d"
 "checksum object 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)" = "6cca6ad89d0801138cb4ef606908ae12d83edc4c790ef5178fc7b4c72d959e90"
 "checksum opaque-debug 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "51ecbcb821e1bd256d456fe858aaa7f380b63863eab2eb86eee1bd9f33dd6682"
 "checksum ordered-float 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)" = "2f0015e9e8e28ee20c581cfbfe47c650cedeb9ed0721090e0b7ebb10b9cdbcc2"
 "checksum ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)" = "a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063"
 "checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13"
-"checksum packed_simd 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220"
+"checksum packed_simd 0.3.3 (git+https://github.com/hsivonen/packed_simd?branch=rust_1_32)" = "<none>"
 "checksum parking_lot 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)" = "69376b761943787ebd5cc85a5bc95958651a22609c5c1c2b65de21786baec72b"
 "checksum parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)" = "4db1a8ccf734a7bce794cc19b3df06ed87ab2f3907036b693c68f56b4d4537fa"
 "checksum peeking_take_while 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"
 "checksum percent-encoding 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "de154f638187706bde41d9b4738748933d64e6b37bdbffc0b47a97d16a6ae356"
 "checksum petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)" = "9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f"
 "checksum phf 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)" = "cb325642290f28ee14d8c6201159949a872f220c62af6e110a56ea914fbe42fc"
 "checksum phf_codegen 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)" = "d62594c0bb54c464f633175d502038177e90309daf2e0158be42ed5f023ce88f"
 "checksum phf_generator 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)" = "6b07ffcc532ccc85e3afc45865469bf5d9e4ef5bfcf9622e3cfe80c2d275ec03"
diff --git a/Cargo.toml b/Cargo.toml
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -55,9 +55,10 @@ rpath = false
 debug-assertions = false
 panic = "abort"
 codegen-units = 1
 
 [patch.crates-io]
 libudev-sys = { path = "dom/webauthn/libudev-sys" }
 serde_derive = { git = "https://github.com/servo/serde", branch = "deserialize_from_enums9" }
 winapi = { git = "https://github.com/froydnj/winapi-rs", branch = "aarch64" }
+packed_simd = { git = "https://github.com/hsivonen/packed_simd", branch = "rust_1_32" }
 cc = { git = "https://github.com/glandium/cc-rs", branch = "1.0.23-clang-cl-aarch64" }
diff --git a/third_party/rust/packed_simd/.appveyor.yml b/third_party/rust/packed_simd/.appveyor.yml
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/.appveyor.yml
@@ -0,0 +1,59 @@
+matrix:
+  allow_failures:
+    # FIXME: https://github.com/rust-lang-nursery/packed_simd/issues/72
+    - TARGET: i686-pc-windows-msvc
+    - TARGET: i686-pc-windows-gnu
+    - TARGET: x86_64-pc-windows-gnu
+  fast_finish: true
+
+environment:
+  matrix:
+    - TARGET: x86_64-pc-windows-msvc
+      MSYSTEM: MINGW64
+      NOVERIFY: "1"
+    - TARGET: x86_64-pc-windows-msvc
+      MSYSTEM: MINGW64
+      RUSTFLAGS: "-C target-feature=+sse4.2"
+      NOVERIFY: "1"
+    - TARGET: x86_64-pc-windows-msvc
+      MSYSTEM: MINGW64
+      RUSTFLAGS: "-C target-feature=+avx"
+      NOVERIFY: "1"
+    - TARGET: x86_64-pc-windows-msvc
+      MSYSTEM: MINGW64
+      RUSTFLAGS: "-C target-feature=+avx2"
+      NOVERIFY: "1"
+
+    - TARGET: i686-pc-windows-msvc
+      MSYSTEM: MINGW32
+      NOVERIFY: "1"
+    - TARGET: i686-pc-windows-msvc
+      MSYSTEM: MINGW32
+      RUSTFLAGS: "-C target-feature=+sse4.2"
+      NOVERIFY: "1"
+    - TARGET: i686-pc-windows-msvc
+      MSYSTEM: MINGW32
+      RUSTFLAGS: "-C target-feature=+avx"
+      NOVERIFY: "1"
+    - TARGET: i686-pc-windows-msvc
+      MSYSTEM: MINGW32
+      RUSTFLAGS: "-C target-feature=+avx2"
+      NOVERIFY: "1"
+
+    - TARGET: x86_64-pc-windows-gnu
+      MSYSTEM: MINGW64
+
+    - TARGET: i686-pc-windows-gnu
+      MSYSTEM: MINGW32
+    - TARGET: x86_64-pc-windows-gnu
+      MSYSTEM: MINGW64
+install:
+  - ps: if (ls -r . -fi "*.rs" | sls "`t") { throw "Found tab character" }
+  - ps: Start-FileDownload "https://static.rust-lang.org/dist/rust-nightly-${env:TARGET}.exe" -FileName "rust-install.exe"
+  - ps: .\rust-install.exe /VERYSILENT /NORESTART /DIR="C:\rust" | Out-Null
+  - ps: $env:PATH="$env:PATH;C:\rust\bin"
+  - set PATH=c:\msys64\%MSYSTEM%\bin;c:\msys64\usr\bin;%PATH%
+  - rustc -vV
+  - cargo -vV
+build: false
+test_script: bash -c "ci/run.sh"
diff --git a/third_party/rust/packed_simd/.cargo-checksum.json b/third_party/rust/packed_simd/.cargo-checksum.json
--- a/third_party/rust/packed_simd/.cargo-checksum.json
+++ b/third_party/rust/packed_simd/.cargo-checksum.json
@@ -1,1 +1,1 @@
-{"files":{"Cargo.toml":"0015448819f4af9ef6bb3b24428a2ed5d014c7aecdcd15015f231f268aa41e2c","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"6485b8ed310d3f0340bf1ad1f47645069ce4069dcc6bb46c7d5c6faf41de1fdb","bors.toml":"dee881dc69b9b7834e4eba5d95c3ed5a416d4628815a167d6a22d4cb4fb064b8","build.rs":"eb12357e953205b699ea2fd355a777af25de76ac0181cce40d3fce43547fb161","ci/all.sh":"6f1d5d9c19093c385c58f9fbccd3579e423e1abc7142387fed1f9afc226a3ea6","ci/android-install-ndk.sh":"0f1746108cc30bf9b9ba45bcde7b19fc1a8bdf5b0258035b4eb8dc69b75efac4","ci/android-install-sdk.sh":"3490432022c5c8f5a115c084f7a9aca1626f96c0c87ffb62019228c4346b47e4","ci/android-sysimage.sh":"ebf4e5daa1f0fe1b2092b79f0f3f161c4c4275cb744e52352c4d81ab451e4c5a","ci/benchmark.sh":"b61d19ef6b90deba8fb79dee74c8b062d94844676293da346da87bb78a9a49a4","ci/deploy_and_run_on_ios_simulator.rs":"ec8ecf82d92072676aa47f0d1a3d021b60a7ae3531153ef12d2ff4541fc294dc","ci/docker/aarch64-linux-android/Dockerfile":"ace2e7d33c87bc0f6d3962a4a3408c04557646f7f51ab99cfbf574906796b016","ci/docker/aarch64-unknown-linux-gnu/Dockerfile":"1ecdac757101d951794fb2ab0deaa278199cf25f2e08a15c7d40ff31a8556184","ci/docker/arm-linux-androideabi/Dockerfile":"370e55d3330a413a3ccf677b3afb3e0ef9018a5fab263faa97ae8ac017fc2286","ci/docker/arm-unknown-linux-gnueabi/Dockerfile":"e25d88f6c0c94aada3d2e3f08243f755feb7e869dc5dc505b3799719cb1af591","ci/docker/arm-unknown-linux-gnueabihf/Dockerfile":"f126f4c7bae8c11ab8b16df06ad997863f0838825a9c08c9899a3eedb6d570bd","ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile":"b647545c158ee480a4c581dbdc1f57833aef056c8d498acc04b573e842bf803c","ci/docker/i586-unknown-linux-gnu/Dockerfile":"0d492759017307ccf74dc2aa4a8cf6623daf3dc728c708dc2b18fa7940800cba","ci/docker/i686-unknown-linux-gnu/Dockerfile":"0d492759017307ccf74dc2aa4a8cf6623daf3dc728c708dc2b18fa7940800cba","ci/docker/mips-unknown-linux-gnu/Dockerfile":"323776469bb7b160385f3621d66e3ee14c75242f8180f916e65af048a29d4ea0","ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile":"c647f6948a9a43b0be695cbed4eac752120d0faf28e5e69c718cb10406921dab","ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile":"77bfd00cc8639509be381b394f077e39b45a00158ad61b4e1656714c714665d1","ci/docker/mipsel-unknown-linux-musl/Dockerfile":"ec5bea6c98a3b626731fdb95f9ff2d1182639c76e8fb16d3271d0fc884901524","ci/docker/powerpc-unknown-linux-gnu/Dockerfile":"4f2b662de66e83d1354f650b7077692309637f786c2ea5516c31b5c2ee10af2d","ci/docker/powerpc64-unknown-linux-gnu/Dockerfile":"a9595402b772bc365982e22a0096a8988825d90b09b5faa97ab192e76072f71d","ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile":"df3c381c157439695ae8cd10ab71664702c061e3b4ab22906a5ad6c2680acfed","ci/docker/s390x-unknown-linux-gnu/Dockerfile":"93fb44df3d7fd31ead158570667c97b5076a05c3d968af4a84bc13819a8f2db8","ci/docker/sparc64-unknown-linux-gnu/Dockerfile":"da1c39a3ff1fe22e41395fa7c8934e90b4c1788e551b9aec6e38bfd94effc437","ci/docker/thumbv7neon-linux-androideabi/Dockerfile":"c2decd5591bd7a09378901bef629cd944acf052eb55e4f35b79eb9cb4d62246a","ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile":"75c0c56161c7382b439de74c00de1c0e3dc9d59560cd6720976a751034b78714","ci/docker/wasm32-unknown-unknown/Dockerfile":"3e5f294bc1e004aa599086c2af49d6f3e7459fa250f5fbdd60cf67d53db78758","ci/docker/x86_64-linux-android/Dockerfile":"685040273cf350d5509e580ac451555efa19790c8723ca2af066adadc6880ad2","ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile":"44b6203d9290bfdc53d81219f0937e1110847a23dd982ec8c4de388354f01536","ci/docker/x86_64-unknown-linux-gnu/Dockerfile":"d253c86803b22da428fa9cc671a05f18d3318eca7733b8dccb4f7be1ddf524c5","ci/dox.sh":"5b61711be47a4e3dde0ddd15ba73d256ea95fd75af3897732c24db1dc7e66366","ci/linux-s390x.sh":"d6b732d7795b4ba131326aff893bca6228a7d2eb0e9402f135705413dbbe0dce","ci/linux-sparc64.sh":"c92966838b1ab7ad3b7a344833ee726aba6b647cf5952e56f0ad1ba420b13325","ci/lld-shim.rs":"3d7f71ec23a49e2b67f694a0168786f9a954dda15f5a138815d966643fd3fcc3","ci/max_line_width.sh":"0a1518bba4c9ecaa55694cb2e9930d0e19c265baabf73143f17f9cf285aaa5bb","ci/run-docker.sh":"92e036390ad9b0d16f109579df1b5ced2e72e9afea40c7d011400ebd3a2a90de","ci/run.sh":"63259e22a96ba539f53c06b1b39f53e3a78a71171652e7afc170836110ccd913","ci/run_examples.sh":"d1a23c6c35374a0678ba5114b9b8fefd8be0a79e774872a8bf0898d1baca18d0","ci/runtest-android.rs":"145a8e9799a5223975061fe7e586ade5669ee4877a7d7a4cf6b4ab48e8e36c7c","ci/setup_benchmarks.sh":"73fb981a8fdb1dcd54409d3c0fbbfb8f77a3ceabf8626a6b9bf9d21d6bc8ce72","ci/test-runner-linux":"c8aa6025cff5306f4f31d0c61dc5f9d4dd5a1d189ab613ef8d4c367c694d9ccd","contributing.md":"2cc8c9c560ae17867e69b06d09b758dbf7bc39eb774ada50a743724b10acc0a2","perf-guide/book.toml":"115a98284126c6b180178b44713314cc494f08a71662ee2ce15cf67f17a51064","perf-guide/src/SUMMARY.md":"3e03bffc991fdc2050f3d51842d72d9d21ea6abab56a3baf3b2d5973a78b89e1","perf-guide/src/ascii.css":"29afb08833b2fe2250f0412e1fa1161a2432a0820a14953c87124407417c741a","perf-guide/src/bound_checks.md":"5e4991ff58a183ef0cd9fdc1feb4cd12d083b44bdf87393bbb0927808ef3ce7d","perf-guide/src/float-math/approx.md":"8c09032fa2d795a0c5db1775826c850d28eb2627846d0965c60ee72de63735ad","perf-guide/src/float-math/fma.md":"311076ba4b741d604a82e74b83a8d7e8c318fcbd7f64c4392d1cf5af95c60243","perf-guide/src/float-math/fp.md":"04153e775ab6e4f0d7837bcc515230d327b04edfa34c84ce9c9e10ebaeef2be8","perf-guide/src/float-math/svml.md":"0798873b8eedaeda5fed62dc91645b57c20775a02d3cd74d8bd06958f1516506","perf-guide/src/introduction.md":"9f5a19e9e6751f25d2daad39891a0cc600974527ec4c8305843f9618910671bd","perf-guide/src/prof/linux.md":"447731eb5de7d69166728fdbc5ecb0c0c9db678ea493b45a592d67dd002184c0","perf-guide/src/prof/mca.md":"f56d54f3d20e7aa4d32052186e8237b03d65971eb5d112802b442570ff11d344","perf-guide/src/prof/profiling.md":"8a650c0fd6ede0964789bb6577557eeef1d8226a896788602ce61528e260e43c","perf-guide/src/target-feature/attribute.md":"615f88dca0a707b6c416fa605435dd6e1fb5361cc639429cbf68cd87624bd78b","perf-guide/src/target-feature/features.md":"17077760ff24c006b606dd21889c53d87228f4311f3ba3a574f9afdeacd86165","perf-guide/src/target-feature/inlining.md":"7ed1d7068d8173a00d84c16cfe5871cd68b9f04f8d0cca2d01ebc84957ebf2f6","perf-guide/src/target-feature/practice.md":"c4b371842e0086df178488fec97f20def8f0c62ee588bcd25fd948b9b1fa227e","perf-guide/src/target-feature/runtime.md":"835425f5ee597fb3e51d36e725a81ebee29f4561231d19563cd4da81dbb1cfcb","perf-guide/src/target-feature/rustflags.md":"ab49712e9293a65d74d540ba4784fcb57ff1119ec05a575d895c071f1a620f64","perf-guide/src/vert-hor-ops.md":"c6211c0ee91e60552ec592d89d9d957eedc21dee3cbd89e1ad6765ea06a27471","readme.md":"c0cfbcb55a21d5707dbca61c38adcfe77fd276541328399d2477695537ebae3b","rust-toolchain":"2a3b62b53ddb9f167b63d22202a360811ba78df015021f704d01ee9abad4169c","rustfmt.toml":"de6101d0670bad65fb3b337d56957d2a024e017e5ab146ec784d77312daaf8ff","src/api.rs":"f6e92f056565e6fd93f98829a408aee9e790251e0cbd8a8bc30c8662b4d6fabb","src/api/bit_manip.rs":"e68290ee679cc5abc9c73afbe635c1035f8cbfe849e5c751a1680e459244c39e","src/api/bitmask.rs":"6d2beefd62ee5d9c8eb060bee6abc641616bf828c99f82abf97b21bf004e894b","src/api/cast.rs":"b37e872e1b344544ebc30405fc214eaa4861f1711546e63c06ab7ec7b5c6597e","src/api/cast/macros.rs":"b0a14d0c83ad2ebb7a275180f6d9e3f2bc312ba57a7d3d6c39fad4e0f20f9408","src/api/cast/v128.rs":"63e28c6a3edf1a7a635f51b8d3c6adbb1d46f884d92a196b3d4a6e743d809416","src/api/cast/v16.rs":"2a584eeb57fd47baad6f3533764301b04aaaac23702b7a8db12598ac02899262","src/api/cast/v256.rs":"b91c15ed8d1536ecd97b4eb79ff9d5aba0552cd9b6f0ea6435b05f2273e23b3a","src/api/cast/v32.rs":"62ec89fcce7fa7f28497ee5770adc8f81d2d3a6b2925b02f7dc06504c40e8f38","src/api/cast/v512.rs":"d855cb943ae7106e9599ef38e30a3afb1c6bd5433178baca54cb128fd9a7d143","src/api/cast/v64.rs":"fe0f7dfaf4fc0c0c1a78c96fcfcdfdc2a1e2845843b11aa797a0c6fb52a8f774","src/api/cmp.rs":"357c3a2a09c6d4611c32dd7fa95be2fae933d513e229026ec9b44451a77b884e","src/api/cmp/eq.rs":"60f70f355bae4cb5b17db53204cacc3890f70670611c17df638d4c04f7cc8075","src/api/cmp/ord.rs":"589f7234761c294fa5df8f525bc4acd5a47cdb602207d524a0d4e19804cd9695","src/api/cmp/partial_eq.rs":"b574d95fca8c2e3da1dd88085a7c501fad798aa63a65be8536405cf97eb23e5f","src/api/cmp/partial_ord.rs":"e16b11805c94048acd058c93994b5bc74bb187f8d7e3b86a87df60e1601467f9","src/api/cmp/vertical.rs":"de3d62f38eba817299aa16f1e1939954c9a447e316509397465c2830852ba053","src/api/default.rs":"b61f92fc0e33a2633b3375eb405beba480da071cde03df4d437d8a6058afcd97","src/api/fmt.rs":"67fb804bb86b6cd77cf8cd492b5733ce437071b66fe3297278b8a6552c325dda","src/api/fmt/binary.rs":"649fcb1b7d7ca37fe0bf924f70a73864736cf9a2ebb3e935e2a275cc658592bd","src/api/fmt/debug.rs":"41161f979ce5ba09fef3d584cc318d6820761486ed8a6f0e93ab108e0e174bbf","src/api/fmt/lower_hex.rs":"9a0f19774a9083cb3399f63e8d0fed70a1fcf281a149b50364b684a3870b8c7a","src/api/fmt/octal.rs":"5fe82d1a8d2d7aa65078ae2b269ea74ad81650931761e4493394c3292bf85f50","src/api/fmt/upper_hex.rs":"e949cb4a691f77f88f773d7a8a89f5c1ecbd94e005bf964724b10cc123da5a86","src/api/from.rs":"2e599d8329cb05eaf06224cc441355c4b7b51254fc19256619333be8c149d444","src/api/from/from_array.rs":"4151593c7bba7455821fffa5b59867005a77c95d32f1f0cc3fd87294000157d9","src/api/from/from_vector.rs":"9764371aa9e6005aace74dea14f59e5611a095b7cf42707940924749282c52f0","src/api/hash.rs":"562cfa3f1d8eb9a733c035a3665a599c2f1e341ee820d8fbdd102a4398a441bc","src/api/into_bits.rs":"82297f0697d67b5a015e904e7e6e7b2a7066ba825bc54b94b4ff3e22d7a1eefb","src/api/into_bits/arch_specific.rs":"1f925390b0ce7132587d95f2419c6e2ad3e1a9d17eb1d9c120a1c1c4bdf4277e","src/api/into_bits/macros.rs":"d762406de25aedff88d460dec7a80dc8e825a2a419d53218ce007efa6a1d3e04","src/api/into_bits/v128.rs":"ecdc5893664c71d7ab1ff3697c3fbe490d20d8748b9b76881d05e7625e40d74c","src/api/into_bits/v16.rs":"5459ec7dad1ad7bd30dc7e48374580b993abf23701d9c3cb22203fa0a9aabb6d","src/api/into_bits/v256.rs":"90ea351da0380ead1bf0f63b620afd40d01d638d09f7e7be31840bd2c1d9c663","src/api/into_bits/v32.rs":"ee1dc5a430050e16f51154b5fe85b1536f5feddf2ea23dd1d3859b67c4afc6fc","src/api/into_bits/v512.rs":"f72098ed1c9a23944f3d01abaf5e0f2d0e81d35a06fdadd2183e896d41b59867","src/api/into_bits/v64.rs":"6394462facdfe7827349c742b7801f1291e75a720dfb8c0b52100df46f371c98","src/api/math.rs":"8b2a2fc651917a850539f993aa0b9e5bf4da67b11685285b8de8cdca311719ec","src/api/math/float.rs":"61d2794d68262a1090ae473bd30793b5f65cf732f32a6694a3af2ce5d9225616","src/api/math/float/abs.rs":"5b6b2701e2e11135b7ce58a05052ea8120e10e4702c95d046b9d21b827b26bf8","src/api/math/float/consts.rs":"78acba000d3fa527111300b6327c1932de9c4c1e02d4174e1a5615c01463d38c","src/api/math/float/cos.rs":"4c2dd7173728ef189314f1576c9486e03be21b7da98843b2f9011282a7979e31","src/api/math/float/exp.rs":"7c6d5f1e304f498a01cfa23b92380c815d7da0ad94eae3483783bc377d287eef","src/api/math/float/ln.rs":"54c7583f3df793b39ff57534fade27b41bb992439e5dc178252f5ca3190a3e54","src/api/math/float/mul_add.rs":"62cac77660d20159276d4c9ef066eb90c81cbddb808e8e157182c607625ad2eb","src/api/math/float/mul_adde.rs":"bae056ee9f3a70df39ec3c3b2f6437c65303888a7b843ef1a5bcf1f5aca0e602","src/api/math/float/powf.rs":"9ddb938984b36d39d82a82f862f80df8f7fb013f1d222d45698d41d88472f568","src/api/math/float/recpre.rs":"589225794ff1dbf31158dff660e6d4509ecc8befbb57c633900dea5ac0b840d6","src/api/math/float/rsqrte.rs":"a32abdcc318d7ccc8448231f54d75b884b7cbeb03a7d595713ab6243036f4dbf","src/api/math/float/sin.rs":"cbd3622b7df74f19691743001c8cf747a201f8977ad90542fee915f37dcd1e49","src/api/math/float/sqrt.rs":"0c66d5d63fb08e4d99c6b82a8828e41173aff1ac9fa1a2764a11fac217ccf2ac","src/api/math/float/sqrte.rs":"731e1c9f321b662accdd27dacb3aac2e8043b7aecb2f2161dde733bd9f025362","src/api/minimal.rs":"1f22bcc528555444e76de569ec0ae2029b9ae9d04805efeafa93369c8098036b","src/api/minimal/iuf.rs":"c38667a77b72f71b6be3fbb5d5f3690278223f58bc5fb83222f8a8e03d5f78f9","src/api/minimal/mask.rs":"75ecde186b47ba12c3bd4cf50fc6763f66fa81ef2450d9ce8cd0f63f7f94ae30","src/api/minimal/ptr.rs":"3f4affc618a08fde8fe2f86486045d3b993d845f2b28af5e4a902f1614e745a2","src/api/ops.rs":"3e273b277a0f3019d42c3c59ca94a5afd4885d5ae6d2182e5089bbeec9de42ee","src/api/ops/scalar_arithmetic.rs":"d2d5ad897a59dd0787544f927e0e7ca4072c3e58b0f4a2324083312b0d5a21d7","src/api/ops/scalar_bitwise.rs":"482204e459ca6be79568e1c9f70adbe2d2151412ddf122fb2161be8ebb51c40c","src/api/ops/scalar_mask_bitwise.rs":"c250f52042e37b22d57256c80d4604104cfd2fbe2a2e127c676267270ca5d350","src/api/ops/scalar_shifts.rs":"987f8fdebeedc16e3d77c1b732e7826ef70633c541d16dfa290845d5c6289150","src/api/ops/vector_arithmetic.rs":"ddca15d09ddeef502c2ed66117a62300ca65d87e959e8b622d767bdf1c307910","src/api/ops/vector_bitwise.rs":"b3968f7005b649edcc22a54e2379b14d5ee19045f2e784029805781ae043b5ee","src/api/ops/vector_float_min_max.rs":"f5155dce75219f4ba11275b1f295d2fdcddd49d174a6f1fb2ace7ea42813ce41","src/api/ops/vector_int_min_max.rs":"a378789c6ff9b32a51fbd0a97ffd36ed102cd1fe6a067d2b02017c1df342def6","src/api/ops/vector_mask_bitwise.rs":"5052d18517d765415d40327e6e8e55a312daaca0a5e2aec959bfa54b1675f9c8","src/api/ops/vector_neg.rs":"5c62f6b0221983cdbd23cd0a3af3672e6ba1255f0dfe8b19aae6fbd6503e231b","src/api/ops/vector_rotates.rs":"03cbe8a400fd7c688e4ee771a990a6754f2031b1a59b19ae81158b21471167e5","src/api/ops/vector_shifts.rs":"9bf69d0087268f61009e39aea52e03a90f378910206b6a28e8393178b6a5d0e0","src/api/ptr.rs":"8a793251bed6130dcfb2f1519ceaa18b751bbb15875928d0fb6deb5a5e07523a","src/api/ptr/gather_scatter.rs":"9ddd960365e050674b25b2fd3116e24d94669b4375d74e71c03e3f1469576066","src/api/reductions.rs":"ae5baca81352ecd44526d6c30c0a1feeda475ec73ddd3c3ec6b14e944e5448ee","src/api/reductions/bitwise.rs":"8bf910ae226188bd15fc7e125f058cd2566b6186fcd0cd8fd020f352c39ce139","src/api/reductions/float_arithmetic.rs":"e58c8c87806a95df2b2b5b48ac5991036df024096d9d7c171a480fe9282896a4","src/api/reductions/integer_arithmetic.rs":"47471da1c5f859489680bb5d34ced3d3aa20081c16053a3af121a4496fcb57bf","src/api/reductions/mask.rs":"fcc21a0301545212d61800da65684a4ef1cb4fcc8671ee2effc30fa3e93760f7","src/api/reductions/min_max.rs":"f27be3aa28e1c1f46de7890198db6e12f00c207085e89ef2de7e57ee443cdb98","src/api/select.rs":"a98e2ccf9fc6bdeed32d337c8675bc96c2fbe2cc34fbf149ad6047fb8e749774","src/api/shuffle.rs":"da58200790868c09659819322a489929a5b6e56c596ed07e6a44293ea02e7d09","src/api/shuffle1_dyn.rs":"bfea5a91905b31444e9ef7ca6eddb7a9606b7e22d3f71bb842eb2795a0346620","src/api/slice.rs":"ee87484e8af329547b9a5d4f2a69e8bed6ea10bbd96270d706083843d4eea2ac","src/api/slice/from_slice.rs":"619deaf6d01c53c2ae3817a7b8ab592dceecd425b0959890a3a87fec2dcaba48","src/api/slice/write_to_slice.rs":"2bf74f490fdf0ae8d23af442a0411fe91c57c6e824368ca378f3cd9b20504d31","src/api/swap_bytes.rs":"4a6792a2e49a77475e1b237592b4b2804dbddb79c474331acd0dd71b36934259","src/codegen.rs":"c6eebc3d3665420aa6a2f317977e3c41a4f43e0550ac630cdbe8e4bbed5e2031","src/codegen/bit_manip.rs":"5559e095105a80003e0de35af1d19b0c65c9ab04eb743c7e01c5442d882eb34e","src/codegen/llvm.rs":"6cc1962f434e68d13049d37a095f0723518cefaae6abdd4cd29d0bf57006e43a","src/codegen/math.rs":"35f96e37a78fcf0cdb02146b7f27a45108fe06a37fc2a54d8851ce131a326178","src/codegen/math/float.rs":"fb6e74d65c3b50cabcd77c5f83ab19eaca7e17883193e61ad9c26e01a3a76a1a","src/codegen/math/float/abs.rs":"f56e2b4b8055ea861c1f5cbc6b6e1d8e7e5af163b62c13574ddee4e09513bfbc","src/codegen/math/float/cos.rs":"ef3b511a24d23045b310315e80348a9b7fedb576fc2de52d74290616a0abeb2a","src/codegen/math/float/cos_pi.rs":"4e7631a5d73dac21531e09ef1802d1180f8997509c2c8fa9f67f322194263a97","src/codegen/math/float/exp.rs":"61b691598c41b5622f24e4320c1bdd08701e612a516438bdddcc728fc3405c8c","src/codegen/math/float/ln.rs":"46b718b1ba8c9d99e1ad40f53d20dfde08a3063ca7bd2a9fdd6698e060da687e","src/codegen/math/float/macros.rs":"dd42135fff13f9aca4fd3a1a4e14c7e6c31aadc6d817d63b0d2fb9e62e062744","src/codegen/math/float/mul_add.rs":"a37bf764345d4b1714f97e83897b7cf0855fc2811704bcbc0012db91825339e1","src/codegen/math/float/mul_adde.rs":"c75702bfcb361de45964a93caf959a695ef2376bd069227600b8c6872665c755","src/codegen/math/float/powf.rs":"642346e982bc4c39203de0864d2149c4179cd7b21cf67a2951687932b4675872","src/codegen/math/float/sin.rs":"9d68164c90cdca6a85155040cdac42e27342ebe0b925273ef1593df721af4258","src/codegen/math/float/sin_cos_pi.rs":"9be02ad48585a1e8d99129382fbffbaed47852f15459256a708850b6b7a75405","src/codegen/math/float/sin_pi.rs":"9890347905b4d4a3c7341c3eb06406e46e60582bcf6960688bd727e5dadc6c57","src/codegen/math/float/sqrt.rs":"e3c60dcfb0c6d2fc62adabcc931b2d4040b83cab294dea36443fb4b89eb79e34","src/codegen/math/float/sqrte.rs":"f0f4ef9eb475ae41bcc7ec6a95ad744ba6b36925faa8b2c2814004396d196b63","src/codegen/pointer_sized_int.rs":"a70697169c28218b56fd2e8d5353f2e00671d1150d0c8cef77d613bdfacd84cb","src/codegen/reductions.rs":"645e2514746d01387ddd07f0aa4ffd8430cc9ab428d4fb13773ea319fa25dd95","src/codegen/reductions/mask.rs":"8f1afe6aabf096a3278e1fc3a30f736e04aa8b9ce96373cee22162d18cfe2702","src/codegen/reductions/mask/aarch64.rs":"cba6e17603d39795dcfe8339b6b7d8714c3e162a1f0a635979f037aa24fe4206","src/codegen/reductions/mask/arm.rs":"9447904818aa2c7c25d0963eead452a639a11ca7dbd6d21eedbfcaade07a0f33","src/codegen/reductions/mask/fallback.rs":"7a0ef9f7fd03ae318b495b95e121350cd61caffc5cc6ee17fabf130d5d933453","src/codegen/reductions/mask/fallback_impl.rs":"76547f396e55ef403327c77c314cf8db8c7a5c9b9819bfb925abeacf130249e5","src/codegen/reductions/mask/x86.rs":"14bd2c482071f2355beebcf7b7ecf950ff2dfcdb08c3ca50993092434a9de717","src/codegen/reductions/mask/x86/avx.rs":"b4913d87844c522903641cbbf10db4551addb1ce5e9e78278e21612fa65c733b","src/codegen/reductions/mask/x86/avx2.rs":"677aed3f056285285daa3adff8bc65e739630b4424defa6d9665e160f027507e","src/codegen/reductions/mask/x86/sse.rs":"226610b4ff88c676d5187114dd57b4a8800de6ce40884675e9198445b1ed0306","src/codegen/reductions/mask/x86/sse2.rs":"bc38e6c31cb4b3d62147eba6cac264e519e2a48e0f7ce9010cfa9ef0cf0ec9fd","src/codegen/shuffle.rs":"0abca97e92cdce49a58a39cc447eb09dc7d7715ef256c8dbd2181a186e61bb64","src/codegen/shuffle1_dyn.rs":"04523e9338133bdedb012dd076c2c564b79ce5593b0fc56d0fb6910e04190a81","src/codegen/swap_bytes.rs":"983fa0cc2960e7823e5850fb863db3207caea78709abdca2400cd1cf99f51100","src/codegen/v128.rs":"94226b31ec403d18d9d2fe06713f147c9c79e9b5f9105089088266313f843185","src/codegen/v16.rs":"ddec4ffb66b6f7aaffb9a1780c5ddba82557abd74f45073d335047e04cf74924","src/codegen/v256.rs":"6b63917f0444118d6b1595bff2045e59b97c4d24012bd575f69f1f0efc5a0241","src/codegen/v32.rs":"3477b3c5540aed86e61e2f5807dd31db947413cec9181c587d93ed6ec74f0eba","src/codegen/v512.rs":"5854f99d3aabc4cd42b28a20d9ce447756dc2ba024a409a69b6a8ae1f1842fc5","src/codegen/v64.rs":"e9e89caebfe63d10c0cbca61e4dfdba3b7e02ee0989170f80beed23237ddd950","src/codegen/vPtr.rs":"96d609a9eece4dcbbcc01ba0b8744d7f5958be12774176a2945bc676f4e6b5cb","src/codegen/vSize.rs":"eeee9858749aa82142b27bc120d1989bb74a6b82e1e4efbbeaccc9634dc9acfc","src/lib.rs":"ed6b6ef4a60833a32b6e5d99fdb69a9981174e2451fdb4111731da8734c94308","src/masks.rs":"d99df2d2b16d21560b4e92864a45356e4cc9bcc8c6f54ed90f32ba1e6056498c","src/sealed.rs":"ff7f0324276408ae8249941cfa32c90b8835a54d750896b683efea857af19db2","src/testing.rs":"1d3a7862ef625e235a5734ad7204e68d350f902c0695182b1f08a0552432416e","src/testing/macros.rs":"6378856d7a40ba5ec5c7c0dad6327d79f0c77266921c24296d10aed6c68e9b98","src/testing/utils.rs":"d6fd5a5017f1f85d9d99585754f8f6ad06fc3d683b34083543e67a7cc6c1772c","src/v128.rs":"ad7ab5c22ecda7821da73d20c3cbb9d654e58bec567a0ecd6c4c79be72c55499","src/v16.rs":"cb6465cf1e00bf530183af1819b9fe3d7eec978f8765d5e85d9b58a39a4b4045","src/v256.rs":"f98d395cb1ea16c97ebd2ee6d5b57d11cd3f52ef909e3542f52206f93b556923","src/v32.rs":"145d347855bac59b2de6508f9e594654e6c330423af9edc0e2ac8f4d1abdf45e","src/v512.rs":"0ca5956f0e4b6c36a160ea175e92ebc6d32fd2a91d75f7de0c29b6987d771ffb","src/v64.rs":"308b0298a695b58ff2e3441fa700b215105681576a07c11d49ec2821ad690833","src/vPtr.rs":"c9a53f41f466e17b6648a4ce390fd8f4d3a848d440eb8a9a803a11608d76eb05","src/vSize.rs":"7142f5da3c8099f53634c57329e86d220da40d426803bb7ab6a66fba9653c922","tests/endianness.rs":"541a144be017e3dd7da7c8ea49d907dc02538245e8c5f3deb5bd43da92c929e1"},"package":"a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220"}
\ No newline at end of file
+{"files":{".appveyor.yml":"f1ed01850e0d725f9498f52a1a63ddf40702ad6e0bf5b2d7c4c04d76e96794a3",".travis.yml":"e9258d9a54fdaf4cbc12405fe5993ac4497eb2b29021691dbc91b19cb9b52227","Cargo.toml":"089941ba3c89ea111cbea3cc3abdcdcf2b9d0ae0db268d7269ee38226db950e5","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"6485b8ed310d3f0340bf1ad1f47645069ce4069dcc6bb46c7d5c6faf41de1fdb","bors.toml":"dee881dc69b9b7834e4eba5d95c3ed5a416d4628815a167d6a22d4cb4fb064b8","build.rs":"f3baefc5e5bb9b250e762a1466371b922fd7ee4243c217b2d014307603c2f57a","ci/all.sh":"a23d14e10cb26a0eb719e389c30eb955fa53cddcd436890646df09af640bd2eb","ci/android-install-ndk.sh":"0f1746108cc30bf9b9ba45bcde7b19fc1a8bdf5b0258035b4eb8dc69b75efac4","ci/android-install-sdk.sh":"3490432022c5c8f5a115c084f7a9aca1626f96c0c87ffb62019228c4346b47e4","ci/android-sysimage.sh":"ebf4e5daa1f0fe1b2092b79f0f3f161c4c4275cb744e52352c4d81ab451e4c5a","ci/benchmark.sh":"b61d19ef6b90deba8fb79dee74c8b062d94844676293da346da87bb78a9a49a4","ci/deploy_and_run_on_ios_simulator.rs":"ec8ecf82d92072676aa47f0d1a3d021b60a7ae3531153ef12d2ff4541fc294dc","ci/docker/aarch64-linux-android/Dockerfile":"ace2e7d33c87bc0f6d3962a4a3408c04557646f7f51ab99cfbf574906796b016","ci/docker/aarch64-unknown-linux-gnu/Dockerfile":"1ecdac757101d951794fb2ab0deaa278199cf25f2e08a15c7d40ff31a8556184","ci/docker/arm-linux-androideabi/Dockerfile":"370e55d3330a413a3ccf677b3afb3e0ef9018a5fab263faa97ae8ac017fc2286","ci/docker/arm-unknown-linux-gnueabi/Dockerfile":"e25d88f6c0c94aada3d2e3f08243f755feb7e869dc5dc505b3799719cb1af591","ci/docker/arm-unknown-linux-gnueabihf/Dockerfile":"f126f4c7bae8c11ab8b16df06ad997863f0838825a9c08c9899a3eedb6d570bd","ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile":"b647545c158ee480a4c581dbdc1f57833aef056c8d498acc04b573e842bf803c","ci/docker/i586-unknown-linux-gnu/Dockerfile":"0d492759017307ccf74dc2aa4a8cf6623daf3dc728c708dc2b18fa7940800cba","ci/docker/i686-unknown-linux-gnu/Dockerfile":"0d492759017307ccf74dc2aa4a8cf6623daf3dc728c708dc2b18fa7940800cba","ci/docker/mips-unknown-linux-gnu/Dockerfile":"323776469bb7b160385f3621d66e3ee14c75242f8180f916e65af048a29d4ea0","ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile":"c647f6948a9a43b0be695cbed4eac752120d0faf28e5e69c718cb10406921dab","ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile":"77bfd00cc8639509be381b394f077e39b45a00158ad61b4e1656714c714665d1","ci/docker/mipsel-unknown-linux-musl/Dockerfile":"ec5bea6c98a3b626731fdb95f9ff2d1182639c76e8fb16d3271d0fc884901524","ci/docker/powerpc-unknown-linux-gnu/Dockerfile":"4f2b662de66e83d1354f650b7077692309637f786c2ea5516c31b5c2ee10af2d","ci/docker/powerpc64-unknown-linux-gnu/Dockerfile":"a9595402b772bc365982e22a0096a8988825d90b09b5faa97ab192e76072f71d","ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile":"df3c381c157439695ae8cd10ab71664702c061e3b4ab22906a5ad6c2680acfed","ci/docker/s390x-unknown-linux-gnu/Dockerfile":"93fb44df3d7fd31ead158570667c97b5076a05c3d968af4a84bc13819a8f2db8","ci/docker/sparc64-unknown-linux-gnu/Dockerfile":"da1c39a3ff1fe22e41395fa7c8934e90b4c1788e551b9aec6e38bfd94effc437","ci/docker/thumbv7neon-linux-androideabi/Dockerfile":"c2decd5591bd7a09378901bef629cd944acf052eb55e4f35b79eb9cb4d62246a","ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile":"75c0c56161c7382b439de74c00de1c0e3dc9d59560cd6720976a751034b78714","ci/docker/wasm32-unknown-unknown/Dockerfile":"3e5f294bc1e004aa599086c2af49d6f3e7459fa250f5fbdd60cf67d53db78758","ci/docker/x86_64-linux-android/Dockerfile":"685040273cf350d5509e580ac451555efa19790c8723ca2af066adadc6880ad2","ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile":"44b6203d9290bfdc53d81219f0937e1110847a23dd982ec8c4de388354f01536","ci/docker/x86_64-unknown-linux-gnu/Dockerfile":"d253c86803b22da428fa9cc671a05f18d3318eca7733b8dccb4f7be1ddf524c5","ci/dox.sh":"5b61711be47a4e3dde0ddd15ba73d256ea95fd75af3897732c24db1dc7e66366","ci/linux-s390x.sh":"d6b732d7795b4ba131326aff893bca6228a7d2eb0e9402f135705413dbbe0dce","ci/linux-sparc64.sh":"c92966838b1ab7ad3b7a344833ee726aba6b647cf5952e56f0ad1ba420b13325","ci/lld-shim.rs":"3d7f71ec23a49e2b67f694a0168786f9a954dda15f5a138815d966643fd3fcc3","ci/max_line_width.sh":"0a1518bba4c9ecaa55694cb2e9930d0e19c265baabf73143f17f9cf285aaa5bb","ci/run-docker.sh":"92e036390ad9b0d16f109579df1b5ced2e72e9afea40c7d011400ebd3a2a90de","ci/run.sh":"63259e22a96ba539f53c06b1b39f53e3a78a71171652e7afc170836110ccd913","ci/run_examples.sh":"d1a23c6c35374a0678ba5114b9b8fefd8be0a79e774872a8bf0898d1baca18d0","ci/runtest-android.rs":"145a8e9799a5223975061fe7e586ade5669ee4877a7d7a4cf6b4ab48e8e36c7c","ci/setup_benchmarks.sh":"73fb981a8fdb1dcd54409d3c0fbbfb8f77a3ceabf8626a6b9bf9d21d6bc8ce72","ci/test-runner-linux":"c8aa6025cff5306f4f31d0c61dc5f9d4dd5a1d189ab613ef8d4c367c694d9ccd","contributing.md":"2cc8c9c560ae17867e69b06d09b758dbf7bc39eb774ada50a743724b10acc0a2","perf-guide/.gitignore":"fe82c7da551079d832cf74200b0b359b4df9828cb4a0416fa7384f07a2ae6a13","perf-guide/book.toml":"115a98284126c6b180178b44713314cc494f08a71662ee2ce15cf67f17a51064","perf-guide/src/SUMMARY.md":"3e03bffc991fdc2050f3d51842d72d9d21ea6abab56a3baf3b2d5973a78b89e1","perf-guide/src/ascii.css":"29afb08833b2fe2250f0412e1fa1161a2432a0820a14953c87124407417c741a","perf-guide/src/bound_checks.md":"5e4991ff58a183ef0cd9fdc1feb4cd12d083b44bdf87393bbb0927808ef3ce7d","perf-guide/src/float-math/approx.md":"8c09032fa2d795a0c5db1775826c850d28eb2627846d0965c60ee72de63735ad","perf-guide/src/float-math/fma.md":"311076ba4b741d604a82e74b83a8d7e8c318fcbd7f64c4392d1cf5af95c60243","perf-guide/src/float-math/fp.md":"04153e775ab6e4f0d7837bcc515230d327b04edfa34c84ce9c9e10ebaeef2be8","perf-guide/src/float-math/svml.md":"0798873b8eedaeda5fed62dc91645b57c20775a02d3cd74d8bd06958f1516506","perf-guide/src/introduction.md":"9f5a19e9e6751f25d2daad39891a0cc600974527ec4c8305843f9618910671bd","perf-guide/src/prof/linux.md":"447731eb5de7d69166728fdbc5ecb0c0c9db678ea493b45a592d67dd002184c0","perf-guide/src/prof/mca.md":"f56d54f3d20e7aa4d32052186e8237b03d65971eb5d112802b442570ff11d344","perf-guide/src/prof/profiling.md":"8a650c0fd6ede0964789bb6577557eeef1d8226a896788602ce61528e260e43c","perf-guide/src/target-feature/attribute.md":"615f88dca0a707b6c416fa605435dd6e1fb5361cc639429cbf68cd87624bd78b","perf-guide/src/target-feature/features.md":"17077760ff24c006b606dd21889c53d87228f4311f3ba3a574f9afdeacd86165","perf-guide/src/target-feature/inlining.md":"7ed1d7068d8173a00d84c16cfe5871cd68b9f04f8d0cca2d01ebc84957ebf2f6","perf-guide/src/target-feature/practice.md":"c4b371842e0086df178488fec97f20def8f0c62ee588bcd25fd948b9b1fa227e","perf-guide/src/target-feature/runtime.md":"835425f5ee597fb3e51d36e725a81ebee29f4561231d19563cd4da81dbb1cfcb","perf-guide/src/target-feature/rustflags.md":"ab49712e9293a65d74d540ba4784fcb57ff1119ec05a575d895c071f1a620f64","perf-guide/src/vert-hor-ops.md":"c6211c0ee91e60552ec592d89d9d957eedc21dee3cbd89e1ad6765ea06a27471","readme.md":"585a8f0e16877fb9abb00cd17a175fcb9d7857840c6c61209f1827ffab095070","rustfmt.toml":"de6101d0670bad65fb3b337d56957d2a024e017e5ab146ec784d77312daaf8ff","src/api.rs":"331a3a4abb19cee2df5f2df4ad7c3e88b45e62cf23fdacfc9bbaa633dc5cf788","src/api/bit_manip.rs":"e68290ee679cc5abc9c73afbe635c1035f8cbfe849e5c751a1680e459244c39e","src/api/cast.rs":"03b94a3d316ac7b7be7068810044911e965e889a0ace7bae762749ca74a92747","src/api/cast/macros.rs":"b0a14d0c83ad2ebb7a275180f6d9e3f2bc312ba57a7d3d6c39fad4e0f20f9408","src/api/cast/v128.rs":"63e28c6a3edf1a7a635f51b8d3c6adbb1d46f884d92a196b3d4a6e743d809416","src/api/cast/v16.rs":"2a584eeb57fd47baad6f3533764301b04aaaac23702b7a8db12598ac02899262","src/api/cast/v256.rs":"b91c15ed8d1536ecd97b4eb79ff9d5aba0552cd9b6f0ea6435b05f2273e23b3a","src/api/cast/v32.rs":"62ec89fcce7fa7f28497ee5770adc8f81d2d3a6b2925b02f7dc06504c40e8f38","src/api/cast/v512.rs":"d855cb943ae7106e9599ef38e30a3afb1c6bd5433178baca54cb128fd9a7d143","src/api/cast/v64.rs":"fe0f7dfaf4fc0c0c1a78c96fcfcdfdc2a1e2845843b11aa797a0c6fb52a8f774","src/api/cmp.rs":"357c3a2a09c6d4611c32dd7fa95be2fae933d513e229026ec9b44451a77b884e","src/api/cmp/eq.rs":"60f70f355bae4cb5b17db53204cacc3890f70670611c17df638d4c04f7cc8075","src/api/cmp/ord.rs":"589f7234761c294fa5df8f525bc4acd5a47cdb602207d524a0d4e19804cd9695","src/api/cmp/partial_eq.rs":"3ed23d2a930b0f9750c3a5309da766b03dc4f9c4d375b42ad3c50fe732693d15","src/api/cmp/partial_ord.rs":"e16b11805c94048acd058c93994b5bc74bb187f8d7e3b86a87df60e1601467f9","src/api/cmp/vertical.rs":"de3d62f38eba817299aa16f1e1939954c9a447e316509397465c2830852ba053","src/api/default.rs":"b61f92fc0e33a2633b3375eb405beba480da071cde03df4d437d8a6058afcd97","src/api/fmt.rs":"67fb804bb86b6cd77cf8cd492b5733ce437071b66fe3297278b8a6552c325dda","src/api/fmt/binary.rs":"35cb5c266197d6224d598fb3d286e5fe48ef0c01ed356c2ff6fe9ba946f96a92","src/api/fmt/debug.rs":"aa18eea443bf353fea3db8b1a025132bbcaf91e747ecfa43b8d9fce9af395a0c","src/api/fmt/lower_hex.rs":"69d5be366631af309f214e8031c8c20267fcc27a695eac6f45c6bc1df72a67e6","src/api/fmt/octal.rs":"9eb11ba3d990213f3c7f1ec25edba7ce997cb1320e16d308c83498ba6b9bfbd9","src/api/fmt/upper_hex.rs":"a4637d085b7bb20e759ce58e08435b510a563ba3dd468af2b03560fdc5511562","src/api/from.rs":"2e599d8329cb05eaf06224cc441355c4b7b51254fc19256619333be8c149d444","src/api/from/from_array.rs":"4151593c7bba7455821fffa5b59867005a77c95d32f1f0cc3fd87294000157d9","src/api/from/from_vector.rs":"9764371aa9e6005aace74dea14f59e5611a095b7cf42707940924749282c52f0","src/api/hash.rs":"562cfa3f1d8eb9a733c035a3665a599c2f1e341ee820d8fbdd102a4398a441bc","src/api/into_bits.rs":"82297f0697d67b5a015e904e7e6e7b2a7066ba825bc54b94b4ff3e22d7a1eefb","src/api/into_bits/arch_specific.rs":"1f925390b0ce7132587d95f2419c6e2ad3e1a9d17eb1d9c120a1c1c4bdf4277e","src/api/into_bits/macros.rs":"d762406de25aedff88d460dec7a80dc8e825a2a419d53218ce007efa6a1d3e04","src/api/into_bits/v128.rs":"ecdc5893664c71d7ab1ff3697c3fbe490d20d8748b9b76881d05e7625e40d74c","src/api/into_bits/v16.rs":"5459ec7dad1ad7bd30dc7e48374580b993abf23701d9c3cb22203fa0a9aabb6d","src/api/into_bits/v256.rs":"90ea351da0380ead1bf0f63b620afd40d01d638d09f7e7be31840bd2c1d9c663","src/api/into_bits/v32.rs":"ee1dc5a430050e16f51154b5fe85b1536f5feddf2ea23dd1d3859b67c4afc6fc","src/api/into_bits/v512.rs":"f72098ed1c9a23944f3d01abaf5e0f2d0e81d35a06fdadd2183e896d41b59867","src/api/into_bits/v64.rs":"6394462facdfe7827349c742b7801f1291e75a720dfb8c0b52100df46f371c98","src/api/math.rs":"8b2a2fc651917a850539f993aa0b9e5bf4da67b11685285b8de8cdca311719ec","src/api/math/float.rs":"61d2794d68262a1090ae473bd30793b5f65cf732f32a6694a3af2ce5d9225616","src/api/math/float/abs.rs":"5b6b2701e2e11135b7ce58a05052ea8120e10e4702c95d046b9d21b827b26bf8","src/api/math/float/consts.rs":"78acba000d3fa527111300b6327c1932de9c4c1e02d4174e1a5615c01463d38c","src/api/math/float/cos.rs":"4c2dd7173728ef189314f1576c9486e03be21b7da98843b2f9011282a7979e31","src/api/math/float/exp.rs":"7c6d5f1e304f498a01cfa23b92380c815d7da0ad94eae3483783bc377d287eef","src/api/math/float/ln.rs":"54c7583f3df793b39ff57534fade27b41bb992439e5dc178252f5ca3190a3e54","src/api/math/float/mul_add.rs":"62cac77660d20159276d4c9ef066eb90c81cbddb808e8e157182c607625ad2eb","src/api/math/float/mul_adde.rs":"bae056ee9f3a70df39ec3c3b2f6437c65303888a7b843ef1a5bcf1f5aca0e602","src/api/math/float/powf.rs":"9ddb938984b36d39d82a82f862f80df8f7fb013f1d222d45698d41d88472f568","src/api/math/float/recpre.rs":"589225794ff1dbf31158dff660e6d4509ecc8befbb57c633900dea5ac0b840d6","src/api/math/float/rsqrte.rs":"a32abdcc318d7ccc8448231f54d75b884b7cbeb03a7d595713ab6243036f4dbf","src/api/math/float/sin.rs":"cbd3622b7df74f19691743001c8cf747a201f8977ad90542fee915f37dcd1e49","src/api/math/float/sqrt.rs":"0c66d5d63fb08e4d99c6b82a8828e41173aff1ac9fa1a2764a11fac217ccf2ac","src/api/math/float/sqrte.rs":"731e1c9f321b662accdd27dacb3aac2e8043b7aecb2f2161dde733bd9f025362","src/api/minimal.rs":"1f22bcc528555444e76de569ec0ae2029b9ae9d04805efeafa93369c8098036b","src/api/minimal/iuf.rs":"c501a6696950cf5e521765f178de548af64fdfb6e10d026616d09fab93ca2d17","src/api/minimal/mask.rs":"42e415f536c5193d0218f5a754b34b87fd7c971bff068009f958712166ff056d","src/api/minimal/ptr.rs":"a9ee482d1dd1c956fb8f3f179e6e620b1de4e9d713961461d4c6923a4ef2e67c","src/api/ops.rs":"3e273b277a0f3019d42c3c59ca94a5afd4885d5ae6d2182e5089bbeec9de42ee","src/api/ops/scalar_arithmetic.rs":"d2d5ad897a59dd0787544f927e0e7ca4072c3e58b0f4a2324083312b0d5a21d7","src/api/ops/scalar_bitwise.rs":"482204e459ca6be79568e1c9f70adbe2d2151412ddf122fb2161be8ebb51c40c","src/api/ops/scalar_mask_bitwise.rs":"c250f52042e37b22d57256c80d4604104cfd2fbe2a2e127c676267270ca5d350","src/api/ops/scalar_shifts.rs":"987f8fdebeedc16e3d77c1b732e7826ef70633c541d16dfa290845d5c6289150","src/api/ops/vector_arithmetic.rs":"ddca15d09ddeef502c2ed66117a62300ca65d87e959e8b622d767bdf1c307910","src/api/ops/vector_bitwise.rs":"b3968f7005b649edcc22a54e2379b14d5ee19045f2e784029805781ae043b5ee","src/api/ops/vector_float_min_max.rs":"f5155dce75219f4ba11275b1f295d2fdcddd49d174a6f1fb2ace7ea42813ce41","src/api/ops/vector_int_min_max.rs":"a378789c6ff9b32a51fbd0a97ffd36ed102cd1fe6a067d2b02017c1df342def6","src/api/ops/vector_mask_bitwise.rs":"5052d18517d765415d40327e6e8e55a312daaca0a5e2aec959bfa54b1675f9c8","src/api/ops/vector_neg.rs":"5c62f6b0221983cdbd23cd0a3af3672e6ba1255f0dfe8b19aae6fbd6503e231b","src/api/ops/vector_rotates.rs":"03cbe8a400fd7c688e4ee771a990a6754f2031b1a59b19ae81158b21471167e5","src/api/ops/vector_shifts.rs":"9bf69d0087268f61009e39aea52e03a90f378910206b6a28e8393178b6a5d0e0","src/api/ptr.rs":"8a793251bed6130dcfb2f1519ceaa18b751bbb15875928d0fb6deb5a5e07523a","src/api/ptr/gather_scatter.rs":"9ddd960365e050674b25b2fd3116e24d94669b4375d74e71c03e3f1469576066","src/api/reductions.rs":"ae5baca81352ecd44526d6c30c0a1feeda475ec73ddd3c3ec6b14e944e5448ee","src/api/reductions/bitwise.rs":"8bf910ae226188bd15fc7e125f058cd2566b6186fcd0cd8fd020f352c39ce139","src/api/reductions/float_arithmetic.rs":"e58c8c87806a95df2b2b5b48ac5991036df024096d9d7c171a480fe9282896a4","src/api/reductions/integer_arithmetic.rs":"47471da1c5f859489680bb5d34ced3d3aa20081c16053a3af121a4496fcb57bf","src/api/reductions/mask.rs":"db83327a950e33a317f37fd33ca4e20c347fb415975ec024f3e23da8509425af","src/api/reductions/min_max.rs":"f27be3aa28e1c1f46de7890198db6e12f00c207085e89ef2de7e57ee443cdb98","src/api/select.rs":"a98e2ccf9fc6bdeed32d337c8675bc96c2fbe2cc34fbf149ad6047fb8e749774","src/api/shuffle.rs":"da58200790868c09659819322a489929a5b6e56c596ed07e6a44293ea02e7d09","src/api/shuffle1_dyn.rs":"bfea5a91905b31444e9ef7ca6eddb7a9606b7e22d3f71bb842eb2795a0346620","src/api/slice.rs":"ee87484e8af329547b9a5d4f2a69e8bed6ea10bbd96270d706083843d4eea2ac","src/api/slice/from_slice.rs":"4d4fe8a329c885fcb4fbcbedf99efb15a95296fe6b3f595056cc37037450d5ac","src/api/slice/write_to_slice.rs":"f5b23b2c4b91cfb26b713a9013a6c0da7f45eaefb79ba06dcbc27f3f23bda679","src/api/swap_bytes.rs":"4a6792a2e49a77475e1b237592b4b2804dbddb79c474331acd0dd71b36934259","src/codegen.rs":"c6eebc3d3665420aa6a2f317977e3c41a4f43e0550ac630cdbe8e4bbed5e2031","src/codegen/bit_manip.rs":"5559e095105a80003e0de35af1d19b0c65c9ab04eb743c7e01c5442d882eb34e","src/codegen/llvm.rs":"d1299c189abb17a6133f047574cffc7a6db4c1be37cb7d4785491cb5e8f8cf54","src/codegen/math.rs":"35f96e37a78fcf0cdb02146b7f27a45108fe06a37fc2a54d8851ce131a326178","src/codegen/math/float.rs":"dd86c0449e576c83b719700962ac017c332987fac08d91f2b7a2b1b883598170","src/codegen/math/float/abs.rs":"f56e2b4b8055ea861c1f5cbc6b6e1d8e7e5af163b62c13574ddee4e09513bfbc","src/codegen/math/float/cos.rs":"ef3b511a24d23045b310315e80348a9b7fedb576fc2de52d74290616a0abeb2a","src/codegen/math/float/cos_pi.rs":"4e7631a5d73dac21531e09ef1802d1180f8997509c2c8fa9f67f322194263a97","src/codegen/math/float/exp.rs":"61b691598c41b5622f24e4320c1bdd08701e612a516438bdddcc728fc3405c8c","src/codegen/math/float/ln.rs":"46b718b1ba8c9d99e1ad40f53d20dfde08a3063ca7bd2a9fdd6698e060da687e","src/codegen/math/float/macros.rs":"dd42135fff13f9aca4fd3a1a4e14c7e6c31aadc6d817d63b0d2fb9e62e062744","src/codegen/math/float/mul_add.rs":"a37bf764345d4b1714f97e83897b7cf0855fc2811704bcbc0012db91825339e1","src/codegen/math/float/mul_adde.rs":"c75702bfcb361de45964a93caf959a695ef2376bd069227600b8c6872665c755","src/codegen/math/float/powf.rs":"642346e982bc4c39203de0864d2149c4179cd7b21cf67a2951687932b4675872","src/codegen/math/float/sin.rs":"9d68164c90cdca6a85155040cdac42e27342ebe0b925273ef1593df721af4258","src/codegen/math/float/sin_cos_pi.rs":"9be02ad48585a1e8d99129382fbffbaed47852f15459256a708850b6b7a75405","src/codegen/math/float/sin_pi.rs":"9890347905b4d4a3c7341c3eb06406e46e60582bcf6960688bd727e5dadc6c57","src/codegen/math/float/sqrt.rs":"e3c60dcfb0c6d2fc62adabcc931b2d4040b83cab294dea36443fb4b89eb79e34","src/codegen/math/float/sqrte.rs":"f0f4ef9eb475ae41bcc7ec6a95ad744ba6b36925faa8b2c2814004396d196b63","src/codegen/pointer_sized_int.rs":"a70697169c28218b56fd2e8d5353f2e00671d1150d0c8cef77d613bdfacd84cb","src/codegen/reductions.rs":"645e2514746d01387ddd07f0aa4ffd8430cc9ab428d4fb13773ea319fa25dd95","src/codegen/reductions/mask.rs":"8f1afe6aabf096a3278e1fc3a30f736e04aa8b9ce96373cee22162d18cfe2702","src/codegen/reductions/mask/aarch64.rs":"cba6e17603d39795dcfe8339b6b7d8714c3e162a1f0a635979f037aa24fe4206","src/codegen/reductions/mask/arm.rs":"9447904818aa2c7c25d0963eead452a639a11ca7dbd6d21eedbfcaade07a0f33","src/codegen/reductions/mask/fallback.rs":"7a0ef9f7fd03ae318b495b95e121350cd61caffc5cc6ee17fabf130d5d933453","src/codegen/reductions/mask/fallback_impl.rs":"76547f396e55ef403327c77c314cf8db8c7a5c9b9819bfb925abeacf130249e5","src/codegen/reductions/mask/x86.rs":"14bd2c482071f2355beebcf7b7ecf950ff2dfcdb08c3ca50993092434a9de717","src/codegen/reductions/mask/x86/avx.rs":"b4913d87844c522903641cbbf10db4551addb1ce5e9e78278e21612fa65c733b","src/codegen/reductions/mask/x86/avx2.rs":"677aed3f056285285daa3adff8bc65e739630b4424defa6d9665e160f027507e","src/codegen/reductions/mask/x86/sse.rs":"226610b4ff88c676d5187114dd57b4a8800de6ce40884675e9198445b1ed0306","src/codegen/reductions/mask/x86/sse2.rs":"bc38e6c31cb4b3d62147eba6cac264e519e2a48e0f7ce9010cfa9ef0cf0ec9fd","src/codegen/shuffle.rs":"0abca97e92cdce49a58a39cc447eb09dc7d7715ef256c8dbd2181a186e61bb64","src/codegen/shuffle1_dyn.rs":"04523e9338133bdedb012dd076c2c564b79ce5593b0fc56d0fb6910e04190a81","src/codegen/swap_bytes.rs":"1d6cdc716eadddc92b4fd506b2445a821caa8dc00860447de09d7ebd69c2087f","src/codegen/v128.rs":"94226b31ec403d18d9d2fe06713f147c9c79e9b5f9105089088266313f843185","src/codegen/v16.rs":"ddec4ffb66b6f7aaffb9a1780c5ddba82557abd74f45073d335047e04cf74924","src/codegen/v256.rs":"6b63917f0444118d6b1595bff2045e59b97c4d24012bd575f69f1f0efc5a0241","src/codegen/v32.rs":"3477b3c5540aed86e61e2f5807dd31db947413cec9181c587d93ed6ec74f0eba","src/codegen/v512.rs":"5854f99d3aabc4cd42b28a20d9ce447756dc2ba024a409a69b6a8ae1f1842fc5","src/codegen/v64.rs":"e9e89caebfe63d10c0cbca61e4dfdba3b7e02ee0989170f80beed23237ddd950","src/codegen/vPtr.rs":"96d609a9eece4dcbbcc01ba0b8744d7f5958be12774176a2945bc676f4e6b5cb","src/codegen/vSize.rs":"eeee9858749aa82142b27bc120d1989bb74a6b82e1e4efbbeaccc9634dc9acfc","src/lib.rs":"1b5d419ff05ee0370d671810423ccc254708cc8d415c1dbac2a7a36be4bf63a8","src/masks.rs":"870f429967b2d7d5133f4d28d6c753fc5cef0570b27b29d4e966a066d22d2d0e","src/sealed.rs":"ff7f0324276408ae8249941cfa32c90b8835a54d750896b683efea857af19db2","src/testing.rs":"1d3a7862ef625e235a5734ad7204e68d350f902c0695182b1f08a0552432416e","src/testing/macros.rs":"6378856d7a40ba5ec5c7c0dad6327d79f0c77266921c24296d10aed6c68e9b98","src/testing/utils.rs":"d6fd5a5017f1f85d9d99585754f8f6ad06fc3d683b34083543e67a7cc6c1772c","src/v128.rs":"18fe263c4aa28cd06461c7070b0269f69f4a2e75749b8f142a83dfdfe4d22bf5","src/v16.rs":"e5c663c9fb3547eaeac78a5f7db9969f4d8b5ec96112bf2954602fff11f0aebd","src/v256.rs":"68732cd688ad12a56d8b4f8ddf279f77bdfe1be2943c7dc0c1b4f1a76798aa0f","src/v32.rs":"785b22a1ccb4a41bb53dfeb0670f624c0ce42e6cdf62d1747e3283777a1c70bd","src/v512.rs":"d1337bfe07f06a8f37f8e8fa7d4315b9307476ee435ad80dd5269eaed564fbfa","src/v64.rs":"3077468d65125b8f085e9454c8b2463a4d5225697464ba6a1300f8799528fd4b","src/vPtr.rs":"c9a53f41f466e17b6648a4ce390fd8f4d3a848d440eb8a9a803a11608d76eb05","src/vSize.rs":"5c46d3e8c3ee5863d9b6e37e681f871386e0efc254d6d84ba711edb529ce7b3c","tests/endianness.rs":"541a144be017e3dd7da7c8ea49d907dc02538245e8c5f3deb5bd43da92c929e1"},"package":null}
\ No newline at end of file
diff --git a/third_party/rust/packed_simd/.travis.yml b/third_party/rust/packed_simd/.travis.yml
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/.travis.yml
@@ -0,0 +1,308 @@
+language: rust
+sudo: false
+rust: nightly
+
+stages:
+  - tools
+  - linux-tier1
+  - osx-tier1
+  - osx-tier2
+  - linux-tier2
+  - android
+
+matrix:
+  fast_finish: true    
+  include:
+    # Android:
+    - env: TARGET=x86_64-linux-android NOVERIFY=1
+      name: "x86_64-unknown-linux-android + SSE2"
+      stage: android
+    - env: TARGET=arm-linux-androideabi
+      name: "arm-linux-androideabi"
+      stage: android
+    - env: TARGET=arm-linux-androideabi RUSTFLAGS="-C target-feature=+v7,+neon"
+      name: "arm-linux-androideabi + NEON"
+      stage: android
+    - env: TARGET=aarch64-linux-android
+      name: "aarch64-unknown-linux-android"
+      stage: android
+    - env: TARGET=aarch64-linux-android RUSTFLAGS="-C target-feature=+neon"
+      name: "aarch64-unknown-linux-android + NEON"
+      stage: android
+    - env: TARGET="thumbv7neon-linux-androideabi"
+      name: "thumbv7neon-linux-androideabi"
+      stage: android
+    # Linux:
+    - env: TARGET=i586-unknown-linux-gnu
+      name: "i586-unknown-linux-gnu"
+      stage: linux-tier2
+    - env: TARGET=i586-unknown-linux-gnu RUSTFLAGS="-C target-feature=+sse"
+      name: "i586-unknown-linux-gnu + SSE"
+      stage: linux-tier2
+    - env: TARGET=i586-unknown-linux-gnu RUSTFLAGS="-C target-feature=+sse2"
+      name: "i586-unknown-linux-gnu + SSE2"
+      stage: linux-tier2
+    - env: TARGET=i686-unknown-linux-gnu
+      name: "i686-unknown-linux-gnu + SSE2"
+      stage: linux-tier1
+    - env: TARGET=i686-unknown-linux-gnu RUSTFLAGS="-C target-feature=+sse4.2"
+      name: "i686-unknown-linux-gnu + SSE4.2"
+      stage: linux-tier1
+    - env: TARGET=i686-unknown-linux-gnu RUSTFLAGS="-C target-feature=+avx2"
+      name: "i686-unknown-linux-gnu + AVX2"
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu
+      name: "x86_64-unknown-linux-gnu + SSE2"
+      install: rustup component add rustfmt-preview
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu RUSTFLAGS="-C target-feature=+sse4.2"
+      name: "x86_64-unknown-linux-gnu + SSE4.2"
+      install: rustup component add rustfmt-preview
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu RUSTFLAGS="-C target-feature=+avx"
+      name: "x86_64-unknown-linux-gnu + AVX"
+      install: rustup component add rustfmt-preview
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu RUSTFLAGS="-C target-feature=+avx2"
+      name: "x86_64-unknown-linux-gnu + AVX2"
+      install: rustup component add rustfmt-preview
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu-emulated
+      name: "Intel SDE + SSE2"
+      install: true
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu-emulated RUSTFLAGS="-C target-feature=+sse4.2"
+      name: "Intel SDE + SSE4.2"
+      install: true
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu-emulated RUSTFLAGS="-C target-feature=+avx"
+      name: "Intel SDE + AVX"
+      install: true
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu-emulated RUSTFLAGS="-C target-feature=+avx2"
+      name: "Intel SDE + AVX2"
+      install: true
+      stage: linux-tier1
+    - env: TARGET=x86_64-unknown-linux-gnu-emulated RUSTFLAGS="-C target-feature=+avx-512f"
+      name: "Intel SDE + AVX-512"
+      install: true
+      stage: linux-tier1
+    - env: TARGET=arm-unknown-linux-gnueabi
+      name: "arm-unknown-linux-gnueabi"
+      stage: linux-tier2
+    - env: TARGET=arm-unknown-linux-gnueabi RUSTFLAGS="-C target-feature=+v7,+neon"
+      name: "arm-unknown-linux-gnueabi + NEON"
+      stage: linux-tier2
+    - env: TARGET=arm-unknown-linux-gnueabihf
+      name: "arm-unknown-linux-gnueabihf"
+      stage: linux-tier2
+    - env: TARGET=arm-unknown-linux-gnueabihf RUSTFLAGS="-C target-feature=+v7,+neon"
+      name: "arm-unknown-linux-gnueabihf + NEON"
+      stage: linux-tier2
+    - env: TARGET=armv7-unknown-linux-gnueabihf
+      name: "armv7-unknown-linux-gnueabihf"
+      stage: linux-tier2
+    - env: TARGET=armv7-unknown-linux-gnueabihf RUSTFLAGS="-C target-feature=+neon"
+      name: "armv7-unknown-linux-gnueabihf + NEON"
+      stage: linux-tier2
+    - env: TARGET="thumbv7neon-unknown-linux-gnueabihf"
+      name: "thumbv7neon-unknown-linux-gnueabihf"
+      stage: linux-tier2
+    - env: TARGET=aarch64-unknown-linux-gnu
+      name: "aarch64-unknown-linux-gnu"
+      stage: linux-tier2
+    - env: TARGET=aarch64-unknown-linux-gnu RUSTFLAGS="-C target-feature=+neon"
+      name: "aarch64-unknown-linux-gnu + NEON"
+      stage: linux-tier2
+    - env: TARGET=mips-unknown-linux-gnu
+      name: "mips-unknown-linux-gnu"
+      stage: linux-tier2
+    - env: TARGET=mipsel-unknown-linux-musl
+      name: "mipsel-unknown-linux-musl"
+      stage: linux-tier2
+    - env: TARGET=mips64-unknown-linux-gnuabi64
+      name: "mips64-unknown-linux-gnuabi64"
+      stage: linux-tier2
+    - env: TARGET=mips64el-unknown-linux-gnuabi64
+      name: "mips64el-unknown-linux-gnuabi64"
+      stage: linux-tier2
+      # FIXME: https://github.com/rust-lang-nursery/packed_simd/issues/18
+      # env: TARGET=mips64el-unknown-linux-gnuabi64 RUSTFLAGS="-C target-feature=+msa -C target-cpu=mips64r6"
+    - env: TARGET=powerpc-unknown-linux-gnu
+      name: "powerpc-unknown-linux-gnu"
+      stage: linux-tier2
+    - env: TARGET=powerpc64-unknown-linux-gnu
+      name: "powerpc64-unknown-linux-gnu"
+      stage: linux-tier2
+    - env: TARGET=powerpc64le-unknown-linux-gnu
+      name: "powerpc64le-unknown-linux-gnu"
+      stage: linux-tier2
+    - env: TARGET=powerpc64le-unknown-linux-gnu RUSTFLAGS="-C target-feature=+altivec"
+      name: "powerpc64le-unknown-linux-gnu + ALTIVEC"
+      stage: linux-tier2
+    - env: TARGET=powerpc64le-unknown-linux-gnu RUSTFLAGS="-C target-feature=+vsx"
+      name: "powerpc64le-unknown-linux-gnu + VSX"
+      stage: linux-tier2
+    - env: TARGET=s390x-unknown-linux-gnu
+      name: "s390x-unknown-linux-gnu"
+      stage: linux-tier2
+    - env: TARGET=sparc64-unknown-linux-gnu
+      name: "sparc64-unknown-linux-gnu"
+      stage: linux-tier2
+    # WebAssembly:
+    - env: TARGET=wasm32-unknown-unknown
+      name: "wasm32-unknown-unknown"
+      stage: osx-tier1 # For now
+    # MacOSX:
+    - os: osx
+      env: TARGET=i686-apple-darwin
+      name: "i686-apple-darwin + SSE2"
+      script: ci/run.sh
+      osx_image: xcode10
+      stage: osx-tier1
+    - os: osx
+      env: TARGET=i686-apple-darwin RUSTFLAGS="-C target-feature=+sse4.2"
+      name: "i686-apple-darwin + SSE4.2"
+      script: ci/run.sh
+      osx_image: xcode10
+      stage: osx-tier1
+      # Travis-CI OSX build bots do not support AVX2:
+    - os: osx
+      env: TARGET=i686-apple-darwin RUSTFLAGS="-C target-feature=+avx"
+      name: "i686-apple-darwin + AVX"
+      script: ci/run.sh
+      osx_image: xcode10
+      stage: osx-tier1
+    - os: osx
+      env: TARGET=x86_64-apple-darwin
+      name: "x86_64-apple-darwin + SSE2"
+      install: true
+      script: ci/run.sh
+      osx_image: xcode10
+      stage: osx-tier1
+    - os: osx
+      env: TARGET=x86_64-apple-darwin RUSTFLAGS="-C target-feature=+sse4.2"
+      name: "x86_64-apple-darwin + SSE4.2"
+      install: true
+      script: ci/run.sh
+      osx_image: xcode10
+      stage: osx-tier1
+      # Travis-CI OSX build bots do not support AVX2:
+    - os: osx
+      env: TARGET=x86_64-apple-darwin RUSTFLAGS="-C target-feature=+avx"
+      name: "x86_64-apple-darwin + AVX"
+      install: true
+      script: ci/run.sh
+      osx_image: xcode10
+      stage: osx-tier1
+    # *BSDs:
+    #- env: TARGET=i686-unknown-freebsd NORUN=1
+    #  script: ci/run.sh
+    #- env: TARGET=x86_64-unknown-freebsd NORUN=1
+    #  script: ci/run.sh
+    #- env: TARGET=x86_64-unknown-netbsd NORUN=1
+    #  script: ci/run.sh
+    # Solaris:
+    #- env: TARGET=x86_64-sun-solaris NORUN=1
+    #  script: ci/run.sh
+    # iOS:
+    - os: osx
+      env: TARGET=i386-apple-ios
+      name: "i386-apple-ios"
+      script: ci/run.sh
+      osx_image: xcode9.4
+      stage: osx-tier2
+    - os: osx
+      env: TARGET=x86_64-apple-ios
+      name: "x86_64-apple-ios + SSE2"
+      script: ci/run.sh
+      osx_image: xcode9.4
+      stage: osx-tier2
+    - os: osx
+      env: TARGET=armv7-apple-ios NORUN=1
+      name: "armv7-apple-ios [Build only]"
+      script: ci/run.sh
+      osx_image: xcode9.4
+      stage: osx-tier2
+    - os: osx
+      env: TARGET=aarch64-apple-ios NORUN=1
+      name: "aarch64-apple-ios [Build only]"
+      script: ci/run.sh
+      osx_image: xcode9.4
+      stage: osx-tier2
+    # BENCHMARKS:
+    - name: "Benchmarks - x86_64-unknown-linux-gnu"
+      install: TARGET=x86_64-unknown-linux-gnu ./ci/setup_benchmarks.sh
+      script: PATH=$(pwd):$PATH NORUN=1 VERIFY=1 FEATURES=core_arch,ispc,sleef-sys ci/benchmark.sh
+      stage: tools
+    - name: "Benchmarks - x86_64-apple-darwin"
+      install: TARGET=x86_64-apple-darwin ./ci/setup_benchmarks.sh
+      script: PATH=$(pwd):$PATH NORUN=1 VERIFY=1 FEATURES=core_arch,ispc,sleef-sys ci/benchmark.sh
+      os: osx
+      osx_image: xcode9.4
+      stage: tools
+    # TOOLS:
+    - name: "Documentation"
+      install: cargo install mdbook
+      script: ci/dox.sh
+      stage: tools
+    - name: "rustfmt"
+      install: true
+      before_script: rustup component add rustfmt-preview
+      script: ci/all.sh check_fmt || true
+      stage: tools
+    - name: "clippy"
+      install: true
+      before_script: rustup component add clippy-preview
+      script: ci/all.sh clippy
+      stage: tools
+
+  allow_failures:
+    # FIXME: ISPC cannot be found?
+    - name: "Benchmarks - x86_64-apple-darwin"
+    # FIXME: TBD
+    - env: TARGET=powerpc-unknown-linux-gnu
+    - env: TARGET=powerpc64-unknown-linux-gnu
+    - env: TARGET=powerpc64le-unknown-linux-gnu
+    - env: TARGET=powerpc64le-unknown-linux-gnu RUSTFLAGS="-C target-feature=+altivec"
+    - env: TARGET=powerpc64le-unknown-linux-gnu RUSTFLAGS="-C target-feature=+vsx"
+    #- env: TARGET=i686-unknown-freebsd NORUN=1
+    #- env: TARGET=x86_64-unknown-freebsd NORUN=1
+    #- env: TARGET=x86_64-unknown-netbsd NORUN=1
+    #- env: TARGET=x86_64-sun-solaris NORUN=1
+
+    # FIXME: TBD
+    - env: TARGET=arm-linux-androideabi
+    - env: TARGET=arm-linux-androideabi RUSTFLAGS="-C target-feature=+v7,+neon"
+    - env: TARGET=aarch64-linux-android
+    - env: TARGET=aarch64-linux-android RUSTFLAGS="-C target-feature=+neon"
+
+    # FIXME: iOS
+    # https://github.com/rust-lang-nursery/packed_simd/issues/26
+    - env: TARGET=i386-apple-ios
+    - env: TARGET=x86_64-apple-ios
+
+    # FIXME: https://github.com/rust-lang-nursery/packed_simd/issues/182
+    - env: TARGET=arm-unknown-linux-gnueabi RUSTFLAGS="-C target-feature=+v7,+neon"
+    - env: TARGET=arm-unknown-linux-gnueabihf RUSTFLAGS="-C target-feature=+v7,+neon"
+    - env: TARGET=armv7-unknown-linux-gnueabihf RUSTFLAGS="-C target-feature=+neon"
+
+    # FIXME: https://github.com/rust-lang-nursery/packed_simd/issues/183
+    - env: TARGET=wasm32-unknown-unknown
+
+install: travis_retry rustup target add $TARGET
+before_script: cargo generate-lockfile
+script: travis_wait 50 ci/run-docker.sh
+after_script: sleep 5
+
+env:
+  global:
+    secure: "lPHv7s6+AxQYNaFncycVFQt++Y1asQmMhOikQU1ztlP8CK7+hn2m98cg/euOJyzIOb2iJ3ZX4cGZkzw4lc59MQBByb1GtDbazQoUOzVDbVfe9BDD2f8JVoIFh1CMfjPKQ7Gg/rJqWlwrUlSd5GNxPCutKjY7qZhJuR6SQbJjlWaGN2Vd4fVCzKXz8fHRXgMEZS+d+CR4Nsrkb83J3Z4s5kSdJmhYxJ61AWjuzJVwUh4l3/HEYlSL5XXpuh5R2i7W16h1PlNdaTUgkZli1lHzO8+6Q8LzX9+XiLIEVX9lw3A2NdIKGz8E/+7Qs5oYOkwYhjROsDQxIK7xkSM30bQuN7cwMBybAVIyOPJkqXQ1dQyp83KSdsOj7JMyDDRvcEDLI6ehRlm5EcdH7YrReuboN81iUo0Sa7VsuUmgj5hjERCt9r30f9aWuitABai7vKRtjglg7Sp5CrEVPA4PQs6PqKCCRogoggbXJ/Z5Dyw/RZaXPeNR9+qIKN1Vjm9Gew1sRN2JK/3+vXTKtyJXH/uBxgJt4jQlbuShOJuF+BSfTF88sMe67a/357SSOIb4JkaCyd0flDCWYE8576kaHPlVVMT2peXee0LeRXm1e13nG3Na0t3LS/orJLPHOShNQGoDj7qAP5aEKggRya896JGwtvlaBHHTmSQh65G7cyNErZo="
+branches:
+  only:
+    - staging # bors r+
+    - trying  # bors try
+    - master
+notifications:
+  email:
+    on_success: never
diff --git a/third_party/rust/packed_simd/Cargo.toml b/third_party/rust/packed_simd/Cargo.toml
--- a/third_party/rust/packed_simd/Cargo.toml
+++ b/third_party/rust/packed_simd/Cargo.toml
@@ -1,67 +1,42 @@
-# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
-#
-# When uploading crates to the registry Cargo will automatically
-# "normalize" Cargo.toml files for maximal compatibility
-# with all versions of Cargo and also rewrite `path` dependencies
-# to registry (e.g. crates.io) dependencies
-#
-# If you believe there's an error in this file please file an
-# issue against the rust-lang/cargo repository. If you're
-# editing this file be aware that the upstream Cargo.toml
-# will likely look very different (and much more reasonable)
-
 [package]
-edition = "2018"
 name = "packed_simd"
 version = "0.3.3"
 authors = ["Gonzalo Brito Gadeschi <gonzalobg88@gmail.com>"]
-build = "build.rs"
 description = "Portable Packed SIMD vectors"
+documentation = "https://docs.rs/crate/packed_simd/"
 homepage = "https://github.com/rust-lang-nursery/packed_simd"
-documentation = "https://docs.rs/crate/packed_simd/"
+repository = "https://github.com/rust-lang-nursery/packed_simd"
 keywords = ["simd", "vector", "portability"]
 categories = ["hardware-support", "concurrency", "no-std", "data-structures"]
 license = "MIT/Apache-2.0"
-repository = "https://github.com/rust-lang-nursery/packed_simd"
-[dependencies.cfg-if]
-version = "^0.1"
+build = "build.rs"
+edition = "2018"
 
-[dependencies.core_arch]
-version = "^0.1.3"
-optional = true
-[dev-dependencies.arrayvec]
-version = "^0.4"
-default-features = false
+[badges]
+appveyor = { repository = "rust-lang-nursery/packed_simd" }
+travis-ci = { repository = "rust-lang-nursery/packed_simd" }
+codecov = { repository = "rust-lang-nursery/packed_simd" }
+is-it-maintained-issue-resolution = { repository = "rust-lang-nursery/packed_simd" }
+is-it-maintained-open-issues = { repository = "rust-lang-nursery/packed_simd" }
+maintenance = { status = "experimental" }
 
-[dev-dependencies.paste]
-version = "^0.1.3"
+[dependencies]
+cfg-if = "^0.1.6"
+core_arch = { version = "^0.1.3", optional = true }
 
 [features]
 default = []
 into_bits = []
 libcore_neon = []
-[target."cfg(target_arch = \"x86_64\")".dependencies.sleef-sys]
+
+[dev-dependencies]
+paste = "^0.1.3"
+arrayvec = { version = "^0.4", default-features = false }
+
+[target.'cfg(target_arch = "x86_64")'.dependencies.sleef-sys]
 version = "^0.1.2"
 optional = true
-[target.wasm32-unknown-unknown.dev-dependencies.wasm-bindgen]
-version = "=0.2.19"
 
-[target.wasm32-unknown-unknown.dev-dependencies.wasm-bindgen-test]
-version = "=0.2.19"
-[badges.appveyor]
-repository = "rust-lang-nursery/packed_simd"
-
-[badges.codecov]
-repository = "rust-lang-nursery/packed_simd"
-
-[badges.is-it-maintained-issue-resolution]
-repository = "rust-lang-nursery/packed_simd"
-
-[badges.is-it-maintained-open-issues]
-repository = "rust-lang-nursery/packed_simd"
-
-[badges.maintenance]
-status = "experimental"
-
-[badges.travis-ci]
-repository = "rust-lang-nursery/packed_simd"
+[target.wasm32-unknown-unknown.dev-dependencies]
+wasm-bindgen = "=0.2.19"
+wasm-bindgen-test = "=0.2.19"
\ No newline at end of file
diff --git a/third_party/rust/packed_simd/build.rs b/third_party/rust/packed_simd/build.rs
--- a/third_party/rust/packed_simd/build.rs
+++ b/third_party/rust/packed_simd/build.rs
@@ -1,7 +1,8 @@
 fn main() {
+	println!("cargo:rustc-env=RUSTC_BOOTSTRAP=1");
     let target = std::env::var("TARGET")
         .expect("TARGET environment variable not defined");
     if target.contains("neon") {
         println!("cargo:rustc-cfg=libcore_neon");
     }
 }
diff --git a/third_party/rust/packed_simd/ci/all.sh b/third_party/rust/packed_simd/ci/all.sh
--- a/third_party/rust/packed_simd/ci/all.sh
+++ b/third_party/rust/packed_simd/ci/all.sh
@@ -1,15 +1,15 @@
 #!/usr/bin/env bash
 #
 # Performs an operation on all targets
 
 set -ex
 
-: ${1?"The all.sh script requires one argument."}
+: "${1?The all.sh script requires one argument.}"
 
 op=$1
 
 cargo_clean() {
     cargo clean
 }
 
 cargo_check_fmt() {
@@ -49,16 +49,23 @@ echo "Operation is: ${CMD}"
 
 # On src/
 $CMD
 
 # Check examples/
 for dir in examples/*/
 do
     dir=${dir%*/}
-    cd ${dir%*/}
-    $CMD
-    cd -
+    (
+        cd "${dir%*/}"
+        $CMD
+    )
 done
 
-cd verify/verify
-$CMD
-cd -
+(
+    cd verify/verify
+    $CMD
+)
+
+(
+    cd micro_benchmarks
+    $CMD
+)
diff --git a/third_party/rust/packed_simd/perf-guide/.gitignore b/third_party/rust/packed_simd/perf-guide/.gitignore
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/perf-guide/.gitignore
@@ -0,0 +1,1 @@
+/book
diff --git a/third_party/rust/packed_simd/readme.md b/third_party/rust/packed_simd/readme.md
--- a/third_party/rust/packed_simd/readme.md
+++ b/third_party/rust/packed_simd/readme.md
@@ -92,30 +92,32 @@ the full testsuite passes on the target.
 | `mipsel-unknown-linux-musl`       | ✓         | ✓       |
 | `mips64-unknown-linux-gnuabi64`   | ✓         | ✓       |
 | `mips64el-unknown-linux-gnuabi64` | ✓         | ✓       |
 | `powerpc-unknown-linux-gnu`       | ✗         | ✗       |
 | `powerpc64-unknown-linux-gnu`     | ✗         | ✗       |
 | `powerpc64le-unknown-linux-gnu`   | ✗         | ✗       |
 | `s390x-unknown-linux-gnu`         | ✓         | ✓*      |
 | `sparc64-unknown-linux-gnu`       | ✓         | ✓*      |
+| `thumbv7neon-unknown-linux-gnueabihf` | ✓         | ✓      |
 | **MacOSX targets:**               | **build** | **run** |
 | `x86_64-apple-darwin`             | ✓         | ✓       |
 | `i686-apple-darwin`               | ✓         | ✓       |
 | **Windows targets:**              | **build** | **run** |
 | `x86_64-pc-windows-msvc`          | ✓         | ✓       |
 | `i686-pc-windows-msvc`            | ✓         | ✓       |
 | `x86_64-pc-windows-gnu`           | ✗          | ✗        |
 | `i686-pc-windows-gnu`             | ✗          | ✗        |
 | **WebAssembly targets:**          | **build** | **run** |
 | `wasm32-unknown-unknown`          | ✓         | ✓      |
 | **Android targets:**              | **build** | **run** |
 | `x86_64-linux-android`            | ✓         | ✓       |
 | `arm-linux-androideabi`           | ✓         | ✓       |
 | `aarch64-linux-android`           | ✓         | ✗       |
+| `thumbv7neon-linux-androideabi`  | ✓         | ✓       |
 | **iOS targets:**                  | **build** | **run** |
 | `i386-apple-ios`                  | ✓         | ✗       |
 | `x86_64-apple-ios`                | ✓         | ✗       |
 | `armv7-apple-ios`                 | ✓         | ✗**     |
 | `aarch64-apple-ios`               | ✓         | ✗**     |
 | **xBSD targets:**                 | **build** | **run** |
 | `i686-unknown-freebsd`            | ✗         | ✗**     |
 | `x86_64-unknown-freebsd`          | ✗         | ✗**     |
diff --git a/third_party/rust/packed_simd/rust-toolchain b/third_party/rust/packed_simd/rust-toolchain
deleted file mode 100644
--- a/third_party/rust/packed_simd/rust-toolchain
+++ /dev/null
@@ -1,1 +0,0 @@
-nightly
\ No newline at end of file
diff --git a/third_party/rust/packed_simd/src/api.rs b/third_party/rust/packed_simd/src/api.rs
--- a/third_party/rust/packed_simd/src/api.rs
+++ b/third_party/rust/packed_simd/src/api.rs
@@ -1,12 +1,10 @@
 //! Implements the Simd<[T; N]> APIs
 
-#[macro_use]
-mod bitmask;
 crate mod cast;
 #[macro_use]
 mod cmp;
 #[macro_use]
 mod default;
 #[macro_use]
 mod fmt;
 #[macro_use]
@@ -36,17 +34,17 @@ mod swap_bytes;
 #[macro_use]
 mod bit_manip;
 
 #[cfg(feature = "into_bits")]
 crate mod into_bits;
 
 macro_rules! impl_i {
     ([$elem_ty:ident; $elem_n:expr]: $tuple_id:ident, $mask_ty:ident
-     | $ielem_ty:ident, $ibitmask_ty:ident | $test_tt:tt | $($elem_ids:ident),*
+     | $ielem_ty:ident | $test_tt:tt | $($elem_ids:ident),*
      | From: $($from_vec_ty:ident),* | $(#[$doc:meta])*) => {
         impl_minimal_iuf!([$elem_ty; $elem_n]: $tuple_id | $ielem_ty | $test_tt
                           | $($elem_ids),* | $(#[$doc])*);
         impl_ops_vector_arithmetic!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_ops_scalar_arithmetic!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_ops_vector_bitwise!(
             [$elem_ty; $elem_n]: $tuple_id | $test_tt | (!(0 as $elem_ty), 0)
         );
@@ -90,27 +88,26 @@ macro_rules! impl_i {
             [$elem_ty; $elem_n]: $tuple_id | $test_tt | (0, 1)
         );
         impl_cmp_eq!([$elem_ty; $elem_n]: $tuple_id | $test_tt | (0, 1));
         impl_cmp_vertical!(
             [$elem_ty; $elem_n]: $tuple_id, $mask_ty, false, (1, 0) | $test_tt
         );
         impl_cmp_partial_ord!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_cmp_ord!([$elem_ty; $elem_n]: $tuple_id | $test_tt | (0, 1));
-        impl_bitmask!($tuple_id | $ibitmask_ty | (-1, 0) | $test_tt);
 
         test_select!($elem_ty, $mask_ty, $tuple_id, (1, 2) | $test_tt);
         test_cmp_partial_ord_int!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         test_shuffle1_dyn!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
     }
 }
 
 macro_rules! impl_u {
     ([$elem_ty:ident; $elem_n:expr]: $tuple_id:ident, $mask_ty:ident
-     | $ielem_ty:ident, $ibitmask_ty:ident | $test_tt:tt | $($elem_ids:ident),*
+     | $ielem_ty:ident | $test_tt:tt | $($elem_ids:ident),*
      | From: $($from_vec_ty:ident),* | $(#[$doc:meta])*) => {
         impl_minimal_iuf!([$elem_ty; $elem_n]: $tuple_id | $ielem_ty | $test_tt
                           | $($elem_ids),* | $(#[$doc])*);
         impl_ops_vector_arithmetic!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_ops_scalar_arithmetic!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_ops_vector_bitwise!(
             [$elem_ty; $elem_n]: $tuple_id | $test_tt | (!(0 as $elem_ty), 0)
         );
@@ -153,18 +150,16 @@ macro_rules! impl_u {
             [$elem_ty; $elem_n]: $tuple_id | $test_tt | (1, 0)
         );
         impl_cmp_eq!([$elem_ty; $elem_n]: $tuple_id | $test_tt | (0, 1));
         impl_cmp_vertical!(
             [$elem_ty; $elem_n]: $tuple_id, $mask_ty, false, (1, 0) | $test_tt
         );
         impl_cmp_partial_ord!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_cmp_ord!([$elem_ty; $elem_n]: $tuple_id | $test_tt | (0, 1));
-        impl_bitmask!($tuple_id | $ibitmask_ty | ($ielem_ty::max_value(), 0) |
-                      $test_tt);
 
         test_select!($elem_ty, $mask_ty, $tuple_id, (1, 2) | $test_tt);
         test_cmp_partial_ord_int!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         test_shuffle1_dyn!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
     }
 }
 
 macro_rules! impl_f {
@@ -222,18 +217,17 @@ macro_rules! impl_f {
         test_reduction_float_min_max!(
             [$elem_ty; $elem_n]: $tuple_id | $test_tt
         );
         test_shuffle1_dyn!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
     }
 }
 
 macro_rules! impl_m {
-    ([$elem_ty:ident; $elem_n:expr]: $tuple_id:ident
-     | $ielem_ty:ident, $ibitmask_ty:ident
+    ([$elem_ty:ident; $elem_n:expr]: $tuple_id:ident | $ielem_ty:ident
      | $test_tt:tt | $($elem_ids:ident),* | From: $($from_vec_ty:ident),*
      | $(#[$doc:meta])*) => {
         impl_minimal_mask!(
             [$elem_ty; $elem_n]: $tuple_id | $ielem_ty | $test_tt
             | $($elem_ids),* | $(#[$doc])*
         );
         impl_ops_vector_mask_bitwise!(
             [$elem_ty; $elem_n]: $tuple_id | $test_tt | (true, false)
@@ -266,17 +260,16 @@ macro_rules! impl_m {
             | $test_tt
         );
         impl_select!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_cmp_partial_ord!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_cmp_ord!(
             [$elem_ty; $elem_n]: $tuple_id | $test_tt | (false, true)
         );
         impl_shuffle1_dyn!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
-        impl_bitmask!($tuple_id | $ibitmask_ty | (true, false) | $test_tt);
 
         test_cmp_partial_ord_mask!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         test_shuffle1_dyn_mask!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
     }
 }
 
 macro_rules! impl_const_p {
     ([$elem_ty:ty; $elem_n:expr]: $tuple_id:ident, $mask_ty:ident,
diff --git a/third_party/rust/packed_simd/src/api/bitmask.rs b/third_party/rust/packed_simd/src/api/bitmask.rs
deleted file mode 100644
--- a/third_party/rust/packed_simd/src/api/bitmask.rs
+++ /dev/null
@@ -1,82 +0,0 @@
-//! Bitmask API
-
-macro_rules! impl_bitmask {
-    ($id:ident | $ibitmask_ty:ident | ($set:expr, $clear:expr)
-     | $test_tt:tt) => {
-        impl $id {
-            /// Creates a bitmask with the MSB of each vector lane.
-            ///
-            /// If the vector has less than 8 lanes, the bits that do not
-            /// correspond to any vector lanes are cleared.
-            #[inline]
-            pub fn bitmask(self) -> $ibitmask_ty {
-                unsafe { codegen::llvm::simd_bitmask(self.0) }
-            }
-        }
-
-        test_if! {
-            $test_tt:
-            paste::item! {
-                #[cfg(not(any(
-                    // FIXME: https://github.com/rust-lang-nursery/packed_simd/issues/210
-                    all(target_arch = "mips", target_endian = "big"),
-                    all(target_arch = "mips64", target_endian = "big"),
-                    target_arch = "sparc64",
-                    target_arch = "s390x",
-                )))]
-                pub mod [<$id _bitmask>] {
-                    use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)]
-                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
-                    fn bitmask() {
-                        // clear all lanes
-                        let vec = $id::splat($clear as _);
-                        let bitmask: $ibitmask_ty = 0;
-                        assert_eq!(vec.bitmask(), bitmask);
-
-                        // set even lanes
-                        let mut vec = $id::splat($clear as _);
-                        for i in 0..$id::lanes() {
-                            if i % 2 == 0 {
-                                vec = vec.replace(i, $set as _);
-                            }
-                        }
-                        // create bitmask with even lanes set:
-                        let mut bitmask: $ibitmask_ty = 0;
-                        for i in 0..$id::lanes() {
-                            if i % 2 == 0 {
-                                bitmask |= 1 << i;
-                            }
-                        }
-                        assert_eq!(vec.bitmask(), bitmask);
-
-
-                        // set odd lanes
-                        let mut vec = $id::splat($clear as _);
-                        for i in 0..$id::lanes() {
-                            if i % 2 != 0 {
-                                vec = vec.replace(i, $set as _);
-                            }
-                        }
-                        // create bitmask with odd lanes set:
-                        let mut bitmask: $ibitmask_ty = 0;
-                        for i in 0..$id::lanes() {
-                            if i % 2 != 0 {
-                                bitmask |= 1 << i;
-                            }
-                        }
-                        assert_eq!(vec.bitmask(), bitmask);
-
-                        // set all lanes
-                        let vec = $id::splat($set as _);
-                        let mut bitmask: $ibitmask_ty = 0;
-                        for i in 0..$id::lanes() {
-                            bitmask |= 1 << i;
-                        }
-                        assert_eq!(vec.bitmask(), bitmask);
-                    }
-                }
-            }
-        }
-    };
-}
diff --git a/third_party/rust/packed_simd/src/api/cast.rs b/third_party/rust/packed_simd/src/api/cast.rs
--- a/third_party/rust/packed_simd/src/api/cast.rs
+++ b/third_party/rust/packed_simd/src/api/cast.rs
@@ -1,16 +1,10 @@
 //! Implementation of `FromCast` and `IntoCast`.
-#![cfg_attr(
-    feature = "cargo-clippy",
-    allow(
-        clippy::module_name_repetitions,
-        clippy::stutter
-    )
-)]
+#![allow(clippy::module_name_repetitions)]
 
 /// Numeric cast from `T` to `Self`.
 ///
 /// > Note: This is a temporary workaround until the conversion traits
 /// specified > in [RFC2484] are implemented.
 ///
 /// Numeric cast between vectors with the same number of lanes, such that:
 ///
diff --git a/third_party/rust/packed_simd/src/api/cmp/partial_eq.rs b/third_party/rust/packed_simd/src/api/cmp/partial_eq.rs
--- a/third_party/rust/packed_simd/src/api/cmp/partial_eq.rs
+++ b/third_party/rust/packed_simd/src/api/cmp/partial_eq.rs
@@ -2,49 +2,50 @@
 
 macro_rules! impl_cmp_partial_eq {
     (
         [$elem_ty:ident; $elem_count:expr]:
         $id:ident | $test_tt:tt |
         ($true:expr, $false:expr)
     ) => {
         // FIXME: https://github.com/rust-lang-nursery/rust-clippy/issues/2892
-        #[cfg_attr(feature = "cargo-clippy", allow(clippy::partialeq_ne_impl))]
+        #[allow(clippy::partialeq_ne_impl)]
         impl crate::cmp::PartialEq<$id> for $id {
             #[inline]
             fn eq(&self, other: &Self) -> bool {
                 $id::eq(*self, *other).all()
             }
             #[inline]
             fn ne(&self, other: &Self) -> bool {
                 $id::ne(*self, *other).any()
             }
         }
 
         // FIXME: https://github.com/rust-lang-nursery/rust-clippy/issues/2892
-        #[cfg_attr(feature = "cargo-clippy", allow(clippy::partialeq_ne_impl))]
+        #[allow(clippy::partialeq_ne_impl)]
         impl crate::cmp::PartialEq<LexicographicallyOrdered<$id>>
             for LexicographicallyOrdered<$id>
         {
             #[inline]
             fn eq(&self, other: &Self) -> bool {
                 self.0 == other.0
             }
             #[inline]
             fn ne(&self, other: &Self) -> bool {
                 self.0 != other.0
             }
         }
 
-        test_if!{
+        test_if! {
             $test_tt:
             paste::item! {
                 pub mod [<$id _cmp_PartialEq>] {
                     use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn partial_eq() {
                         let a = $id::splat($false);
                         let b = $id::splat($true);
 
                         assert!(a != b);
                         assert!(!(a == b));
                         assert!(a == a);
                         assert!(!(a != a));
diff --git a/third_party/rust/packed_simd/src/api/fmt/binary.rs b/third_party/rust/packed_simd/src/api/fmt/binary.rs
--- a/third_party/rust/packed_simd/src/api/fmt/binary.rs
+++ b/third_party/rust/packed_simd/src/api/fmt/binary.rs
@@ -1,34 +1,34 @@
 //! Implement Octal formatting
 
 macro_rules! impl_fmt_binary {
     ([$elem_ty:ident; $elem_count:expr]: $id:ident | $test_tt:tt) => {
         impl crate::fmt::Binary for $id {
-            #[cfg_attr(
-                feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items)
-            )]
-            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>)
-                   -> crate::fmt::Result {
+            #[allow(clippy::missing_inline_in_public_items)]
+            fn fmt(
+                &self, f: &mut crate::fmt::Formatter<'_>,
+            ) -> crate::fmt::Result {
                 write!(f, "{}(", stringify!($id))?;
                 for i in 0..$elem_count {
                     if i > 0 {
                         write!(f, ", ")?;
                     }
                     self.extract(i).fmt(f)?;
                 }
                 write!(f, ")")
             }
         }
-        test_if!{
+        test_if! {
             $test_tt:
             paste::item! {
                 pub mod [<$id _fmt_binary>] {
                     use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn binary() {
                         use arrayvec::{ArrayString,ArrayVec};
                         type TinyString = ArrayString<[u8; 512]>;
 
                         use crate::fmt::Write;
                         let v = $id::splat($elem_ty::default());
                         let mut s = TinyString::new();
                         write!(&mut s, "{:#b}", v).unwrap();
diff --git a/third_party/rust/packed_simd/src/api/fmt/debug.rs b/third_party/rust/packed_simd/src/api/fmt/debug.rs
--- a/third_party/rust/packed_simd/src/api/fmt/debug.rs
+++ b/third_party/rust/packed_simd/src/api/fmt/debug.rs
@@ -1,18 +1,19 @@
 //! Implement debug formatting
 
 macro_rules! impl_fmt_debug_tests {
     ([$elem_ty:ty; $elem_count:expr]: $id:ident | $test_tt:tt) => {
-        test_if!{
+        test_if! {
             $test_tt:
             paste::item! {
                 pub mod [<$id _fmt_debug>] {
                     use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn debug() {
                         use arrayvec::{ArrayString,ArrayVec};
                         type TinyString = ArrayString<[u8; 512]>;
 
                         use crate::fmt::Write;
                         let v = $id::default();
                         let mut s = TinyString::new();
                         write!(&mut s, "{:?}", v).unwrap();
@@ -37,20 +38,17 @@ macro_rules! impl_fmt_debug_tests {
             }
         }
     };
 }
 
 macro_rules! impl_fmt_debug {
     ([$elem_ty:ty; $elem_count:expr]: $id:ident | $test_tt:tt) => {
         impl crate::fmt::Debug for $id {
-            #[cfg_attr(
-                feature = "cargo-clippy",
-                allow(clippy::missing_inline_in_public_items)
-            )]
+            #[allow(clippy::missing_inline_in_public_items)]
             fn fmt(
                 &self, f: &mut crate::fmt::Formatter<'_>,
             ) -> crate::fmt::Result {
                 write!(f, "{}(", stringify!($id))?;
                 for i in 0..$elem_count {
                     if i > 0 {
                         write!(f, ", ")?;
                     }
diff --git a/third_party/rust/packed_simd/src/api/fmt/lower_hex.rs b/third_party/rust/packed_simd/src/api/fmt/lower_hex.rs
--- a/third_party/rust/packed_simd/src/api/fmt/lower_hex.rs
+++ b/third_party/rust/packed_simd/src/api/fmt/lower_hex.rs
@@ -1,34 +1,34 @@
 //! Implement `LowerHex` formatting
 
 macro_rules! impl_fmt_lower_hex {
     ([$elem_ty:ident; $elem_count:expr]: $id:ident | $test_tt:tt) => {
         impl crate::fmt::LowerHex for $id {
-            #[cfg_attr(
-                feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items)
-            )]
-            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>)
-                   -> crate::fmt::Result {
+            #[allow(clippy::missing_inline_in_public_items)]
+            fn fmt(
+                &self, f: &mut crate::fmt::Formatter<'_>,
+            ) -> crate::fmt::Result {
                 write!(f, "{}(", stringify!($id))?;
                 for i in 0..$elem_count {
                     if i > 0 {
                         write!(f, ", ")?;
                     }
                     self.extract(i).fmt(f)?;
                 }
                 write!(f, ")")
             }
         }
-        test_if!{
+        test_if! {
             $test_tt:
             paste::item! {
                 pub mod [<$id _fmt_lower_hex>] {
                     use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn lower_hex() {
                         use arrayvec::{ArrayString,ArrayVec};
                         type TinyString = ArrayString<[u8; 512]>;
 
                         use crate::fmt::Write;
                         let v = $id::splat($elem_ty::default());
                         let mut s = TinyString::new();
                         write!(&mut s, "{:#x}", v).unwrap();
diff --git a/third_party/rust/packed_simd/src/api/fmt/octal.rs b/third_party/rust/packed_simd/src/api/fmt/octal.rs
--- a/third_party/rust/packed_simd/src/api/fmt/octal.rs
+++ b/third_party/rust/packed_simd/src/api/fmt/octal.rs
@@ -1,34 +1,34 @@
 //! Implement Octal formatting
 
 macro_rules! impl_fmt_octal {
     ([$elem_ty:ident; $elem_count:expr]: $id:ident | $test_tt:tt) => {
         impl crate::fmt::Octal for $id {
-            #[cfg_attr(
-                feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items)
-            )]
-            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>)
-                   -> crate::fmt::Result {
+            #[allow(clippy::missing_inline_in_public_items)]
+            fn fmt(
+                &self, f: &mut crate::fmt::Formatter<'_>,
+            ) -> crate::fmt::Result {
                 write!(f, "{}(", stringify!($id))?;
                 for i in 0..$elem_count {
                     if i > 0 {
                         write!(f, ", ")?;
                     }
                     self.extract(i).fmt(f)?;
                 }
                 write!(f, ")")
             }
         }
-        test_if!{
+        test_if! {
             $test_tt:
             paste::item! {
                 pub mod [<$id _fmt_octal>] {
                     use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn octal_hex() {
                         use arrayvec::{ArrayString,ArrayVec};
                         type TinyString = ArrayString<[u8; 512]>;
 
                         use crate::fmt::Write;
                         let v = $id::splat($elem_ty::default());
                         let mut s = TinyString::new();
                         write!(&mut s, "{:#o}", v).unwrap();
diff --git a/third_party/rust/packed_simd/src/api/fmt/upper_hex.rs b/third_party/rust/packed_simd/src/api/fmt/upper_hex.rs
--- a/third_party/rust/packed_simd/src/api/fmt/upper_hex.rs
+++ b/third_party/rust/packed_simd/src/api/fmt/upper_hex.rs
@@ -1,34 +1,34 @@
 //! Implement `UpperHex` formatting
 
 macro_rules! impl_fmt_upper_hex {
     ([$elem_ty:ident; $elem_count:expr]: $id:ident | $test_tt:tt) => {
         impl crate::fmt::UpperHex for $id {
-            #[cfg_attr(
-                feature = "cargo-clippy", allow(clippy::missing_inline_in_public_items)
-            )]
-            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>)
-                   -> crate::fmt::Result {
+            #[allow(clippy::missing_inline_in_public_items)]
+            fn fmt(
+                &self, f: &mut crate::fmt::Formatter<'_>,
+            ) -> crate::fmt::Result {
                 write!(f, "{}(", stringify!($id))?;
                 for i in 0..$elem_count {
                     if i > 0 {
                         write!(f, ", ")?;
                     }
                     self.extract(i).fmt(f)?;
                 }
                 write!(f, ")")
             }
         }
-        test_if!{
+        test_if! {
             $test_tt:
             paste::item! {
                 pub mod [<$id _fmt_upper_hex>] {
                     use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn upper_hex() {
                         use arrayvec::{ArrayString,ArrayVec};
                         type TinyString = ArrayString<[u8; 512]>;
 
                         use crate::fmt::Write;
                         let v = $id::splat($elem_ty::default());
                         let mut s = TinyString::new();
                         write!(&mut s, "{:#X}", v).unwrap();
diff --git a/third_party/rust/packed_simd/src/api/minimal/iuf.rs b/third_party/rust/packed_simd/src/api/minimal/iuf.rs
--- a/third_party/rust/packed_simd/src/api/minimal/iuf.rs
+++ b/third_party/rust/packed_simd/src/api/minimal/iuf.rs
@@ -13,18 +13,17 @@ macro_rules! impl_minimal_iuf {
             const LANES: usize = $elem_count;
             type LanesType = [u32; $elem_count];
         }
 
         impl $id {
             /// Creates a new instance with each vector elements initialized
             /// with the provided values.
             #[inline]
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::too_many_arguments))]
+            #[allow(clippy::too_many_arguments)]
             pub const fn new($($elem_name: $elem_ty),*) -> Self {
                 Simd(codegen::$id($($elem_name as $ielem_ty),*))
             }
 
             /// Returns the number of vector lanes.
             #[inline]
             pub const fn lanes() -> usize {
                 $elem_count
diff --git a/third_party/rust/packed_simd/src/api/minimal/mask.rs b/third_party/rust/packed_simd/src/api/minimal/mask.rs
--- a/third_party/rust/packed_simd/src/api/minimal/mask.rs
+++ b/third_party/rust/packed_simd/src/api/minimal/mask.rs
@@ -11,26 +11,24 @@ macro_rules! impl_minimal_mask {
             const LANES: usize = $elem_count;
             type LanesType = [u32; $elem_count];
         }
 
         impl $id {
             /// Creates a new instance with each vector elements initialized
             /// with the provided values.
             #[inline]
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::too_many_arguments))]
+            #[allow(clippy::too_many_arguments)]
             pub const fn new($($elem_name: bool),*) -> Self {
                 Simd(codegen::$id($(Self::bool_to_internal($elem_name)),*))
             }
 
             /// Converts a boolean type into the type of the vector lanes.
             #[inline]
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::indexing_slicing))]
+            #[allow(clippy::indexing_slicing)]
             const fn bool_to_internal(x: bool) -> $ielem_ty {
                 [0 as $ielem_ty, !(0 as $ielem_ty)][x as usize]
             }
 
             /// Returns the number of vector lanes.
             #[inline]
             pub const fn lanes() -> usize {
                 $elem_count
diff --git a/third_party/rust/packed_simd/src/api/minimal/ptr.rs b/third_party/rust/packed_simd/src/api/minimal/ptr.rs
--- a/third_party/rust/packed_simd/src/api/minimal/ptr.rs
+++ b/third_party/rust/packed_simd/src/api/minimal/ptr.rs
@@ -14,18 +14,17 @@ macro_rules! impl_minimal_p {
             const LANES: usize = $elem_count;
             type LanesType = [u32; $elem_count];
         }
 
         impl<T> $id<T> {
             /// Creates a new instance with each vector elements initialized
             /// with the provided values.
             #[inline]
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::too_many_arguments))]
+            #[allow(clippy::too_many_arguments)]
             pub const fn new($($elem_name: $elem_ty),*) -> Self {
                 Simd(codegen::$id($($elem_name),*))
             }
 
             /// Returns the number of vector lanes.
             #[inline]
             pub const fn lanes() -> usize {
                 $elem_count
@@ -84,18 +83,17 @@ macro_rules! impl_minimal_p {
             /// # Panics
             ///
             /// If `index >= Self::lanes()`.
             #[inline]
             #[must_use = "replace does not modify the original value - \
                           it returns a new vector with the value at `index` \
                           replaced by `new_value`d"
             ]
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::not_unsafe_ptr_arg_deref))]
+            #[allow(clippy::not_unsafe_ptr_arg_deref)]
             pub fn replace(self, index: usize, new_value: $elem_ty) -> Self {
                 assert!(index < $elem_count);
                 unsafe { self.replace_unchecked(index, new_value) }
             }
 
             /// Returns a new vector where the value at `index` is replaced by `new_value`.
             ///
             /// # Precondition
@@ -205,18 +203,17 @@ macro_rules! impl_minimal_p {
                         let VEC: $id<i32> = $id::splat(VAL);
                         let _ = VEC.replace($id::<i32>::lanes(), VAL42);
                     }
                 }
             }
         }
 
         impl<T> crate::fmt::Debug for $id<T> {
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::missing_inline_in_public_items))]
+            #[allow(clippy::missing_inline_in_public_items)]
             fn fmt(&self, f: &mut crate::fmt::Formatter<'_>)
                    -> crate::fmt::Result {
                 write!(
                     f,
                     "{}<{}>(",
                     stringify!($id),
                     unsafe { crate::intrinsics::type_name::<T>() }
                 )?;
@@ -419,30 +416,30 @@ macro_rules! impl_minimal_p {
                         }
                         let r = a.lt(b);
                         assert!(r == e);
                     }
                 }
             }
         }
 
-        #[cfg_attr(feature = "cargo-clippy", allow(clippy::partialeq_ne_impl))]
+        #[allow(clippy::partialeq_ne_impl)]
         impl<T> crate::cmp::PartialEq<$id<T>> for $id<T> {
             #[inline]
             fn eq(&self, other: &Self) -> bool {
                 $id::<T>::eq(*self, *other).all()
             }
             #[inline]
             fn ne(&self, other: &Self) -> bool {
                 $id::<T>::ne(*self, *other).any()
             }
         }
 
         // FIXME: https://github.com/rust-lang-nursery/rust-clippy/issues/2892
-        #[cfg_attr(feature = "cargo-clippy", allow(clippy::partialeq_ne_impl))]
+        #[allow(clippy::partialeq_ne_impl)]
         impl<T> crate::cmp::PartialEq<LexicographicallyOrdered<$id<T>>>
             for LexicographicallyOrdered<$id<T>>
         {
             #[inline]
             fn eq(&self, other: &Self) -> bool {
                 self.0 == other.0
             }
             #[inline]
@@ -616,18 +613,17 @@ macro_rules! impl_minimal_p {
             ///
             /// # Precondition
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not aligned
             /// to an `align_of::<Self>()` boundary, the behavior is undefined.
             #[inline]
             pub unsafe fn from_slice_aligned_unchecked(slice: &[$elem_ty])
                                                        -> Self {
-                #[cfg_attr(feature = "cargo-clippy",
-                           allow(clippy::cast_ptr_alignment))]
+                #[allow(clippy::cast_ptr_alignment)]
                 *(slice.get_unchecked(0) as *const $elem_ty as *const Self)
             }
 
             /// Instantiates a new vector with the values of the `slice`.
             ///
             /// # Precondition
             ///
             /// If `slice.len() < Self::lanes()` the behavior is undefined.
@@ -835,18 +831,17 @@ macro_rules! impl_minimal_p {
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not
             /// aligned to an `align_of::<Self>()` boundary, the behavior is
             /// undefined.
             #[inline]
             pub unsafe fn write_to_slice_aligned_unchecked(
                 self, slice: &mut [$elem_ty],
             ) {
-                #[cfg_attr(feature = "cargo-clippy",
-                           allow(clippy::cast_ptr_alignment))]
+                #[allow(clippy::cast_ptr_alignment)]
                 *(slice.get_unchecked_mut(0) as *mut $elem_ty as *mut Self) =
                     self;
             }
 
             /// Writes the values of the vector to the `slice`.
             ///
             /// # Precondition
             ///
@@ -1220,18 +1215,17 @@ macro_rules! impl_minimal_p {
             /// `isize::MAX` bytes with things like Physical Address Extension.
             /// As such, memory acquired directly from allocators or memory
             /// mapped files may be too large to handle with this function.
             ///
             /// Consider using `wrapping_offset` instead if these constraints
             /// are difficult to satisfy. The only advantage of this method is
             /// that it enables more aggressive compiler optimizations.
             #[inline]
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::should_implement_trait))]
+            #[allow(clippy::should_implement_trait)]
             pub unsafe fn add(self, count: $usize_ty) -> Self {
                 self.offset(count.cast())
             }
 
             /// Calculates the offset from a pointer (convenience for
             /// `.offset((count as isize).wrapping_neg())`).
             ///
             /// `count` is in units of T; e.g. a `count` of 3 represents a
@@ -1266,18 +1260,17 @@ macro_rules! impl_minimal_p {
             /// Extension. As such, memory acquired directly from allocators or
             /// memory mapped files *may* be too large to handle with this
             /// function.
             ///
             /// Consider using `wrapping_offset` instead if these constraints
             /// are difficult to satisfy. The only advantage of this method is
             /// that it enables more aggressive compiler optimizations.
             #[inline]
-            #[cfg_attr(feature = "cargo-clippy",
-                       allow(clippy::should_implement_trait))]
+            #[allow(clippy::should_implement_trait)]
             pub unsafe fn sub(self, count: $usize_ty) -> Self {
                 let x: $isize_ty = count.cast();
                 // note: - is currently wrapping_neg
                 self.offset(-x)
             }
 
             /// Calculates the offset from a pointer using wrapping arithmetic.
             /// (convenience for `.wrapping_offset(count as isize)`)
diff --git a/third_party/rust/packed_simd/src/api/reductions/mask.rs b/third_party/rust/packed_simd/src/api/reductions/mask.rs
--- a/third_party/rust/packed_simd/src/api/reductions/mask.rs
+++ b/third_party/rust/packed_simd/src/api/reductions/mask.rs
@@ -15,22 +15,23 @@ macro_rules! impl_reduction_mask {
             }
             /// Are `all` vector lanes `false`?
             #[inline]
             pub fn none(self) -> bool {
                 !self.any()
             }
         }
 
-        test_if!{
+        test_if! {
             $test_tt:
             paste::item! {
                 pub mod [<$id _reduction>] {
                     use super::*;
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn all() {
                         let a = $id::splat(true);
                         assert!(a.all());
                         let a = $id::splat(false);
                         assert!(!a.all());
 
                         if $id::lanes() > 1 {
                             for i in 0..$id::lanes() {
@@ -38,17 +39,18 @@ macro_rules! impl_reduction_mask {
                                 a = a.replace(i, false);
                                 assert!(!a.all());
                                 let mut a = $id::splat(false);
                                 a = a.replace(i, true);
                                 assert!(!a.all());
                             }
                         }
                     }
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn any() {
                         let a = $id::splat(true);
                         assert!(a.any());
                         let a = $id::splat(false);
                         assert!(!a.any());
 
                         if $id::lanes() > 1 {
                             for i in 0..$id::lanes() {
@@ -56,17 +58,18 @@ macro_rules! impl_reduction_mask {
                                 a = a.replace(i, false);
                                 assert!(a.any());
                                 let mut a = $id::splat(false);
                                 a = a.replace(i, true);
                                 assert!(a.any());
                             }
                         }
                     }
-                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    #[cfg_attr(not(target_arch = "wasm32"), test)]
+                    #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn none() {
                         let a = $id::splat(true);
                         assert!(!a.none());
                         let a = $id::splat(false);
                         assert!(a.none());
 
                         if $id::lanes() > 1 {
                             for i in 0..$id::lanes() {
diff --git a/third_party/rust/packed_simd/src/api/slice/from_slice.rs b/third_party/rust/packed_simd/src/api/slice/from_slice.rs
--- a/third_party/rust/packed_simd/src/api/slice/from_slice.rs
+++ b/third_party/rust/packed_simd/src/api/slice/from_slice.rs
@@ -48,20 +48,17 @@ macro_rules! impl_slice_from_slice {
             ) -> Self {
                 debug_assert!(slice.len() >= $elem_count);
                 let target_ptr = slice.get_unchecked(0) as *const $elem_ty;
                 debug_assert_eq!(
                     target_ptr.align_offset(crate::mem::align_of::<Self>()),
                     0
                 );
 
-                #[cfg_attr(
-                    feature = "cargo-clippy",
-                    allow(clippy::cast_ptr_alignment)
-                )]
+                #[allow(clippy::cast_ptr_alignment)]
                 *(target_ptr as *const Self)
             }
 
             /// Instantiates a new vector with the values of the `slice`.
             ///
             /// # Precondition
             ///
             /// If `slice.len() < Self::lanes()` the behavior is undefined.
diff --git a/third_party/rust/packed_simd/src/api/slice/write_to_slice.rs b/third_party/rust/packed_simd/src/api/slice/write_to_slice.rs
--- a/third_party/rust/packed_simd/src/api/slice/write_to_slice.rs
+++ b/third_party/rust/packed_simd/src/api/slice/write_to_slice.rs
@@ -50,30 +50,20 @@ macro_rules! impl_slice_write_to_slice {
             ) {
                 debug_assert!(slice.len() >= $elem_count);
                 let target_ptr = slice.get_unchecked_mut(0) as *mut $elem_ty;
                 debug_assert_eq!(
                     target_ptr.align_offset(crate::mem::align_of::<Self>()),
                     0
                 );
 
-                                #[cfg_attr(feature = "cargo-clippy",
-                                           allow(clippy::cast_ptr_alignment))]
-                        #[cfg_attr(
-                            feature = "cargo-clippy",
-                            allow(clippy::cast_ptr_alignment)
-                        )]
-                #[cfg_attr(
-                    feature = "cargo-clippy",
-                    allow(clippy::cast_ptr_alignment)
-                )]
-                #[cfg_attr(
-                    feature = "cargo-clippy",
-                    allow(clippy::cast_ptr_alignment)
-                )]
+                                #[allow(clippy::cast_ptr_alignment)]
+                        #[allow(clippy::cast_ptr_alignment)]
+                #[allow(clippy::cast_ptr_alignment)]
+                #[allow(clippy::cast_ptr_alignment)]
                 *(target_ptr as *mut Self) = self;
             }
 
             /// Writes the values of the vector to the `slice`.
             ///
             /// # Precondition
             ///
             /// If `slice.len() < Self::lanes()` the behavior is undefined.
diff --git a/third_party/rust/packed_simd/src/codegen/llvm.rs b/third_party/rust/packed_simd/src/codegen/llvm.rs
--- a/third_party/rust/packed_simd/src/codegen/llvm.rs
+++ b/third_party/rust/packed_simd/src/codegen/llvm.rs
@@ -91,11 +91,9 @@ extern "platform-intrinsic" {
     crate fn simd_fmin<T>(a: T, b: T) -> T;
     crate fn simd_fmax<T>(a: T, b: T) -> T;
 
     crate fn simd_fsqrt<T>(a: T) -> T;
     crate fn simd_fma<T>(a: T, b: T, c: T) -> T;
 
     crate fn simd_gather<T, P, M>(value: T, pointers: P, mask: M) -> T;
     crate fn simd_scatter<T, P, M>(value: T, pointers: P, mask: M);
-
-    crate fn simd_bitmask<T, U>(value: T) -> U;
 }
diff --git a/third_party/rust/packed_simd/src/codegen/math/float.rs b/third_party/rust/packed_simd/src/codegen/math/float.rs
--- a/third_party/rust/packed_simd/src/codegen/math/float.rs
+++ b/third_party/rust/packed_simd/src/codegen/math/float.rs
@@ -1,10 +1,10 @@
 //! Vertical floating-point math operations.
-#![cfg_attr(feature = "cargo-clippy", allow(clippy::useless_transmute))]
+#![allow(clippy::useless_transmute)]
 
 #[macro_use]
 crate mod macros;
 crate mod abs;
 crate mod cos;
 crate mod cos_pi;
 crate mod exp;
 crate mod ln;
diff --git a/third_party/rust/packed_simd/src/codegen/swap_bytes.rs b/third_party/rust/packed_simd/src/codegen/swap_bytes.rs
--- a/third_party/rust/packed_simd/src/codegen/swap_bytes.rs
+++ b/third_party/rust/packed_simd/src/codegen/swap_bytes.rs
@@ -19,49 +19,49 @@ macro_rules! impl_swap_bytes {
                 }
             }
         )+
     };
     (v32: $($id:ident,)+) => {
         $(
             impl SwapBytes for $id {
                 #[inline]
-                #[cfg_attr(feature = "cargo-clippy", allow(clippy::useless_transmute))]
+                #[allow(clippy::useless_transmute)]
                 fn swap_bytes(self) -> Self {
                     unsafe {
                         let bytes: u8x4 = crate::mem::transmute(self);
                         let result: u8x4 = shuffle!(bytes, [3, 2, 1, 0]);
                         crate::mem::transmute(result)
                     }
                 }
             }
         )+
     };
     (v64: $($id:ident,)+) => {
         $(
             impl SwapBytes for $id {
                 #[inline]
-                #[cfg_attr(feature = "cargo-clippy", allow(clippy::useless_transmute))]
+                #[allow(clippy::useless_transmute)]
                 fn swap_bytes(self) -> Self {
                     unsafe {
                         let bytes: u8x8 = crate::mem::transmute(self);
                         let result: u8x8 = shuffle!(
                             bytes, [7, 6, 5, 4, 3, 2, 1, 0]
                         );
                         crate::mem::transmute(result)
                     }
                 }
             }
         )+
     };
     (v128: $($id:ident,)+) => {
         $(
             impl SwapBytes for $id {
                 #[inline]
-                #[cfg_attr(feature = "cargo-clippy", allow(clippy::useless_transmute))]
+                #[allow(clippy::useless_transmute)]
                 fn swap_bytes(self) -> Self {
                     unsafe {
                         let bytes: u8x16 = crate::mem::transmute(self);
                         let result: u8x16 = shuffle!(bytes, [
                             15, 14, 13, 12, 11, 10, 9, 8,
                             7, 6, 5, 4, 3, 2, 1, 0
                         ]);
                         crate::mem::transmute(result)
@@ -69,17 +69,17 @@ macro_rules! impl_swap_bytes {
                 }
             }
         )+
     };
     (v256: $($id:ident,)+) => {
         $(
             impl SwapBytes for $id {
                 #[inline]
-                #[cfg_attr(feature = "cargo-clippy", allow(clippy::useless_transmute))]
+                #[allow(clippy::useless_transmute)]
                 fn swap_bytes(self) -> Self {
                     unsafe {
                         let bytes: u8x32 = crate::mem::transmute(self);
                         let result: u8x32 = shuffle!(bytes, [
                             31, 30, 29, 28, 27, 26, 25, 24,
                             23, 22, 21, 20, 19, 18, 17, 16,
                             15, 14, 13, 12, 11, 10, 9,  8,
                             7,  6,  5,  4,  3,  2,  1,  0
@@ -89,17 +89,17 @@ macro_rules! impl_swap_bytes {
                 }
             }
         )+
     };
     (v512: $($id:ident,)+) => {
         $(
             impl SwapBytes for $id {
                 #[inline]
-                #[cfg_attr(feature = "cargo-clippy", allow(clippy::useless_transmute))]
+                #[allow(clippy::useless_transmute)]
                 fn swap_bytes(self) -> Self {
                     unsafe {
                         let bytes: u8x64 = crate::mem::transmute(self);
                         let result: u8x64 = shuffle!(bytes, [
                             63, 62, 61, 60, 59, 58, 57, 56,
                             55, 54, 53, 52, 51, 50, 49, 48,
                             47, 46, 45, 44, 43, 42, 41, 40,
                             39, 38, 37, 36, 35, 34, 33, 32,
diff --git a/third_party/rust/packed_simd/src/lib.rs b/third_party/rust/packed_simd/src/lib.rs
--- a/third_party/rust/packed_simd/src/lib.rs
+++ b/third_party/rust/packed_simd/src/lib.rs
@@ -209,35 +209,27 @@
     link_llvm_intrinsics,
     core_intrinsics,
     stmt_expr_attributes,
     align_offset,
     mmx_target_feature,
     crate_visibility_modifier,
     custom_inner_attributes
 )]
-#![allow(non_camel_case_types, non_snake_case)]
+#![allow(non_camel_case_types, non_snake_case,
+         clippy::cast_possible_truncation,
+         clippy::cast_lossless,
+         clippy::cast_possible_wrap,
+         clippy::cast_precision_loss,
+         // This lint is currently broken for generic code
+         // See https://github.com/rust-lang/rust-clippy/issues/3410
+         clippy::use_self
+)]
 #![cfg_attr(test, feature(hashmap_internals))]
-#![cfg_attr(
-    feature = "cargo-clippy",
-    allow(
-        clippy::cast_possible_truncation,
-        clippy::cast_lossless,
-        clippy::cast_possible_wrap,
-        clippy::cast_precision_loss,
-        // This lint is currently broken for generic code
-        // See https://github.com/rust-lang/rust-clippy/issues/3410
-        clippy::use_self
-    )
-)]
-#![cfg_attr(
-    feature = "cargo-clippy",
-    deny(clippy::missing_inline_in_public_items)
-)]
-#![deny(warnings, rust_2018_idioms)]
+#![deny(warnings, rust_2018_idioms, clippy::missing_inline_in_public_items)]
 #![no_std]
 
 use cfg_if::cfg_if;
 
 cfg_if! {
     if #[cfg(feature = "core_arch")] {
         #[allow(unused_imports)]
         use core_arch as arch;
@@ -283,20 +275,17 @@ pub struct Simd<A: sealed::SimdArray>(
     // to call the shuffle intrinsics.
     #[doc(hidden)] pub <A as sealed::SimdArray>::Tuple,
 );
 
 /// Wrapper over `T` implementing a lexicoraphical order via the `PartialOrd`
 /// and/or `Ord` traits.
 #[repr(transparent)]
 #[derive(Copy, Clone, Debug)]
-#[cfg_attr(
-    feature = "cargo-clippy",
-    allow(clippy::missing_inline_in_public_items)
-)]
+#[allow(clippy::missing_inline_in_public_items)]
 pub struct LexicographicallyOrdered<T>(T);
 
 mod masks;
 pub use self::masks::*;
 
 mod v16;
 pub use self::v16::*;
 
diff --git a/third_party/rust/packed_simd/src/masks.rs b/third_party/rust/packed_simd/src/masks.rs
--- a/third_party/rust/packed_simd/src/masks.rs
+++ b/third_party/rust/packed_simd/src/masks.rs
@@ -31,17 +31,17 @@ macro_rules! impl_mask_ty {
 
         impl Default for $id {
             #[inline]
             fn default() -> Self {
                 $id(0)
             }
         }
 
-        #[cfg_attr(feature = "cargo-clippy", allow(clippy::partialeq_ne_impl))]
+        #[allow(clippy::partialeq_ne_impl)]
         impl PartialEq<$id> for $id {
             #[inline]
             fn eq(&self, other: &Self) -> bool {
                 self.0 == other.0
             }
             #[inline]
             fn ne(&self, other: &Self) -> bool {
                 self.0 != other.0
diff --git a/third_party/rust/packed_simd/src/v128.rs b/third_party/rust/packed_simd/src/v128.rs
--- a/third_party/rust/packed_simd/src/v128.rs
+++ b/third_party/rust/packed_simd/src/v128.rs
@@ -1,80 +1,80 @@
 //! 128-bit wide vector types
 #![rustfmt::skip]
 
 use crate::*;
 
-impl_i!([i8; 16]: i8x16, m8x16 | i8, u16 | test_v128 |
+impl_i!([i8; 16]: i8x16, m8x16 | i8 | test_v128 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: |
         /// A 128-bit vector with 16 `i8` lanes.
 );
-impl_u!([u8; 16]: u8x16, m8x16 | u8, u16 | test_v128 |
+impl_u!([u8; 16]: u8x16, m8x16 | u8 | test_v128 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: |
         /// A 128-bit vector with 16 `u8` lanes.
 );
-impl_m!([m8; 16]: m8x16 | i8, u16 | test_v128 |
+impl_m!([m8; 16]: m8x16 | i8 | test_v128 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: m16x16 |
         /// A 128-bit vector mask with 16 `m8` lanes.
 );
 
-impl_i!([i16; 8]: i16x8, m16x8 | i16, u8 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_i!([i16; 8]: i16x8, m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: i8x8, u8x8 |
         /// A 128-bit vector with 8 `i16` lanes.
 );
-impl_u!([u16; 8]: u16x8, m16x8 | u16, u8 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_u!([u16; 8]: u16x8, m16x8 | u16| test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: u8x8 |
         /// A 128-bit vector with 8 `u16` lanes.
 );
-impl_m!([m16; 8]: m16x8 | i16, u8 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_m!([m16; 8]: m16x8 | i16 | test_v128 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: m8x8, m32x8 |
         /// A 128-bit vector mask with 8 `m16` lanes.
 );
 
-impl_i!([i32; 4]: i32x4, m32x4 | i32, u8 | test_v128 | x0, x1, x2, x3 |
+impl_i!([i32; 4]: i32x4, m32x4 | i32 | test_v128 | x0, x1, x2, x3 |
         From: i8x4, u8x4, i16x4, u16x4  |
         /// A 128-bit vector with 4 `i32` lanes.
 );
-impl_u!([u32; 4]: u32x4, m32x4 | u32, u8 | test_v128 | x0, x1, x2, x3 |
+impl_u!([u32; 4]: u32x4, m32x4 | u32| test_v128 | x0, x1, x2, x3 |
         From: u8x4, u16x4 |
         /// A 128-bit vector with 4 `u32` lanes.
 );
 impl_f!([f32; 4]: f32x4, m32x4 | f32 | test_v128 | x0, x1, x2, x3 |
         From: i8x4, u8x4, i16x4, u16x4 |
         /// A 128-bit vector with 4 `f32` lanes.
 );
-impl_m!([m32; 4]: m32x4 | i32, u8 | test_v128 | x0, x1, x2, x3 |
+impl_m!([m32; 4]: m32x4 | i32 | test_v128 | x0, x1, x2, x3 |
         From: m8x4, m16x4, m64x4 |
         /// A 128-bit vector mask with 4 `m32` lanes.
 );
 
-impl_i!([i64; 2]: i64x2, m64x2 | i64, u8 | test_v128 | x0, x1 |
+impl_i!([i64; 2]: i64x2, m64x2 | i64 | test_v128 | x0, x1 |
         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2 |
         /// A 128-bit vector with 2 `i64` lanes.
 );
-impl_u!([u64; 2]: u64x2, m64x2 | u64, u8 | test_v128 | x0, x1 |
+impl_u!([u64; 2]: u64x2, m64x2 | u64 | test_v128 | x0, x1 |
         From: u8x2, u16x2, u32x2 |
         /// A 128-bit vector with 2 `u64` lanes.
 );
 impl_f!([f64; 2]: f64x2, m64x2 | f64 | test_v128 | x0, x1 |
         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, f32x2 |
         /// A 128-bit vector with 2 `f64` lanes.
 );
-impl_m!([m64; 2]: m64x2 | i64, u8 | test_v128 | x0, x1 |
+impl_m!([m64; 2]: m64x2 | i64 | test_v128 | x0, x1 |
         From: m8x2, m16x2, m32x2, m128x2 |
         /// A 128-bit vector mask with 2 `m64` lanes.
 );
 
-impl_i!([i128; 1]: i128x1, m128x1 | i128, u8 | test_v128 | x0 |
+impl_i!([i128; 1]: i128x1, m128x1 | i128 | test_v128 | x0 |
         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, i64x1, u64x1 */ | // FIXME: unary small vector types
         /// A 128-bit vector with 1 `i128` lane.
 );
-impl_u!([u128; 1]: u128x1, m128x1 | u128, u8 | test_v128 | x0 |
+impl_u!([u128; 1]: u128x1, m128x1 | u128 | test_v128 | x0 |
         From: /*u8x1, u16x1, u32x1, u64x1 */ | // FIXME: unary small vector types
         /// A 128-bit vector with 1 `u128` lane.
 );
-impl_m!([m128; 1]: m128x1 | i128, u8 | test_v128 | x0 |
+impl_m!([m128; 1]: m128x1 | i128 | test_v128 | x0 |
         From: /*m8x1, m16x1, m32x1, m64x1 */ | // FIXME: unary small vector types
         /// A 128-bit vector mask with 1 `m128` lane.
 );
diff --git a/third_party/rust/packed_simd/src/v16.rs b/third_party/rust/packed_simd/src/v16.rs
--- a/third_party/rust/packed_simd/src/v16.rs
+++ b/third_party/rust/packed_simd/src/v16.rs
@@ -1,16 +1,16 @@
 //! 16-bit wide vector types
 
 use crate::*;
 
-impl_i!([i8; 2]: i8x2, m8x2 | i8, u8 | test_v16 | x0, x1 |
+impl_i!([i8; 2]: i8x2, m8x2 | i8 | test_v16 | x0, x1 |
         From: |
         /// A 16-bit vector with 2 `i8` lanes.
 );
-impl_u!([u8; 2]: u8x2, m8x2 | u8, u8 | test_v16 | x0, x1 |
+impl_u!([u8; 2]: u8x2, m8x2 | u8 | test_v16 | x0, x1 |
         From: |
         /// A 16-bit vector with 2 `u8` lanes.
 );
-impl_m!([m8; 2]: m8x2 | i8, u8 | test_v16 | x0, x1 |
+impl_m!([m8; 2]: m8x2 | i8 | test_v16 | x0, x1 |
         From: m16x2, m32x2, m64x2, m128x2 |
         /// A 16-bit vector mask with 2 `m8` lanes.
 );
diff --git a/third_party/rust/packed_simd/src/v256.rs b/third_party/rust/packed_simd/src/v256.rs
--- a/third_party/rust/packed_simd/src/v256.rs
+++ b/third_party/rust/packed_simd/src/v256.rs
@@ -1,86 +1,86 @@
 //! 256-bit wide vector types
 #![rustfmt::skip]
 
 use crate::*;
 
-impl_i!([i8; 32]: i8x32, m8x32 | i8, u32 | test_v256 |
+impl_i!([i8; 32]: i8x32, m8x32 | i8 | test_v256 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |
         From: |
         /// A 256-bit vector with 32 `i8` lanes.
 );
-impl_u!([u8; 32]: u8x32, m8x32 | u8, u32 | test_v256 |
+impl_u!([u8; 32]: u8x32, m8x32 | u8 | test_v256 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |
         From: |
         /// A 256-bit vector with 32 `u8` lanes.
 );
-impl_m!([m8; 32]: m8x32 | i8, u32 | test_v256 |
+impl_m!([m8; 32]: m8x32 | i8 | test_v256 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |
         From:  |
         /// A 256-bit vector mask with 32 `m8` lanes.
 );
 
-impl_i!([i16; 16]: i16x16, m16x16 | i16, u16 | test_v256 |
+impl_i!([i16; 16]: i16x16, m16x16 | i16 | test_v256 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: i8x16, u8x16 |
         /// A 256-bit vector with 16 `i16` lanes.
 );
-impl_u!([u16; 16]: u16x16, m16x16 | u16, u16 | test_v256 |
+impl_u!([u16; 16]: u16x16, m16x16 | u16 | test_v256 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: u8x16 |
         /// A 256-bit vector with 16 `u16` lanes.
 );
-impl_m!([m16; 16]: m16x16 | i16, u16 | test_v256 |
+impl_m!([m16; 16]: m16x16 | i16 | test_v256 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: m8x16 |
         /// A 256-bit vector mask with 16 `m16` lanes.
 );
 
-impl_i!([i32; 8]: i32x8, m32x8 | i32, u8 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |
+impl_i!([i32; 8]: i32x8, m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7  |
         From: i8x8, u8x8, i16x8, u16x8 |
         /// A 256-bit vector with 8 `i32` lanes.
 );
-impl_u!([u32; 8]: u32x8, m32x8 | u32, u8 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_u!([u32; 8]: u32x8, m32x8 | u32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: u8x8, u16x8 |
         /// A 256-bit vector with 8 `u32` lanes.
 );
 impl_f!([f32; 8]: f32x8, m32x8 | f32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: i8x8, u8x8, i16x8, u16x8 |
         /// A 256-bit vector with 8 `f32` lanes.
 );
-impl_m!([m32; 8]: m32x8 | i32, u8 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_m!([m32; 8]: m32x8 | i32 | test_v256 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: m8x8, m16x8 |
         /// A 256-bit vector mask with 8 `m32` lanes.
 );
 
-impl_i!([i64; 4]: i64x4, m64x4 | i64, u8 | test_v256 | x0, x1, x2, x3 |
+impl_i!([i64; 4]: i64x4, m64x4 | i64 | test_v256 | x0, x1, x2, x3 |
         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4 |
         /// A 256-bit vector with 4 `i64` lanes.
 );
-impl_u!([u64; 4]: u64x4, m64x4 | u64, u8 | test_v256 | x0, x1, x2, x3 |
+impl_u!([u64; 4]: u64x4, m64x4 | u64 | test_v256 | x0, x1, x2, x3 |
         From: u8x4, u16x4, u32x4 |
         /// A 256-bit vector with 4 `u64` lanes.
 );
 impl_f!([f64; 4]: f64x4, m64x4 | f64 | test_v256 | x0, x1, x2, x3 |
         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, f32x4 |
         /// A 256-bit vector with 4 `f64` lanes.
 );
-impl_m!([m64; 4]: m64x4 | i64, u8 | test_v256 | x0, x1, x2, x3 |
+impl_m!([m64; 4]: m64x4 | i64 | test_v256 | x0, x1, x2, x3 |
         From: m8x4, m16x4, m32x4 |
         /// A 256-bit vector mask with 4 `m64` lanes.
 );
 
-impl_i!([i128; 2]: i128x2, m128x2 | i128, u8 | test_v256 | x0, x1 |
+impl_i!([i128; 2]: i128x2, m128x2 | i128 | test_v256 | x0, x1 |
         From: i8x2, u8x2, i16x2, u16x2, i32x2, u32x2, i64x2, u64x2 |
         /// A 256-bit vector with 2 `i128` lanes.
 );
-impl_u!([u128; 2]: u128x2, m128x2 | u128, u8 | test_v256 | x0, x1 |
+impl_u!([u128; 2]: u128x2, m128x2 | u128 | test_v256 | x0, x1 |
         From: u8x2, u16x2, u32x2, u64x2 |
         /// A 256-bit vector with 2 `u128` lanes.
 );
-impl_m!([m128; 2]: m128x2 | i128, u8 | test_v256 | x0, x1 |
+impl_m!([m128; 2]: m128x2 | i128 | test_v256 | x0, x1 |
         From: m8x2, m16x2, m32x2, m64x2 |
         /// A 256-bit vector mask with 2 `m128` lanes.
 );
diff --git a/third_party/rust/packed_simd/src/v32.rs b/third_party/rust/packed_simd/src/v32.rs
--- a/third_party/rust/packed_simd/src/v32.rs
+++ b/third_party/rust/packed_simd/src/v32.rs
@@ -1,29 +1,29 @@
 //! 32-bit wide vector types
 
 use crate::*;
 
-impl_i!([i8; 4]: i8x4, m8x4 | i8, u8 | test_v32 | x0, x1, x2, x3 |
+impl_i!([i8; 4]: i8x4, m8x4 | i8 | test_v32 | x0, x1, x2, x3 |
         From: |
         /// A 32-bit vector with 4 `i8` lanes.
 );
-impl_u!([u8; 4]: u8x4, m8x4 | u8, u8 | test_v32 | x0, x1, x2, x3 |
+impl_u!([u8; 4]: u8x4, m8x4 | u8 | test_v32 | x0, x1, x2, x3 |
         From: |
         /// A 32-bit vector with 4 `u8` lanes.
 );
-impl_m!([m8; 4]: m8x4 | i8, u8 | test_v32 | x0, x1, x2, x3 |
+impl_m!([m8; 4]: m8x4 | i8 | test_v32 | x0, x1, x2, x3 |
         From: m16x4, m32x4, m64x4 |
         /// A 32-bit vector mask with 4 `m8` lanes.
 );
 
-impl_i!([i16; 2]: i16x2, m16x2 | i16, u8 | test_v32 | x0, x1 |
+impl_i!([i16; 2]: i16x2, m16x2 | i16 | test_v32 | x0, x1 |
         From: i8x2, u8x2 |
         /// A 32-bit vector with 2 `i16` lanes.
 );
-impl_u!([u16; 2]: u16x2, m16x2 | u16, u8 | test_v32 | x0, x1 |
+impl_u!([u16; 2]: u16x2, m16x2 | u16 | test_v32 | x0, x1 |
         From: u8x2 |
         /// A 32-bit vector with 2 `u16` lanes.
 );
-impl_m!([m16; 2]: m16x2 | i16, u8 | test_v32 | x0, x1 |
+impl_m!([m16; 2]: m16x2 | i16 | test_v32 | x0, x1 |
         From: m8x2, m32x2, m64x2, m128x2 |
         /// A 32-bit vector mask with 2 `m16` lanes.
 );
diff --git a/third_party/rust/packed_simd/src/v512.rs b/third_party/rust/packed_simd/src/v512.rs
--- a/third_party/rust/packed_simd/src/v512.rs
+++ b/third_party/rust/packed_simd/src/v512.rs
@@ -1,99 +1,99 @@
 //! 512-bit wide vector types
 #![rustfmt::skip]
 
 use crate::*;
 
-impl_i!([i8; 64]: i8x64, m8x64 | i8, u64 | test_v512 |
+impl_i!([i8; 64]: i8x64, m8x64 | i8 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,
         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,
         x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63 |
         From: |
         /// A 512-bit vector with 64 `i8` lanes.
 );
-impl_u!([u8; 64]: u8x64, m8x64 | u8, u64 | test_v512 |
+impl_u!([u8; 64]: u8x64, m8x64 | u8 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,
         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,
         x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63 |
         From: |
         /// A 512-bit vector with 64 `u8` lanes.
 );
-impl_m!([m8; 64]: m8x64 | i8, u64 | test_v512 |
+impl_m!([m8; 64]: m8x64 | i8 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31,
         x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47,
         x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63 |
         From:  |
         /// A 512-bit vector mask with 64 `m8` lanes.
 );
 
-impl_i!([i16; 32]: i16x32, m16x32 | i16, u32 | test_v512 |
+impl_i!([i16; 32]: i16x32, m16x32 | i16 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |
         From: i8x32, u8x32 |
         /// A 512-bit vector with 32 `i16` lanes.
 );
-impl_u!([u16; 32]: u16x32, m16x32 | u16, u32 | test_v512 |
+impl_u!([u16; 32]: u16x32, m16x32 | u16 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |
         From: u8x32 |
         /// A 512-bit vector with 32 `u16` lanes.
 );
-impl_m!([m16; 32]: m16x32 | i16, u32 | test_v512 |
+impl_m!([m16; 32]: m16x32 | i16 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
         x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31 |
         From: m8x32 |
         /// A 512-bit vector mask with 32 `m16` lanes.
 );
 
-impl_i!([i32; 16]: i32x16, m32x16 | i32, u16 | test_v512 |
+impl_i!([i32; 16]: i32x16, m32x16 | i32 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: i8x16, u8x16, i16x16, u16x16 |
         /// A 512-bit vector with 16 `i32` lanes.
 );
-impl_u!([u32; 16]: u32x16, m32x16 | u32, u16 | test_v512 |
+impl_u!([u32; 16]: u32x16, m32x16 | u32 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: u8x16, u16x16 |
         /// A 512-bit vector with 16 `u32` lanes.
 );
 impl_f!([f32; 16]: f32x16, m32x16 | f32 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: i8x16, u8x16, i16x16, u16x16 |
         /// A 512-bit vector with 16 `f32` lanes.
 );
-impl_m!([m32; 16]: m32x16 | i32, u16 | test_v512 |
+impl_m!([m32; 16]: m32x16 | i32 | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15 |
         From: m8x16, m16x16 |
         /// A 512-bit vector mask with 16 `m32` lanes.
 );
 
-impl_i!([i64; 8]: i64x8, m64x8 | i64, u8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_i!([i64; 8]: i64x8, m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8 |
         /// A 512-bit vector with 8 `i64` lanes.
 );
-impl_u!([u64; 8]: u64x8, m64x8 | u64, u8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_u!([u64; 8]: u64x8, m64x8 | u64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: u8x8, u16x8, u32x8 |
         /// A 512-bit vector with 8 `u64` lanes.
 );
 impl_f!([f64; 8]: f64x8, m64x8 | f64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: i8x8, u8x8, i16x8, u16x8, i32x8, u32x8, f32x8 |
         /// A 512-bit vector with 8 `f64` lanes.
 );
-impl_m!([m64; 8]: m64x8 | i64, u8 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_m!([m64; 8]: m64x8 | i64 | test_v512 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: m8x8, m16x8, m32x8 |
         /// A 512-bit vector mask with 8 `m64` lanes.
 );
 
-impl_i!([i128; 4]: i128x4, m128x4 | i128, u8 | test_v512 | x0, x1, x2, x3 |
+impl_i!([i128; 4]: i128x4, m128x4 | i128 | test_v512 | x0, x1, x2, x3 |
         From: i8x4, u8x4, i16x4, u16x4, i32x4, u32x4, i64x4, u64x4 |
         /// A 512-bit vector with 4 `i128` lanes.
 );
-impl_u!([u128; 4]: u128x4, m128x4 | u128, u8 | test_v512 | x0, x1, x2, x3 |
+impl_u!([u128; 4]: u128x4, m128x4 | u128 | test_v512 | x0, x1, x2, x3 |
         From: u8x4, u16x4, u32x4, u64x4 |
         /// A 512-bit vector with 4 `u128` lanes.
 );
-impl_m!([m128; 4]: m128x4 | i128, u8 | test_v512 | x0, x1, x2, x3 |
+impl_m!([m128; 4]: m128x4 | i128 | test_v512 | x0, x1, x2, x3 |
         From: m8x4, m16x4, m32x4, m64x4 |
         /// A 512-bit vector mask with 4 `m128` lanes.
 );
diff --git a/third_party/rust/packed_simd/src/v64.rs b/third_party/rust/packed_simd/src/v64.rs
--- a/third_party/rust/packed_simd/src/v64.rs
+++ b/third_party/rust/packed_simd/src/v64.rs
@@ -1,66 +1,66 @@
 //! 64-bit wide vector types
 #![rustfmt::skip]
 
 use super::*;
 
-impl_i!([i8; 8]: i8x8, m8x8 | i8, u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_i!([i8; 8]: i8x8, m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: |
         /// A 64-bit vector with 8 `i8` lanes.
 );
-impl_u!([u8; 8]: u8x8, m8x8 | u8, u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_u!([u8; 8]: u8x8, m8x8 | u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: |
         /// A 64-bit vector with 8 `u8` lanes.
 );
-impl_m!([m8; 8]: m8x8 | i8, u8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |
+impl_m!([m8; 8]: m8x8 | i8 | test_v64 | x0, x1, x2, x3, x4, x5, x6, x7 |
         From: m16x8, m32x8 |
         /// A 64-bit vector mask with 8 `m8` lanes.
 );
 
-impl_i!([i16; 4]: i16x4, m16x4 | i16, u8 | test_v64 | x0, x1, x2, x3 |
+impl_i!([i16; 4]: i16x4, m16x4 | i16 | test_v64 | x0, x1, x2, x3 |
         From: i8x4, u8x4 |
         /// A 64-bit vector with 4 `i16` lanes.
 );
-impl_u!([u16; 4]: u16x4, m16x4 | u16, u8 | test_v64 | x0, x1, x2, x3 |
+impl_u!([u16; 4]: u16x4, m16x4 | u16 | test_v64 | x0, x1, x2, x3 |
         From: u8x4 |
         /// A 64-bit vector with 4 `u16` lanes.
 );
-impl_m!([m16; 4]: m16x4 | i16, u8 | test_v64 | x0, x1, x2, x3 |
+impl_m!([m16; 4]: m16x4 | i16 | test_v64 | x0, x1, x2, x3 |
         From: m8x4, m32x4, m64x4 |
         /// A 64-bit vector mask with 4 `m16` lanes.
 );
 
-impl_i!([i32; 2]: i32x2, m32x2 | i32, u8 | test_v64 | x0, x1 |
+impl_i!([i32; 2]: i32x2, m32x2 | i32 | test_v64 | x0, x1 |
         From: i8x2, u8x2, i16x2, u16x2 |
         /// A 64-bit vector with 2 `i32` lanes.
 );
-impl_u!([u32; 2]: u32x2, m32x2 | u32, u8 | test_v64 | x0, x1 |
+impl_u!([u32; 2]: u32x2, m32x2 | u32 | test_v64 | x0, x1 |
         From: u8x2, u16x2 |
         /// A 64-bit vector with 2 `u32` lanes.
 );
-impl_m!([m32; 2]: m32x2 | i32, u8 | test_v64 | x0, x1 |
+impl_m!([m32; 2]: m32x2 | i32 | test_v64 | x0, x1 |
         From: m8x2, m16x2, m64x2, m128x2 |
         /// A 64-bit vector mask with 2 `m32` lanes.
 );
 impl_f!([f32; 2]: f32x2, m32x2 | f32 | test_v64 | x0, x1 |
         From: i8x2, u8x2, i16x2, u16x2 |
         /// A 64-bit vector with 2 `f32` lanes.
 );
 
 /*
-impl_i!([i64; 1]: i64x1, m64x1 | i64, u8 | test_v64 | x0 |
+impl_i!([i64; 1]: i64x1, m64x1 | i64 | test_v64 | x0 |
         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1*/ |  // FIXME: primitive to vector conversion
         /// A 64-bit vector with 1 `i64` lanes.
 );
-impl_u!([u64; 1]: u64x1, m64x1 | u64, u8 | test_v64 | x0 |
+impl_u!([u64; 1]: u64x1, m64x1 | u64 | test_v64 | x0 |
         From: /*u8x1, u16x1, u32x1*/ | // FIXME: primitive to vector conversion
         /// A 64-bit vector with 1 `u64` lanes.
 );
-impl_m!([m64; 1]: m64x1 | i64, u8 | test_v64 | x0 |
+impl_m!([m64; 1]: m64x1 | i64 | test_v64 | x0 |
         From: /*m8x1, m16x1, m32x1, */ m128x1 | // FIXME: unary small vector types
         /// A 64-bit vector mask with 1 `m64` lanes.
 );
 impl_f!([f64; 1]: f64x1, m64x1 | f64 | test_v64 | x0 |
         From: /*i8x1, u8x1, i16x1, u16x1, i32x1, u32x1, f32x1*/ | // FIXME: unary small vector types
         /// A 64-bit vector with 1 `f64` lanes.
 );
 */
diff --git a/third_party/rust/packed_simd/src/vSize.rs b/third_party/rust/packed_simd/src/vSize.rs
--- a/third_party/rust/packed_simd/src/vSize.rs
+++ b/third_party/rust/packed_simd/src/vSize.rs
@@ -1,53 +1,53 @@
 //! Vectors with pointer-sized elements
 
 use crate::codegen::pointer_sized_int::{isize_, usize_};
 use crate::*;
 
-impl_i!([isize; 2]: isizex2, msizex2 | isize_, u8 | test_v128 |
+impl_i!([isize; 2]: isizex2, msizex2 | isize_ | test_v128 |
         x0, x1|
         From: |
         /// A vector with 2 `isize` lanes.
 );
 
-impl_u!([usize; 2]: usizex2, msizex2 | usize_, u8 | test_v128 |
+impl_u!([usize; 2]: usizex2, msizex2 | usize_ | test_v128 |
         x0, x1|
         From: |
         /// A vector with 2 `usize` lanes.
 );
-impl_m!([msize; 2]: msizex2 | isize_, u8 | test_v128 |
+impl_m!([msize; 2]: msizex2 | isize_ | test_v128 |
         x0, x1 |
         From: |
         /// A vector mask with 2 `msize` lanes.
 );
 
-impl_i!([isize; 4]: isizex4, msizex4 | isize_, u8 | test_v256 |
+impl_i!([isize; 4]: isizex4, msizex4 | isize_ | test_v256 |
         x0, x1, x2, x3 |
         From: |
         /// A vector with 4 `isize` lanes.
 );
-impl_u!([usize; 4]: usizex4, msizex4 | usize_, u8 | test_v256 |
+impl_u!([usize; 4]: usizex4, msizex4 | usize_ | test_v256 |
         x0, x1, x2, x3|
         From: |
         /// A vector with 4 `usize` lanes.
 );
-impl_m!([msize; 4]: msizex4 | isize_, u8 | test_v256 |
+impl_m!([msize; 4]: msizex4 | isize_ | test_v256 |
         x0, x1, x2, x3 |
         From: |
         /// A vector mask with 4 `msize` lanes.
 );
 
-impl_i!([isize; 8]: isizex8, msizex8 | isize_, u8 | test_v512 |
+impl_i!([isize; 8]: isizex8, msizex8 | isize_ | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7 |
         From: |
         /// A vector with 4 `isize` lanes.
 );
-impl_u!([usize; 8]: usizex8, msizex8 | usize_, u8 | test_v512 |
+impl_u!([usize; 8]: usizex8, msizex8 | usize_ | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7 |
         From: |
         /// A vector with 8 `usize` lanes.
 );
-impl_m!([msize; 8]: msizex8 | isize_, u8 | test_v512 |
+impl_m!([msize; 8]: msizex8 | isize_ | test_v512 |
         x0, x1, x2, x3, x4, x5, x6, x7 |
         From: |
         /// A vector mask with 8 `msize` lanes.
 );
