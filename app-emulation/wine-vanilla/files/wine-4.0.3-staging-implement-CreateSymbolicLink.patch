From 5db0156b3b2a13e6ccded538ed0ce489633eaafc Mon Sep 17 00:00:00 2001
From: Gijs Vermeulen <gijsvrm@gmail.com>
Date: Mon, 4 Feb 2019 15:16:39 +0100
Subject: [PATCH] kernel32: Implement CreateSymbolicLink.

Signed-off-by: Gijs Vermeulen <gijsvrm@gmail.com>
---
 dlls/kernel32/path.c | 72 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 68 insertions(+), 4 deletions(-)

diff --git a/dlls/kernel32/path.c b/dlls/kernel32/path.c
index cf1c768970..cb8540389e 100644
--- a/dlls/kernel32/path.c
+++ b/dlls/kernel32/path.c
@@ -2079,8 +2079,55 @@ WCHAR * CDECL wine_get_dos_file_name( LPCSTR str )
  */
 BOOLEAN WINAPI CreateSymbolicLinkW(LPCWSTR link, LPCWSTR target, DWORD flags)
 {
-    FIXME("(%s %s %d): stub\n", debugstr_w(link), debugstr_w(target), flags);
-    return TRUE;
+    NTSTATUS status, temp;
+    UNICODE_STRING nt_dest, nt_source;
+    ANSI_STRING unix_dest, unix_source;
+    BOOL ret = FALSE;
+
+    TRACE("(%s, %s, %d)\n", debugstr_w(link), debugstr_w(target), flags);
+
+    nt_dest.Buffer = nt_source.Buffer = NULL;
+    if (!RtlDosPathNameToNtPathName_U( link, &nt_dest, NULL, NULL ) ||
+        !RtlDosPathNameToNtPathName_U( target, &nt_source, NULL, NULL ))
+    {
+        SetLastError( ERROR_PATH_NOT_FOUND );
+        goto err;
+    }
+
+    unix_source.Buffer = unix_dest.Buffer = NULL;
+    temp = wine_nt_to_unix_file_name( &nt_source, &unix_source, FILE_OPEN_IF, FALSE );
+    status = wine_nt_to_unix_file_name( &nt_dest, &unix_dest, FILE_CREATE, FALSE );
+    if (!status) /* destination must not exist */
+        status = STATUS_OBJECT_NAME_EXISTS;
+    else if (status == STATUS_NO_SUCH_FILE)
+        status = STATUS_SUCCESS;
+
+    if (status)
+        SetLastError( RtlNtStatusToDosError(status) );
+    else
+    {
+        if(temp != STATUS_NO_SUCH_FILE && GetFileAttributesW(target) & FILE_ATTRIBUTE_DIRECTORY && strstr(unix_dest.Buffer, unix_source.Buffer))
+        {
+            FIXME("Symlinking a directory inside that directory is not supported.\n");
+            ret = TRUE;
+        }
+        else if (!symlink( unix_source.Buffer, unix_dest.Buffer ))
+        {
+            TRACE("Symlinked '%s' to '%s'\n", debugstr_a( unix_dest.Buffer ),
+                debugstr_a( unix_source.Buffer ));
+            ret = TRUE;
+        }
+        else
+            FILE_SetDosError();
+    }
+
+    RtlFreeAnsiString( &unix_source );
+    RtlFreeAnsiString( &unix_dest );
+
+err:
+    RtlFreeUnicodeString( &nt_source );
+    RtlFreeUnicodeString( &nt_dest );
+    return ret;
 }
 
 /*************************************************************************
@@ -2088,8 +2135,25 @@ BOOLEAN WINAPI CreateSymbolicLinkW(LPCWSTR link, LPCWSTR target, DWORD flags)
  */
 BOOLEAN WINAPI CreateSymbolicLinkA(LPCSTR link, LPCSTR target, DWORD flags)
 {
-    FIXME("(%s %s %d): stub\n", debugstr_a(link), debugstr_a(target), flags);
-    return TRUE;
+    WCHAR *sourceW, *destW;
+    BOOL res;
+
+    if (!(sourceW = FILE_name_AtoW( target, TRUE )))
+    {
+        return FALSE;
+    }
+    if (!(destW = FILE_name_AtoW( link, TRUE )))
+    {
+        HeapFree( GetProcessHeap(), 0, sourceW );
+        return FALSE;
+    }
+
+    res = CreateSymbolicLinkW( destW, sourceW, flags );
+
+    HeapFree( GetProcessHeap(), 0, sourceW );
+    HeapFree( GetProcessHeap(), 0, destW );
+
+    return res;
 }
 
 /*************************************************************************
-- 
2.20.1


