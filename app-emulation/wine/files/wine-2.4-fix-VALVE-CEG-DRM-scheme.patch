--- a/dlls/ntdll/sec.c	
+++ a/dlls/ntdll/sec.c	
@@ -199,6 +199,49 @@ NTSTATUS WINAPI RtlAllocateAndInitializeSid (
  *  TRUE, if pSid1 is equal to pSid2,
  *  FALSE otherwise.
  */
+
+#define HEXDUMP_COLS 16
+
+void hexdump(void *mem, unsigned int len)
+{
+    unsigned int i, j;
+
+    for (i = 0; i < len + ((len % HEXDUMP_COLS) ? (HEXDUMP_COLS - len % HEXDUMP_COLS) : 0); i++) {
+        /* print offset */
+        if (i % HEXDUMP_COLS == 0) {
+            printf("%08x  ", i);
+        }
+
+        /* print hex data */
+        if (i < len) {
+            printf("%02x ", 0xFF & ((char*)mem)[i]);
+        } else { /* end of block, just aligning for ASCII dump */
+            printf("   ");
+        }
+        if (i % HEXDUMP_COLS == 7) {
+            putchar(' ');
+        }
+
+        /* print ASCII dump */
+        if (i % HEXDUMP_COLS == (HEXDUMP_COLS - 1)) {
+            printf(" |");
+            for (j = i - (HEXDUMP_COLS - 1); j <= i; j++) {
+                if (j >= len) { /* end of block, not really printing */
+                    putchar(' ');
+                } else if (isprint(((char*)mem)[j]) && ((unsigned char*)mem)[j] < 0x80) { /* printable char */
+                    putchar(0xFF & ((char*)mem)[j]);
+                } else { /* other char */
+                    putchar('.');
+                }
+            }
+            putchar('|');
+            putchar('\n');
+        }
+    }
+}
+
+static const SID builtin_users_sid = { SID_REVISION, 1, { SECURITY_NT_AUTHORITY }, { SECURITY_AUTHENTICATED_USER_RID } };
+
 BOOL WINAPI RtlEqualSid( PSID pSid1, PSID pSid2 )
 {
     if (!RtlValidSid(pSid1) || !RtlValidSid(pSid2))
@@ -207,10 +250,25 @@ BOOL WINAPI RtlEqualSid( PSID pSid1, PSID pSid2 )
     if (*RtlSubAuthorityCountSid(pSid1) != *RtlSubAuthorityCountSid(pSid2))
         return FALSE;
 
-    if (memcmp(pSid1, pSid2, RtlLengthSid(pSid1)) != 0)
-        return FALSE;
+    if (memcmp(pSid1, pSid2, RtlLengthSid(pSid1)) == 0)
+        return TRUE;
 
-    return TRUE;
+    //ConvertStringSidToSidA("S-1-5-32-545", &pSid1);
+    pSid1 = (PSID)&builtin_users_sid;
+    //PSID pSid3 = (PSID)&builtin_users_sid;
+
+    if (memcmp(pSid1, pSid2, RtlLengthSid(pSid2)) == 0) {
+    //if (memcmp(pSid2, pSid3, RtlLengthSid(pSid2)) == 0) {
+        //FIXME("test sid match\n");
+        return TRUE;
+    }
+//printf("pSid1 is:");
+//hexdump(pSid1, RtlLengthSid(pSid1));
+//printf("pSid2 should:");
+//hexdump(pSid2, RtlLengthSid(pSid2));
+//putchar('\n');
+
+    return FALSE;
 }
 
 /******************************************************************************

